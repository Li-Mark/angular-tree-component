{"hash":"9181c4f4185befe47053c8326a3cd7639bb36b7e","fesm2020":{"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, Injectable, Component, ViewEncapsulation, EventEmitter, Output, HostListener, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { autorun, reaction, computed as computed$1, observable as observable$1, action as action$1 } from 'mobx';\n\nclass TreeMobxAutorunDirective {\r\n    constructor(templateRef, viewContainer) {\r\n        this.templateRef = templateRef;\r\n        this.viewContainer = viewContainer;\r\n        this.templateBindings = {};\r\n    }\r\n    ngOnInit() {\r\n        this.view = this.viewContainer.createEmbeddedView(this.templateRef);\r\n        if (this.dispose) {\r\n            this.dispose();\r\n        }\r\n        if (this.shouldDetach()) {\r\n            this.view.detach();\r\n        }\r\n        this.autoDetect(this.view);\r\n    }\r\n    shouldDetach() {\r\n        return this.treeMobxAutorun && this.treeMobxAutorun.detach;\r\n    }\r\n    autoDetect(view) {\r\n        this.dispose = autorun(() => view.detectChanges());\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n}\r\n/** @nocollapse */ TreeMobxAutorunDirective.ɵfac = function TreeMobxAutorunDirective_Factory(t) { return new (t || TreeMobxAutorunDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef)); };\r\n/** @nocollapse */ TreeMobxAutorunDirective.ɵdir = /** @pureOrBreakMyCode */ i0.ɵɵdefineDirective({ type: TreeMobxAutorunDirective, selectors: [[\"\", \"treeMobxAutorun\", \"\"]], inputs: { treeMobxAutorun: \"treeMobxAutorun\" } });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMobxAutorunDirective, [{\r\n        type: Directive,\r\n        args: [{ selector: '[treeMobxAutorun]' }]\r\n    }], function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; }, { treeMobxAutorun: [{\r\n            type: Input\r\n        }] }); })();\n\nconst KEYS = {\r\n    LEFT: 37,\r\n    UP: 38,\r\n    RIGHT: 39,\r\n    DOWN: 40,\r\n    ENTER: 13,\r\n    SPACE: 32,\r\n    CONTEXT_MENU: 32\r\n};\n\nconst TREE_ACTIONS = {\r\n    TOGGLE_ACTIVE: (tree, node, $event) => node && node.toggleActivated(),\r\n    TOGGLE_ACTIVE_MULTI: (tree, node, $event) => node && node.toggleActivated(true),\r\n    TOGGLE_SELECTED: (tree, node, $event) => node && node.toggleSelected(),\r\n    ACTIVATE: (tree, node, $event) => node.setIsActive(true),\r\n    DEACTIVATE: (tree, node, $event) => node.setIsActive(false),\r\n    SELECT: (tree, node, $event) => node.setIsSelected(true),\r\n    DESELECT: (tree, node, $event) => node.setIsSelected(false),\r\n    FOCUS: (tree, node, $event) => node.focus(),\r\n    TOGGLE_EXPANDED: (tree, node, $event) => node.hasChildren && node.toggleExpanded(),\r\n    EXPAND: (tree, node, $event) => node.expand(),\r\n    COLLAPSE: (tree, node, $event) => node.collapse(),\r\n    DRILL_DOWN: (tree, node, $event) => tree.focusDrillDown(),\r\n    DRILL_UP: (tree, node, $event) => tree.focusDrillUp(),\r\n    NEXT_NODE: (tree, node, $event) => tree.focusNextNode(),\r\n    PREVIOUS_NODE: (tree, node, $event) => tree.focusPreviousNode(),\r\n    MOVE_NODE: (tree, node, $event, { from, to }) => {\r\n        // default action assumes from = node, to = {parent, index}\r\n        if ($event.ctrlKey) {\r\n            tree.copyNode(from, to);\r\n        }\r\n        else {\r\n            tree.moveNode(from, to);\r\n        }\r\n    }\r\n};\r\nconst defaultActionMapping = {\r\n    mouse: {\r\n        click: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n        dblClick: null,\r\n        contextMenu: null,\r\n        expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,\r\n        checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,\r\n        drop: TREE_ACTIONS.MOVE_NODE\r\n    },\r\n    keys: {\r\n        [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n        [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n        [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n        [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n        [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n        [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n    }\r\n};\r\nclass TreeOptions {\r\n    constructor(options = {}) {\r\n        this.options = options;\r\n        this.actionMapping = {\r\n            mouse: {\r\n                click: this.options?.actionMapping?.mouse?.click ?? defaultActionMapping.mouse.click,\r\n                dblClick: this.options?.actionMapping?.mouse?.dblClick ?? defaultActionMapping.mouse.dblClick,\r\n                contextMenu: this.options?.actionMapping?.mouse?.contextMenu ?? defaultActionMapping.mouse.contextMenu,\r\n                expanderClick: this.options?.actionMapping?.mouse?.expanderClick ?? defaultActionMapping.mouse.expanderClick,\r\n                checkboxClick: this.options?.actionMapping?.mouse?.checkboxClick ?? defaultActionMapping.mouse.checkboxClick,\r\n                drop: this.options?.actionMapping?.mouse?.drop ?? defaultActionMapping.mouse.drop,\r\n                dragStart: this.options?.actionMapping?.mouse?.dragStart ?? undefined,\r\n                drag: this.options?.actionMapping?.mouse?.drag ?? undefined,\r\n                dragEnd: this.options?.actionMapping?.mouse?.dragEnd ?? undefined,\r\n                dragOver: this.options?.actionMapping?.mouse?.dragOver ?? undefined,\r\n                dragLeave: this.options?.actionMapping?.mouse?.dragLeave ?? undefined,\r\n                dragEnter: this.options?.actionMapping?.mouse?.dragEnter ?? undefined,\r\n                mouseOver: this.options?.actionMapping?.mouse?.mouseOver ?? undefined,\r\n                mouseOut: this.options?.actionMapping?.mouse?.mouseOut ?? undefined,\r\n            },\r\n            keys: {\r\n                [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n                [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n                [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n                [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n                [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n                [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n            }\r\n        };\r\n        if (this.options?.actionMapping?.keys) {\r\n            this.actionMapping.keys = {\r\n                ...this.actionMapping.keys,\r\n                ...this.options.actionMapping.keys\r\n            };\r\n        }\r\n        if (options.rtl) {\r\n            this.actionMapping.keys[KEYS.RIGHT] = options.actionMapping?.keys[KEYS.RIGHT] || TREE_ACTIONS.DRILL_UP;\r\n            this.actionMapping.keys[KEYS.LEFT] = options.actionMapping?.keys[KEYS.LEFT] || TREE_ACTIONS.DRILL_DOWN;\r\n        }\r\n    }\r\n    get hasChildrenField() { return this.options.hasChildrenField || 'hasChildren'; }\r\n    get childrenField() { return this.options.childrenField || 'children'; }\r\n    get displayField() { return this.options.displayField || 'name'; }\r\n    get idField() { return this.options.idField || 'id'; }\r\n    get isExpandedField() { return this.options.isExpandedField || 'isExpanded'; }\r\n    get getChildren() { return this.options.getChildren; }\r\n    get levelPadding() { return this.options.levelPadding || 0; }\r\n    get useVirtualScroll() { return this.options.useVirtualScroll; }\r\n    get animateExpand() { return this.options.animateExpand; }\r\n    get animateSpeed() { return this.options.animateSpeed || 1; }\r\n    get animateAcceleration() { return this.options.animateAcceleration || 1.2; }\r\n    get scrollOnActivate() { return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate; }\r\n    get rtl() { return !!this.options.rtl; }\r\n    get rootId() { return this.options.rootId; }\r\n    get useCheckbox() { return this.options.useCheckbox; }\r\n    get useTriState() { return this.options.useTriState === undefined ? true : this.options.useTriState; }\r\n    get scrollContainer() { return this.options.scrollContainer; }\r\n    get allowDragoverStyling() { return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling; }\r\n    getNodeClone(node) {\r\n        if (this.options.getNodeClone) {\r\n            return this.options.getNodeClone(node);\r\n        }\r\n        // remove id from clone\r\n        // keeping ie11 compatibility\r\n        const nodeClone = Object.assign({}, node.data);\r\n        if (nodeClone.id) {\r\n            delete nodeClone.id;\r\n        }\r\n        return nodeClone;\r\n    }\r\n    allowDrop(element, to, $event) {\r\n        if (this.options.allowDrop instanceof Function) {\r\n            return this.options.allowDrop(element, to, $event);\r\n        }\r\n        else {\r\n            return this.options.allowDrop === undefined ? true : this.options.allowDrop;\r\n        }\r\n    }\r\n    allowDrag(node) {\r\n        if (this.options.allowDrag instanceof Function) {\r\n            return this.options.allowDrag(node);\r\n        }\r\n        else {\r\n            return this.options.allowDrag;\r\n        }\r\n    }\r\n    nodeClass(node) {\r\n        return this.options.nodeClass ? this.options.nodeClass(node) : '';\r\n    }\r\n    nodeHeight(node) {\r\n        if (node.data.virtual) {\r\n            return 0;\r\n        }\r\n        let nodeHeight = this.options.nodeHeight || 22;\r\n        if (typeof nodeHeight === 'function') {\r\n            nodeHeight = nodeHeight(node);\r\n        }\r\n        // account for drop slots:\r\n        return nodeHeight + (node.index === 0 ? 2 : 1) * this.dropSlotHeight;\r\n    }\r\n    get dropSlotHeight() {\r\n        return typeof this.options.dropSlotHeight === 'number' ? this.options.dropSlotHeight : 2;\r\n    }\r\n}\n\nconst TREE_EVENTS = {\r\n    toggleExpanded: 'toggleExpanded',\r\n    activate: 'activate',\r\n    deactivate: 'deactivate',\r\n    nodeActivate: 'nodeActivate',\r\n    nodeDeactivate: 'nodeDeactivate',\r\n    select: 'select',\r\n    deselect: 'deselect',\r\n    focus: 'focus',\r\n    blur: 'blur',\r\n    initialized: 'initialized',\r\n    updateData: 'updateData',\r\n    moveNode: 'moveNode',\r\n    copyNode: 'copyNode',\r\n    event: 'event',\r\n    loadNodeChildren: 'loadNodeChildren',\r\n    changeFilter: 'changeFilter',\r\n    stateChange: 'stateChange'\r\n};\n\nvar __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata$3 = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nclass TreeNode {\r\n    constructor(data, parent, treeModel, index) {\r\n        this.data = data;\r\n        this.parent = parent;\r\n        this.treeModel = treeModel;\r\n        this.position = 0;\r\n        this.allowDrop = (element, $event) => {\r\n            return this.options.allowDrop(element, { parent: this, index: 0 }, $event);\r\n        };\r\n        this.allowDragoverStyling = () => {\r\n            return this.options.allowDragoverStyling;\r\n        };\r\n        if (this.id === undefined || this.id === null) {\r\n            this.id = uuid();\r\n        } // Make sure there's a unique id without overriding existing ids to work with immutable data structures\r\n        this.index = index;\r\n        if (this.getField('children')) {\r\n            this._initChildren();\r\n        }\r\n        this.autoLoadChildren();\r\n    }\r\n    get isHidden() { return this.treeModel.isHidden(this); }\r\n    ;\r\n    get isExpanded() { return this.treeModel.isExpanded(this); }\r\n    ;\r\n    get isActive() { return this.treeModel.isActive(this); }\r\n    ;\r\n    get isFocused() { return this.treeModel.isNodeFocused(this); }\r\n    ;\r\n    get isSelected() {\r\n        if (this.isSelectable()) {\r\n            return this.treeModel.isSelected(this);\r\n        }\r\n        else {\r\n            return this.children.some((node) => node.isSelected);\r\n        }\r\n    }\r\n    ;\r\n    get isAllSelected() {\r\n        if (this.isSelectable()) {\r\n            return this.treeModel.isSelected(this);\r\n        }\r\n        else {\r\n            return this.children.every((node) => node.isAllSelected);\r\n        }\r\n    }\r\n    ;\r\n    get isPartiallySelected() {\r\n        return this.isSelected && !this.isAllSelected;\r\n    }\r\n    get level() {\r\n        return this.parent ? this.parent.level + 1 : 0;\r\n    }\r\n    get path() {\r\n        return this.parent ? [...this.parent.path, this.id] : [];\r\n    }\r\n    get elementRef() {\r\n        throw `Element Ref is no longer supported since introducing virtual scroll\\n\r\n      You may use a template to obtain a reference to the element`;\r\n    }\r\n    get originalNode() { return this._originalNode; }\r\n    ;\r\n    // helper get functions:\r\n    get hasChildren() {\r\n        return !!(this.getField('hasChildren') || (this.children && this.children.length > 0));\r\n    }\r\n    get isCollapsed() { return !this.isExpanded; }\r\n    get isLeaf() { return !this.hasChildren; }\r\n    get isRoot() { return this.parent.data.virtual; }\r\n    get realParent() { return this.isRoot ? null : this.parent; }\r\n    // proxy functions:\r\n    get options() { return this.treeModel.options; }\r\n    fireEvent(event) { this.treeModel.fireEvent(event); }\r\n    // field accessors:\r\n    get displayField() {\r\n        return this.getField('display');\r\n    }\r\n    get id() {\r\n        return this.getField('id');\r\n    }\r\n    set id(value) {\r\n        this.setField('id', value);\r\n    }\r\n    getField(key) {\r\n        return this.data[this.options[`${key}Field`]];\r\n    }\r\n    setField(key, value) {\r\n        this.data[this.options[`${key}Field`]] = value;\r\n    }\r\n    // traversing:\r\n    _findAdjacentSibling(steps, skipHidden = false) {\r\n        const siblings = this._getParentsChildren(skipHidden);\r\n        const index = siblings.indexOf(this);\r\n        return siblings.length > index + steps ? siblings[index + steps] : null;\r\n    }\r\n    findNextSibling(skipHidden = false) {\r\n        return this._findAdjacentSibling(+1, skipHidden);\r\n    }\r\n    findPreviousSibling(skipHidden = false) {\r\n        return this._findAdjacentSibling(-1, skipHidden);\r\n    }\r\n    getVisibleChildren() {\r\n        return this.visibleChildren;\r\n    }\r\n    get visibleChildren() {\r\n        return (this.children || []).filter((node) => !node.isHidden);\r\n    }\r\n    getFirstChild(skipHidden = false) {\r\n        let children = skipHidden ? this.visibleChildren : this.children;\r\n        return children != null && children.length ? children[0] : null;\r\n    }\r\n    getLastChild(skipHidden = false) {\r\n        let children = skipHidden ? this.visibleChildren : this.children;\r\n        return children != null && children.length ? children[children.length - 1] : null;\r\n    }\r\n    findNextNode(goInside = true, skipHidden = false) {\r\n        return goInside && this.isExpanded && this.getFirstChild(skipHidden) ||\r\n            this.findNextSibling(skipHidden) ||\r\n            this.parent && this.parent.findNextNode(false, skipHidden);\r\n    }\r\n    findPreviousNode(skipHidden = false) {\r\n        let previousSibling = this.findPreviousSibling(skipHidden);\r\n        if (!previousSibling) {\r\n            return this.realParent;\r\n        }\r\n        return previousSibling._getLastOpenDescendant(skipHidden);\r\n    }\r\n    _getLastOpenDescendant(skipHidden = false) {\r\n        const lastChild = this.getLastChild(skipHidden);\r\n        return (this.isCollapsed || !lastChild)\r\n            ? this\r\n            : lastChild._getLastOpenDescendant(skipHidden);\r\n    }\r\n    _getParentsChildren(skipHidden = false) {\r\n        const children = this.parent &&\r\n            (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);\r\n        return children || [];\r\n    }\r\n    getIndexInParent(skipHidden = false) {\r\n        return this._getParentsChildren(skipHidden).indexOf(this);\r\n    }\r\n    isDescendantOf(node) {\r\n        if (this === node)\r\n            return true;\r\n        else\r\n            return this.parent && this.parent.isDescendantOf(node);\r\n    }\r\n    getNodePadding() {\r\n        return this.options.levelPadding * (this.level - 1) + 'px';\r\n    }\r\n    getClass() {\r\n        return [this.options.nodeClass(this), `tree-node-level-${this.level}`].join(' ');\r\n    }\r\n    onDrop($event) {\r\n        this.mouseAction('drop', $event.event, {\r\n            from: $event.element,\r\n            to: { parent: this, index: 0, dropOnNode: true }\r\n        });\r\n    }\r\n    allowDrag() {\r\n        return this.options.allowDrag(this);\r\n    }\r\n    // helper methods:\r\n    loadNodeChildren() {\r\n        if (!this.options.getChildren) {\r\n            return Promise.resolve(); // Not getChildren method - for using redux\r\n        }\r\n        return Promise.resolve(this.options.getChildren(this))\r\n            .then((children) => {\r\n            if (children) {\r\n                this.setField('children', children);\r\n                this._initChildren();\r\n                if (this.options.useTriState && this.treeModel.isSelected(this)) {\r\n                    this.setIsSelected(true);\r\n                }\r\n                this.children.forEach((child) => {\r\n                    if (child.getField('isExpanded') && child.hasChildren) {\r\n                        child.expand();\r\n                    }\r\n                });\r\n            }\r\n        }).then(() => {\r\n            this.fireEvent({\r\n                eventName: TREE_EVENTS.loadNodeChildren,\r\n                node: this\r\n            });\r\n        });\r\n    }\r\n    expand() {\r\n        if (!this.isExpanded) {\r\n            this.toggleExpanded();\r\n        }\r\n        return this;\r\n    }\r\n    collapse() {\r\n        if (this.isExpanded) {\r\n            this.toggleExpanded();\r\n        }\r\n        return this;\r\n    }\r\n    doForAll(fn) {\r\n        Promise.resolve(fn(this)).then(() => {\r\n            if (this.children) {\r\n                this.children.forEach((child) => child.doForAll(fn));\r\n            }\r\n        });\r\n    }\r\n    expandAll() {\r\n        this.doForAll((node) => node.expand());\r\n    }\r\n    collapseAll() {\r\n        this.doForAll((node) => node.collapse());\r\n    }\r\n    ensureVisible() {\r\n        if (this.realParent) {\r\n            this.realParent.expand();\r\n            this.realParent.ensureVisible();\r\n        }\r\n        return this;\r\n    }\r\n    toggleExpanded() {\r\n        this.setIsExpanded(!this.isExpanded);\r\n        return this;\r\n    }\r\n    setIsExpanded(value) {\r\n        if (this.hasChildren) {\r\n            this.treeModel.setExpandedNode(this, value);\r\n        }\r\n        return this;\r\n    }\r\n    ;\r\n    autoLoadChildren() {\r\n        this.handler =\r\n            reaction(() => this.isExpanded, (isExpanded) => {\r\n                if (!this.children && this.hasChildren && isExpanded) {\r\n                    this.loadNodeChildren();\r\n                }\r\n            }, { fireImmediately: true });\r\n    }\r\n    dispose() {\r\n        if (this.children) {\r\n            this.children.forEach((child) => child.dispose());\r\n        }\r\n        if (this.handler) {\r\n            this.handler();\r\n        }\r\n        this.parent = null;\r\n        this.children = null;\r\n    }\r\n    setIsActive(value, multi = false) {\r\n        this.treeModel.setActiveNode(this, value, multi);\r\n        if (value) {\r\n            this.focus(this.options.scrollOnActivate);\r\n        }\r\n        return this;\r\n    }\r\n    isSelectable() {\r\n        return this.isLeaf || !this.children || !this.options.useTriState;\r\n    }\r\n    setIsSelected(value) {\r\n        if (this.isSelectable()) {\r\n            this.treeModel.setSelectedNode(this, value);\r\n        }\r\n        else {\r\n            this.visibleChildren.forEach((child) => child.setIsSelected(value));\r\n        }\r\n        return this;\r\n    }\r\n    toggleSelected() {\r\n        this.setIsSelected(!this.isSelected);\r\n        return this;\r\n    }\r\n    toggleActivated(multi = false) {\r\n        this.setIsActive(!this.isActive, multi);\r\n        return this;\r\n    }\r\n    setActiveAndVisible(multi = false) {\r\n        this.setIsActive(true, multi)\r\n            .ensureVisible();\r\n        setTimeout(this.scrollIntoView.bind(this));\r\n        return this;\r\n    }\r\n    scrollIntoView(force = false) {\r\n        this.treeModel.virtualScroll.scrollIntoView(this, force);\r\n    }\r\n    focus(scroll = true) {\r\n        let previousNode = this.treeModel.getFocusedNode();\r\n        this.treeModel.setFocusedNode(this);\r\n        if (scroll) {\r\n            this.scrollIntoView();\r\n        }\r\n        if (previousNode) {\r\n            this.fireEvent({ eventName: TREE_EVENTS.blur, node: previousNode });\r\n        }\r\n        this.fireEvent({ eventName: TREE_EVENTS.focus, node: this });\r\n        return this;\r\n    }\r\n    blur() {\r\n        let previousNode = this.treeModel.getFocusedNode();\r\n        this.treeModel.setFocusedNode(null);\r\n        if (previousNode) {\r\n            this.fireEvent({ eventName: TREE_EVENTS.blur, node: this });\r\n        }\r\n        return this;\r\n    }\r\n    setIsHidden(value) {\r\n        this.treeModel.setIsHidden(this, value);\r\n    }\r\n    hide() {\r\n        this.setIsHidden(true);\r\n    }\r\n    show() {\r\n        this.setIsHidden(false);\r\n    }\r\n    mouseAction(actionName, $event, data = null) {\r\n        this.treeModel.setFocus(true);\r\n        const actionMapping = this.options.actionMapping.mouse;\r\n        const mouseAction = actionMapping[actionName];\r\n        if (mouseAction) {\r\n            mouseAction(this.treeModel, this, $event, data);\r\n        }\r\n    }\r\n    getSelfHeight() {\r\n        return this.options.nodeHeight(this);\r\n    }\r\n    _initChildren() {\r\n        this.children = this.getField('children')\r\n            .map((c, index) => new TreeNode(c, this, this.treeModel, index));\r\n    }\r\n}\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"isHidden\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"isExpanded\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"isActive\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"isFocused\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"isSelected\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"isAllSelected\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"isPartiallySelected\", null);\r\n__decorate$3([\r\n    observable$1,\r\n    __metadata$3(\"design:type\", Array)\r\n], TreeNode.prototype, \"children\", void 0);\r\n__decorate$3([\r\n    observable$1,\r\n    __metadata$3(\"design:type\", Number)\r\n], TreeNode.prototype, \"index\", void 0);\r\n__decorate$3([\r\n    observable$1,\r\n    __metadata$3(\"design:type\", Object)\r\n], TreeNode.prototype, \"position\", void 0);\r\n__decorate$3([\r\n    observable$1,\r\n    __metadata$3(\"design:type\", Number)\r\n], TreeNode.prototype, \"height\", void 0);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Number),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"level\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Array),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"path\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"visibleChildren\", null);\r\n__decorate$3([\r\n    action$1,\r\n    __metadata$3(\"design:type\", Function),\r\n    __metadata$3(\"design:paramtypes\", [Object]),\r\n    __metadata$3(\"design:returntype\", void 0)\r\n], TreeNode.prototype, \"setIsSelected\", null);\r\n__decorate$3([\r\n    action$1,\r\n    __metadata$3(\"design:type\", Function),\r\n    __metadata$3(\"design:paramtypes\", []),\r\n    __metadata$3(\"design:returntype\", void 0)\r\n], TreeNode.prototype, \"_initChildren\", null);\r\nfunction uuid() {\r\n    return Math.floor(Math.random() * 10000000000000);\r\n}\n\nvar __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata$2 = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nclass TreeModel {\r\n    constructor() {\r\n        this.options = new TreeOptions();\r\n        this.eventNames = Object.keys(TREE_EVENTS);\r\n        this.expandedNodeIds = {};\r\n        this.selectedLeafNodeIds = {};\r\n        this.activeNodeIds = {};\r\n        this.hiddenNodeIds = {};\r\n        this.focusedNodeId = null;\r\n        this.firstUpdate = true;\r\n        this.subscriptions = [];\r\n    }\r\n    // events\r\n    fireEvent(event) {\r\n        event.treeModel = this;\r\n        this.events[event.eventName].emit(event);\r\n        this.events.event.emit(event);\r\n    }\r\n    subscribe(eventName, fn) {\r\n        const subscription = this.events[eventName].subscribe(fn);\r\n        this.subscriptions.push(subscription);\r\n    }\r\n    // getters\r\n    getFocusedNode() {\r\n        return this.focusedNode;\r\n    }\r\n    getActiveNode() {\r\n        return this.activeNodes[0];\r\n    }\r\n    getActiveNodes() {\r\n        return this.activeNodes;\r\n    }\r\n    getVisibleRoots() {\r\n        return this.virtualRoot.visibleChildren;\r\n    }\r\n    getFirstRoot(skipHidden = false) {\r\n        const root = skipHidden ? this.getVisibleRoots() : this.roots;\r\n        return root != null && root.length ? root[0] : null;\r\n    }\r\n    getLastRoot(skipHidden = false) {\r\n        const root = skipHidden ? this.getVisibleRoots() : this.roots;\r\n        return root != null && root.length ? root[root.length - 1] : null;\r\n    }\r\n    get isFocused() {\r\n        return TreeModel.focusedTree === this;\r\n    }\r\n    isNodeFocused(node) {\r\n        return this.focusedNode === node;\r\n    }\r\n    isEmptyTree() {\r\n        return this.roots && this.roots.length === 0;\r\n    }\r\n    get focusedNode() {\r\n        return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;\r\n    }\r\n    get expandedNodes() {\r\n        const nodes = Object.keys(this.expandedNodeIds)\r\n            .filter((id) => this.expandedNodeIds[id])\r\n            .map((id) => this.getNodeById(id));\r\n        return nodes.filter(Boolean);\r\n    }\r\n    get activeNodes() {\r\n        const nodes = Object.keys(this.activeNodeIds)\r\n            .filter((id) => this.activeNodeIds[id])\r\n            .map((id) => this.getNodeById(id));\r\n        return nodes.filter(Boolean);\r\n    }\r\n    get hiddenNodes() {\r\n        const nodes = Object.keys(this.hiddenNodeIds)\r\n            .filter((id) => this.hiddenNodeIds[id])\r\n            .map((id) => this.getNodeById(id));\r\n        return nodes.filter(Boolean);\r\n    }\r\n    get selectedLeafNodes() {\r\n        const nodes = Object.keys(this.selectedLeafNodeIds)\r\n            .filter((id) => this.selectedLeafNodeIds[id])\r\n            .map((id) => this.getNodeById(id));\r\n        return nodes.filter(Boolean);\r\n    }\r\n    // locating nodes\r\n    getNodeByPath(path, startNode = null) {\r\n        if (!path)\r\n            return null;\r\n        startNode = startNode || this.virtualRoot;\r\n        if (path.length === 0)\r\n            return startNode;\r\n        if (!startNode.children)\r\n            return null;\r\n        const childId = path.shift();\r\n        const childNode = startNode.children.find(c => c.id === childId);\r\n        if (!childNode)\r\n            return null;\r\n        return this.getNodeByPath(path, childNode);\r\n    }\r\n    getNodeById(id) {\r\n        const idStr = id.toString();\r\n        return this.getNodeBy((node) => node.id.toString() === idStr);\r\n    }\r\n    getNodeBy(predicate, startNode = null) {\r\n        startNode = startNode || this.virtualRoot;\r\n        if (!startNode.children)\r\n            return null;\r\n        const found = startNode.children.find(predicate);\r\n        if (found) { // found in children\r\n            return found;\r\n        }\r\n        else { // look in children's children\r\n            for (let child of startNode.children) {\r\n                const foundInChildren = this.getNodeBy(predicate, child);\r\n                if (foundInChildren)\r\n                    return foundInChildren;\r\n            }\r\n        }\r\n    }\r\n    isExpanded(node) {\r\n        return this.expandedNodeIds[node.id];\r\n    }\r\n    isHidden(node) {\r\n        return this.hiddenNodeIds[node.id];\r\n    }\r\n    isActive(node) {\r\n        return this.activeNodeIds[node.id];\r\n    }\r\n    isSelected(node) {\r\n        return this.selectedLeafNodeIds[node.id];\r\n    }\r\n    ngOnDestroy() {\r\n        this.dispose();\r\n        this.unsubscribeAll();\r\n    }\r\n    dispose() {\r\n        // Dispose reactions of the replaced nodes\r\n        if (this.virtualRoot) {\r\n            this.virtualRoot.dispose();\r\n        }\r\n    }\r\n    unsubscribeAll() {\r\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n        this.subscriptions = [];\r\n    }\r\n    // actions\r\n    setData({ nodes, options = null, events = null }) {\r\n        if (options) {\r\n            this.options = new TreeOptions(options);\r\n        }\r\n        if (events) {\r\n            this.events = events;\r\n        }\r\n        if (nodes) {\r\n            this.nodes = nodes;\r\n        }\r\n        this.update();\r\n    }\r\n    update() {\r\n        // Rebuild tree:\r\n        let virtualRootConfig = {\r\n            id: this.options.rootId,\r\n            virtual: true,\r\n            [this.options.childrenField]: this.nodes\r\n        };\r\n        this.dispose();\r\n        this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);\r\n        this.roots = this.virtualRoot.children;\r\n        // Fire event:\r\n        if (this.firstUpdate) {\r\n            if (this.roots) {\r\n                this.firstUpdate = false;\r\n                this._calculateExpandedNodes();\r\n            }\r\n        }\r\n        else {\r\n            this.fireEvent({ eventName: TREE_EVENTS.updateData });\r\n        }\r\n    }\r\n    setFocusedNode(node) {\r\n        this.focusedNodeId = node ? node.id : null;\r\n    }\r\n    setFocus(value) {\r\n        TreeModel.focusedTree = value ? this : null;\r\n    }\r\n    doForAll(fn) {\r\n        this.roots.forEach((root) => root.doForAll(fn));\r\n    }\r\n    focusNextNode() {\r\n        let previousNode = this.getFocusedNode();\r\n        let nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);\r\n        if (nextNode)\r\n            nextNode.focus();\r\n    }\r\n    focusPreviousNode() {\r\n        let previousNode = this.getFocusedNode();\r\n        let nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);\r\n        if (nextNode)\r\n            nextNode.focus();\r\n    }\r\n    focusDrillDown() {\r\n        let previousNode = this.getFocusedNode();\r\n        if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {\r\n            previousNode.toggleExpanded();\r\n        }\r\n        else {\r\n            let nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);\r\n            if (nextNode)\r\n                nextNode.focus();\r\n        }\r\n    }\r\n    focusDrillUp() {\r\n        let previousNode = this.getFocusedNode();\r\n        if (!previousNode)\r\n            return;\r\n        if (previousNode.isExpanded) {\r\n            previousNode.toggleExpanded();\r\n        }\r\n        else {\r\n            let nextNode = previousNode.realParent;\r\n            if (nextNode)\r\n                nextNode.focus();\r\n        }\r\n    }\r\n    setActiveNode(node, value, multi = false) {\r\n        if (multi) {\r\n            this._setActiveNodeMulti(node, value);\r\n        }\r\n        else {\r\n            this._setActiveNodeSingle(node, value);\r\n        }\r\n        if (value) {\r\n            node.focus(this.options.scrollOnActivate);\r\n            this.fireEvent({ eventName: TREE_EVENTS.activate, node });\r\n            this.fireEvent({ eventName: TREE_EVENTS.nodeActivate, node }); // For IE11\r\n        }\r\n        else {\r\n            this.fireEvent({ eventName: TREE_EVENTS.deactivate, node });\r\n            this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node }); // For IE11\r\n        }\r\n    }\r\n    setSelectedNode(node, value) {\r\n        this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, { [node.id]: value });\r\n        if (value) {\r\n            node.focus();\r\n            this.fireEvent({ eventName: TREE_EVENTS.select, node });\r\n        }\r\n        else {\r\n            this.fireEvent({ eventName: TREE_EVENTS.deselect, node });\r\n        }\r\n    }\r\n    setExpandedNode(node, value) {\r\n        this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, { [node.id]: value });\r\n        this.fireEvent({ eventName: TREE_EVENTS.toggleExpanded, node, isExpanded: value });\r\n    }\r\n    expandAll() {\r\n        this.roots.forEach((root) => root.expandAll());\r\n    }\r\n    collapseAll() {\r\n        this.roots.forEach((root) => root.collapseAll());\r\n    }\r\n    setIsHidden(node, value) {\r\n        this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, { [node.id]: value });\r\n    }\r\n    setHiddenNodeIds(nodeIds) {\r\n        this.hiddenNodeIds = nodeIds.reduce((hiddenNodeIds, id) => Object.assign(hiddenNodeIds, {\r\n            [id]: true\r\n        }), {});\r\n    }\r\n    performKeyAction(node, $event) {\r\n        const keyAction = this.options.actionMapping.keys[$event.keyCode];\r\n        if (keyAction) {\r\n            $event.preventDefault();\r\n            keyAction(this, node, $event);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    filterNodes(filter, autoShow = true) {\r\n        let filterFn;\r\n        if (!filter) {\r\n            return this.clearFilter();\r\n        }\r\n        // support function and string filter\r\n        if (filter && typeof filter.valueOf() === 'string') {\r\n            filterFn = (node) => node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\r\n        }\r\n        else if (filter && typeof filter === 'function') {\r\n            filterFn = filter;\r\n        }\r\n        else {\r\n            console.error('Don\\'t know what to do with filter', filter);\r\n            console.error('Should be either a string or function');\r\n            return;\r\n        }\r\n        const ids = {};\r\n        this.roots.forEach((node) => this._filterNode(ids, node, filterFn, autoShow));\r\n        this.hiddenNodeIds = ids;\r\n        this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n    }\r\n    clearFilter() {\r\n        this.hiddenNodeIds = {};\r\n        this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n    }\r\n    moveNode(node, to) {\r\n        const fromIndex = node.getIndexInParent();\r\n        const fromParent = node.parent;\r\n        if (!this.canMoveNode(node, to, fromIndex))\r\n            return;\r\n        const fromChildren = fromParent.getField('children');\r\n        // If node doesn't have children - create children array\r\n        if (!to.parent.getField('children')) {\r\n            to.parent.setField('children', []);\r\n        }\r\n        const toChildren = to.parent.getField('children');\r\n        const originalNode = fromChildren.splice(fromIndex, 1)[0];\r\n        // Compensate for index if already removed from parent:\r\n        let toIndex = (fromParent === to.parent && to.index > fromIndex) ? to.index - 1 : to.index;\r\n        toChildren.splice(toIndex, 0, originalNode);\r\n        fromParent.treeModel.update();\r\n        if (to.parent.treeModel !== fromParent.treeModel) {\r\n            to.parent.treeModel.update();\r\n        }\r\n        this.fireEvent({\r\n            eventName: TREE_EVENTS.moveNode,\r\n            node: originalNode,\r\n            to: { parent: to.parent.data, index: toIndex },\r\n            from: { parent: fromParent.data, index: fromIndex }\r\n        });\r\n    }\r\n    copyNode(node, to) {\r\n        const fromIndex = node.getIndexInParent();\r\n        if (!this.canMoveNode(node, to, fromIndex))\r\n            return;\r\n        // If node doesn't have children - create children array\r\n        if (!to.parent.getField('children')) {\r\n            to.parent.setField('children', []);\r\n        }\r\n        const toChildren = to.parent.getField('children');\r\n        const nodeCopy = this.options.getNodeClone(node);\r\n        toChildren.splice(to.index, 0, nodeCopy);\r\n        node.treeModel.update();\r\n        if (to.parent.treeModel !== node.treeModel) {\r\n            to.parent.treeModel.update();\r\n        }\r\n        this.fireEvent({ eventName: TREE_EVENTS.copyNode, node: nodeCopy, to: { parent: to.parent.data, index: to.index } });\r\n    }\r\n    getState() {\r\n        return {\r\n            expandedNodeIds: this.expandedNodeIds,\r\n            selectedLeafNodeIds: this.selectedLeafNodeIds,\r\n            activeNodeIds: this.activeNodeIds,\r\n            hiddenNodeIds: this.hiddenNodeIds,\r\n            focusedNodeId: this.focusedNodeId\r\n        };\r\n    }\r\n    setState(state) {\r\n        if (!state)\r\n            return;\r\n        Object.assign(this, {\r\n            expandedNodeIds: state.expandedNodeIds || {},\r\n            selectedLeafNodeIds: state.selectedLeafNodeIds || {},\r\n            activeNodeIds: state.activeNodeIds || {},\r\n            hiddenNodeIds: state.hiddenNodeIds || {},\r\n            focusedNodeId: state.focusedNodeId\r\n        });\r\n    }\r\n    subscribeToState(fn) {\r\n        autorun(() => fn(this.getState()));\r\n    }\r\n    canMoveNode(node, to, fromIndex = undefined) {\r\n        const fromNodeIndex = fromIndex || node.getIndexInParent();\r\n        // same node:\r\n        if (node.parent === to.parent && fromIndex === to.index) {\r\n            return false;\r\n        }\r\n        return !to.parent.isDescendantOf(node);\r\n    }\r\n    calculateExpandedNodes() {\r\n        this._calculateExpandedNodes();\r\n    }\r\n    // private methods\r\n    _filterNode(ids, node, filterFn, autoShow) {\r\n        // if node passes function then it's visible\r\n        let isVisible = filterFn(node);\r\n        if (node.children) {\r\n            // if one of node's children passes filter then this node is also visible\r\n            node.children.forEach((child) => {\r\n                if (this._filterNode(ids, child, filterFn, autoShow)) {\r\n                    isVisible = true;\r\n                }\r\n            });\r\n        }\r\n        // mark node as hidden\r\n        if (!isVisible) {\r\n            ids[node.id] = true;\r\n        }\r\n        // auto expand parents to make sure the filtered nodes are visible\r\n        if (autoShow && isVisible) {\r\n            node.ensureVisible();\r\n        }\r\n        return isVisible;\r\n    }\r\n    _calculateExpandedNodes(startNode = null) {\r\n        startNode = startNode || this.virtualRoot;\r\n        if (startNode.data[this.options.isExpandedField]) {\r\n            this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, { [startNode.id]: true });\r\n        }\r\n        if (startNode.children) {\r\n            startNode.children.forEach((child) => this._calculateExpandedNodes(child));\r\n        }\r\n    }\r\n    _setActiveNodeSingle(node, value) {\r\n        // Deactivate all other nodes:\r\n        this.activeNodes\r\n            .filter((activeNode) => activeNode !== node)\r\n            .forEach((activeNode) => {\r\n            this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: activeNode });\r\n            this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: activeNode }); // For IE11\r\n        });\r\n        if (value) {\r\n            this.activeNodeIds = { [node.id]: true };\r\n        }\r\n        else {\r\n            this.activeNodeIds = {};\r\n        }\r\n    }\r\n    _setActiveNodeMulti(node, value) {\r\n        this.activeNodeIds = Object.assign({}, this.activeNodeIds, { [node.id]: value });\r\n    }\r\n}\r\nTreeModel.focusedTree = null;\r\n/** @nocollapse */ TreeModel.ɵfac = function TreeModel_Factory(t) { return new (t || TreeModel)(); };\r\n/** @nocollapse */ TreeModel.ɵprov = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjectable({ token: TreeModel, factory: TreeModel.ɵfac });\r\n__decorate$2([\r\n    observable$1,\r\n    __metadata$2(\"design:type\", Array)\r\n], TreeModel.prototype, \"roots\", void 0);\r\n__decorate$2([\r\n    observable$1,\r\n    __metadata$2(\"design:type\", Object)\r\n], TreeModel.prototype, \"expandedNodeIds\", void 0);\r\n__decorate$2([\r\n    observable$1,\r\n    __metadata$2(\"design:type\", Object)\r\n], TreeModel.prototype, \"selectedLeafNodeIds\", void 0);\r\n__decorate$2([\r\n    observable$1,\r\n    __metadata$2(\"design:type\", Object)\r\n], TreeModel.prototype, \"activeNodeIds\", void 0);\r\n__decorate$2([\r\n    observable$1,\r\n    __metadata$2(\"design:type\", Object)\r\n], TreeModel.prototype, \"hiddenNodeIds\", void 0);\r\n__decorate$2([\r\n    observable$1,\r\n    __metadata$2(\"design:type\", Object)\r\n], TreeModel.prototype, \"focusedNodeId\", void 0);\r\n__decorate$2([\r\n    observable$1,\r\n    __metadata$2(\"design:type\", TreeNode)\r\n], TreeModel.prototype, \"virtualRoot\", void 0);\r\n__decorate$2([\r\n    computed$1,\r\n    __metadata$2(\"design:type\", Object),\r\n    __metadata$2(\"design:paramtypes\", [])\r\n], TreeModel.prototype, \"focusedNode\", null);\r\n__decorate$2([\r\n    computed$1,\r\n    __metadata$2(\"design:type\", Object),\r\n    __metadata$2(\"design:paramtypes\", [])\r\n], TreeModel.prototype, \"expandedNodes\", null);\r\n__decorate$2([\r\n    computed$1,\r\n    __metadata$2(\"design:type\", Object),\r\n    __metadata$2(\"design:paramtypes\", [])\r\n], TreeModel.prototype, \"activeNodes\", null);\r\n__decorate$2([\r\n    computed$1,\r\n    __metadata$2(\"design:type\", Object),\r\n    __metadata$2(\"design:paramtypes\", [])\r\n], TreeModel.prototype, \"hiddenNodes\", null);\r\n__decorate$2([\r\n    computed$1,\r\n    __metadata$2(\"design:type\", Object),\r\n    __metadata$2(\"design:paramtypes\", [])\r\n], TreeModel.prototype, \"selectedLeafNodes\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setData\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"update\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setFocusedNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setFocus\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"doForAll\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"focusNextNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"focusPreviousNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"focusDrillDown\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"focusDrillUp\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object, Object, Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setActiveNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setSelectedNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setExpandedNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"expandAll\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"collapseAll\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setIsHidden\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setHiddenNodeIds\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"filterNodes\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"clearFilter\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"moveNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"copyNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setState\", null);\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeModel, [{\r\n        type: Injectable\r\n    }], null, { roots: [], expandedNodeIds: [], selectedLeafNodeIds: [], activeNodeIds: [], hiddenNodeIds: [], focusedNodeId: [], virtualRoot: [], focusedNode: [], expandedNodes: [], activeNodes: [], hiddenNodes: [], selectedLeafNodes: [], setData: [], update: [], setFocusedNode: [], setFocus: [], doForAll: [], focusNextNode: [], focusPreviousNode: [], focusDrillDown: [], focusDrillUp: [], setActiveNode: [], setSelectedNode: [], setExpandedNode: [], expandAll: [], collapseAll: [], setIsHidden: [], setHiddenNodeIds: [], filterNodes: [], clearFilter: [], moveNode: [], copyNode: [], setState: [] }); })();\n\nclass TreeDraggedElement {\r\n    constructor() {\r\n        this._draggedElement = null;\r\n    }\r\n    set(draggedElement) {\r\n        this._draggedElement = draggedElement;\r\n    }\r\n    get() {\r\n        return this._draggedElement;\r\n    }\r\n    isDragging() {\r\n        return !!this.get();\r\n    }\r\n}\r\n/** @nocollapse */ TreeDraggedElement.ɵfac = function TreeDraggedElement_Factory(t) { return new (t || TreeDraggedElement)(); };\r\n/** @nocollapse */ TreeDraggedElement.ɵprov = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjectable({ token: TreeDraggedElement, factory: TreeDraggedElement.ɵfac, providedIn: 'root' });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeDraggedElement, [{\r\n        type: Injectable,\r\n        args: [{\r\n                providedIn: 'root'\r\n            }]\r\n    }], null, null); })();\n\nvar __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata$1 = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nconst Y_OFFSET = 500; // Extra pixels outside the viewport, in each direction, to render nodes in\r\nconst Y_EPSILON = 150; // Minimum pixel change required to recalculate the rendered nodes\r\nclass TreeVirtualScroll {\r\n    constructor(treeModel) {\r\n        this.treeModel = treeModel;\r\n        this.yBlocks = 0;\r\n        this.x = 0;\r\n        this.viewportHeight = null;\r\n        this.viewport = null;\r\n        treeModel.virtualScroll = this;\r\n        this._dispose = [autorun(() => this.fixScroll())];\r\n    }\r\n    get y() {\r\n        return this.yBlocks * Y_EPSILON;\r\n    }\r\n    get totalHeight() {\r\n        return this.treeModel.virtualRoot ? this.treeModel.virtualRoot.height : 0;\r\n    }\r\n    fireEvent(event) {\r\n        this.treeModel.fireEvent(event);\r\n    }\r\n    init() {\r\n        const fn = this.recalcPositions.bind(this);\r\n        fn();\r\n        this._dispose = [\r\n            ...this._dispose,\r\n            reaction(() => this.treeModel.roots, fn),\r\n            reaction(() => this.treeModel.expandedNodeIds, fn),\r\n            reaction(() => this.treeModel.hiddenNodeIds, fn)\r\n        ];\r\n        this.treeModel.subscribe(TREE_EVENTS.loadNodeChildren, fn);\r\n    }\r\n    isEnabled() {\r\n        return this.treeModel.options.useVirtualScroll;\r\n    }\r\n    _setYBlocks(value) {\r\n        this.yBlocks = value;\r\n    }\r\n    recalcPositions() {\r\n        this.treeModel.virtualRoot.height = this._getPositionAfter(this.treeModel.getVisibleRoots(), 0);\r\n    }\r\n    _getPositionAfter(nodes, startPos) {\r\n        let position = startPos;\r\n        nodes.forEach((node) => {\r\n            node.position = position;\r\n            position = this._getPositionAfterNode(node, position);\r\n        });\r\n        return position;\r\n    }\r\n    _getPositionAfterNode(node, startPos) {\r\n        let position = node.getSelfHeight() + startPos;\r\n        if (node.children && node.isExpanded) { // TBD: consider loading component as well\r\n            position = this._getPositionAfter(node.visibleChildren, position);\r\n        }\r\n        node.height = position - startPos;\r\n        return position;\r\n    }\r\n    clear() {\r\n        this._dispose.forEach((d) => d());\r\n    }\r\n    setViewport(viewport) {\r\n        Object.assign(this, {\r\n            viewport,\r\n            x: viewport.scrollLeft,\r\n            yBlocks: Math.round(viewport.scrollTop / Y_EPSILON),\r\n            viewportHeight: viewport.getBoundingClientRect ? viewport.getBoundingClientRect().height : 0\r\n        });\r\n    }\r\n    scrollIntoView(node, force, scrollToMiddle = true) {\r\n        if (node.options.scrollContainer) {\r\n            const scrollContainer = node.options.scrollContainer;\r\n            const scrollContainerHeight = scrollContainer.getBoundingClientRect().height;\r\n            const scrollContainerTop = scrollContainer.getBoundingClientRect().top;\r\n            const nodeTop = this.viewport.getBoundingClientRect().top + node.position - scrollContainerTop;\r\n            if (force || // force scroll to node\r\n                nodeTop < scrollContainer.scrollTop || // node is above scroll container\r\n                nodeTop + node.getSelfHeight() > scrollContainer.scrollTop + scrollContainerHeight) { // node is below container\r\n                scrollContainer.scrollTop = scrollToMiddle ?\r\n                    nodeTop - scrollContainerHeight / 2 : // scroll to middle\r\n                    nodeTop; // scroll to start\r\n            }\r\n        }\r\n        else {\r\n            if (force || // force scroll to node\r\n                node.position < this.y || // node is above viewport\r\n                node.position + node.getSelfHeight() > this.y + this.viewportHeight) { // node is below viewport\r\n                if (this.viewport) {\r\n                    this.viewport.scrollTop = scrollToMiddle ?\r\n                        node.position - this.viewportHeight / 2 : // scroll to middle\r\n                        node.position; // scroll to start\r\n                    this._setYBlocks(Math.floor(this.viewport.scrollTop / Y_EPSILON));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getViewportNodes(nodes) {\r\n        if (!nodes)\r\n            return [];\r\n        const visibleNodes = nodes.filter((node) => !node.isHidden);\r\n        if (!this.isEnabled())\r\n            return visibleNodes;\r\n        if (!this.viewportHeight || !visibleNodes.length)\r\n            return [];\r\n        // When loading children async this method is called before their height and position is calculated.\r\n        // In that case firstIndex === 0 and lastIndex === visibleNodes.length - 1 (e.g. 1000),\r\n        // which means that it loops through every visibleNodes item and push them into viewportNodes array.\r\n        // We can prevent nodes from being pushed to the array and wait for the appropriate calculations to take place\r\n        const lastVisibleNode = visibleNodes.slice(-1)[0];\r\n        if (!lastVisibleNode.height && lastVisibleNode.position === 0)\r\n            return [];\r\n        // Search for first node in the viewport using binary search\r\n        // Look for first node that starts after the beginning of the viewport (with buffer)\r\n        // Or that ends after the beginning of the viewport\r\n        const firstIndex = binarySearch(visibleNodes, (node) => {\r\n            return (node.position + Y_OFFSET > this.y) ||\r\n                (node.position + node.height > this.y);\r\n        });\r\n        // Search for last node in the viewport using binary search\r\n        // Look for first node that starts after the end of the viewport (with buffer)\r\n        const lastIndex = binarySearch(visibleNodes, (node) => {\r\n            return node.position - Y_OFFSET > this.y + this.viewportHeight;\r\n        }, firstIndex);\r\n        const viewportNodes = [];\r\n        for (let i = firstIndex; i <= lastIndex; i++) {\r\n            viewportNodes.push(visibleNodes[i]);\r\n        }\r\n        return viewportNodes;\r\n    }\r\n    fixScroll() {\r\n        const maxY = Math.max(0, this.totalHeight - this.viewportHeight);\r\n        if (this.y < 0)\r\n            this._setYBlocks(0);\r\n        if (this.y > maxY)\r\n            this._setYBlocks(maxY / Y_EPSILON);\r\n    }\r\n}\r\n/** @nocollapse */ TreeVirtualScroll.ɵfac = function TreeVirtualScroll_Factory(t) { return new (t || TreeVirtualScroll)(i0.ɵɵinject(TreeModel)); };\r\n/** @nocollapse */ TreeVirtualScroll.ɵprov = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjectable({ token: TreeVirtualScroll, factory: TreeVirtualScroll.ɵfac });\r\n__decorate$1([\r\n    observable$1,\r\n    __metadata$1(\"design:type\", Object)\r\n], TreeVirtualScroll.prototype, \"yBlocks\", void 0);\r\n__decorate$1([\r\n    observable$1,\r\n    __metadata$1(\"design:type\", Object)\r\n], TreeVirtualScroll.prototype, \"x\", void 0);\r\n__decorate$1([\r\n    observable$1,\r\n    __metadata$1(\"design:type\", Object)\r\n], TreeVirtualScroll.prototype, \"viewportHeight\", void 0);\r\n__decorate$1([\r\n    computed$1,\r\n    __metadata$1(\"design:type\", Object),\r\n    __metadata$1(\"design:paramtypes\", [])\r\n], TreeVirtualScroll.prototype, \"y\", null);\r\n__decorate$1([\r\n    computed$1,\r\n    __metadata$1(\"design:type\", Object),\r\n    __metadata$1(\"design:paramtypes\", [])\r\n], TreeVirtualScroll.prototype, \"totalHeight\", null);\r\n__decorate$1([\r\n    action$1,\r\n    __metadata$1(\"design:type\", Function),\r\n    __metadata$1(\"design:paramtypes\", [Object]),\r\n    __metadata$1(\"design:returntype\", void 0)\r\n], TreeVirtualScroll.prototype, \"_setYBlocks\", null);\r\n__decorate$1([\r\n    action$1,\r\n    __metadata$1(\"design:type\", Function),\r\n    __metadata$1(\"design:paramtypes\", []),\r\n    __metadata$1(\"design:returntype\", void 0)\r\n], TreeVirtualScroll.prototype, \"recalcPositions\", null);\r\n__decorate$1([\r\n    action$1,\r\n    __metadata$1(\"design:type\", Function),\r\n    __metadata$1(\"design:paramtypes\", [Object]),\r\n    __metadata$1(\"design:returntype\", void 0)\r\n], TreeVirtualScroll.prototype, \"setViewport\", null);\r\n__decorate$1([\r\n    action$1,\r\n    __metadata$1(\"design:type\", Function),\r\n    __metadata$1(\"design:paramtypes\", [Object, Object, Object]),\r\n    __metadata$1(\"design:returntype\", void 0)\r\n], TreeVirtualScroll.prototype, \"scrollIntoView\", null);\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeVirtualScroll, [{\r\n        type: Injectable\r\n    }], function () { return [{ type: TreeModel }]; }, { yBlocks: [], x: [], viewportHeight: [], y: [], totalHeight: [], _setYBlocks: [], recalcPositions: [], setViewport: [], scrollIntoView: [] }); })();\r\nfunction binarySearch(nodes, condition, firstIndex = 0) {\r\n    let index = firstIndex;\r\n    let toIndex = nodes.length - 1;\r\n    while (index !== toIndex) {\r\n        let midIndex = Math.floor((index + toIndex) / 2);\r\n        if (condition(nodes[midIndex])) {\r\n            toIndex = midIndex;\r\n        }\r\n        else {\r\n            if (index === midIndex)\r\n                index = toIndex;\r\n            else\r\n                index = midIndex;\r\n        }\r\n    }\r\n    return index;\r\n}\n\nfunction LoadingComponent_span_0_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"span\");\r\n    i0.ɵɵtext(1, \"loading...\");\r\n    i0.ɵɵelementEnd();\r\n} }\r\nconst _c0$9 = function (a0) { return { $implicit: a0 }; };\r\nclass LoadingComponent {\r\n}\r\n/** @nocollapse */ LoadingComponent.ɵfac = function LoadingComponent_Factory(t) { return new (t || LoadingComponent)(); };\r\n/** @nocollapse */ LoadingComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: LoadingComponent, selectors: [[\"tree-loading-component\"]], inputs: { template: \"template\", node: \"node\" }, decls: 2, vars: 5, consts: [[4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]], template: function LoadingComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵtemplate(0, LoadingComponent_span_0_Template, 2, 0, \"span\", 0);\r\n        i0.ɵɵelementContainer(1, 1);\r\n    } if (rf & 2) {\r\n        i0.ɵɵproperty(\"ngIf\", !ctx.template);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(3, _c0$9, ctx.node));\r\n    } }, dependencies: [i1.NgIf, i1.NgTemplateOutlet], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoadingComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                encapsulation: ViewEncapsulation.None,\r\n                selector: 'tree-loading-component',\r\n                template: `\r\n    <span *ngIf=\"!template\">loading...</span>\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"template\"\r\n      [ngTemplateOutletContext]=\"{ $implicit: node }\"\r\n    >\r\n    </ng-container>\r\n  `\r\n            }]\r\n    }], null, { template: [{\r\n            type: Input\r\n        }], node: [{\r\n            type: Input\r\n        }] }); })();\n\nfunction TreeViewportComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementContainerStart(0);\r\n    i0.ɵɵelementStart(1, \"div\");\r\n    i0.ɵɵprojection(2);\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵelementContainerEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = i0.ɵɵnextContext();\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵstyleProp(\"height\", ctx_r0.getTotalHeight());\r\n} }\r\nconst _c0$8 = function () { return { dontDetach: true }; };\r\nconst _c1$2 = [\"*\"];\r\nclass TreeViewportComponent {\r\n    constructor(elementRef, virtualScroll) {\r\n        this.elementRef = elementRef;\r\n        this.virtualScroll = virtualScroll;\r\n        this.setViewport = this.throttle(() => {\r\n            this.virtualScroll.setViewport(this.elementRef.nativeElement);\r\n        }, 17);\r\n        this.scrollEventHandler = this.setViewport.bind(this);\r\n    }\r\n    ngOnInit() {\r\n        this.virtualScroll.init();\r\n    }\r\n    ngAfterViewInit() {\r\n        setTimeout(() => {\r\n            this.setViewport();\r\n            this.virtualScroll.fireEvent({ eventName: TREE_EVENTS.initialized });\r\n        });\r\n        let el = this.elementRef.nativeElement;\r\n        el.addEventListener('scroll', this.scrollEventHandler);\r\n    }\r\n    ngOnDestroy() {\r\n        this.virtualScroll.clear();\r\n        let el = this.elementRef.nativeElement;\r\n        el.removeEventListener('scroll', this.scrollEventHandler);\r\n    }\r\n    getTotalHeight() {\r\n        return ((this.virtualScroll.isEnabled() &&\r\n            this.virtualScroll.totalHeight + 'px') ||\r\n            'auto');\r\n    }\r\n    throttle(func, timeFrame) {\r\n        let lastTime = 0;\r\n        return function () {\r\n            let now = Date.now();\r\n            if (now - lastTime >= timeFrame) {\r\n                func();\r\n                lastTime = now;\r\n            }\r\n        };\r\n    }\r\n}\r\n/** @nocollapse */ TreeViewportComponent.ɵfac = function TreeViewportComponent_Factory(t) { return new (t || TreeViewportComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(TreeVirtualScroll)); };\r\n/** @nocollapse */ TreeViewportComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeViewportComponent, selectors: [[\"tree-viewport\"]], features: [i0.ɵɵProvidersFeature([TreeVirtualScroll])], ngContentSelectors: _c1$2, decls: 1, vars: 2, consts: [[4, \"treeMobxAutorun\"]], template: function TreeViewportComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵprojectionDef();\r\n        i0.ɵɵtemplate(0, TreeViewportComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\r\n    } if (rf & 2) {\r\n        i0.ɵɵproperty(\"treeMobxAutorun\", i0.ɵɵpureFunction0(1, _c0$8));\r\n    } }, dependencies: [TreeMobxAutorunDirective], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeViewportComponent, [{\r\n        type: Component,\r\n        args: [{ selector: 'tree-viewport', providers: [TreeVirtualScroll], template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.height]=\"getTotalHeight()\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </ng-container>\r\n  ` }]\r\n    }], function () { return [{ type: i0.ElementRef }, { type: TreeVirtualScroll }]; }, null); })();\n\nconst DRAG_OVER_CLASS$1 = 'is-dragging-over';\r\nconst DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';\r\nclass TreeDropDirective {\r\n    constructor(el, renderer, treeDraggedElement, ngZone) {\r\n        this.el = el;\r\n        this.renderer = renderer;\r\n        this.treeDraggedElement = treeDraggedElement;\r\n        this.ngZone = ngZone;\r\n        this.allowDragoverStyling = true;\r\n        this.onDropCallback = new EventEmitter();\r\n        this.onDragOverCallback = new EventEmitter();\r\n        this.onDragLeaveCallback = new EventEmitter();\r\n        this.onDragEnterCallback = new EventEmitter();\r\n        this._allowDrop = (element, $event) => true;\r\n        this.dragOverEventHandler = this.onDragOver.bind(this);\r\n        this.dragEnterEventHandler = this.onDragEnter.bind(this);\r\n        this.dragLeaveEventHandler = this.onDragLeave.bind(this);\r\n    }\r\n    set treeAllowDrop(allowDrop) {\r\n        if (allowDrop instanceof Function) {\r\n            this._allowDrop = allowDrop;\r\n        }\r\n        else\r\n            this._allowDrop = (element, $event) => allowDrop;\r\n    }\r\n    allowDrop($event) {\r\n        return this._allowDrop(this.treeDraggedElement.get(), $event);\r\n    }\r\n    ngAfterViewInit() {\r\n        let el = this.el.nativeElement;\r\n        this.ngZone.runOutsideAngular(() => {\r\n            el.addEventListener('dragover', this.dragOverEventHandler);\r\n            el.addEventListener('dragenter', this.dragEnterEventHandler);\r\n            el.addEventListener('dragleave', this.dragLeaveEventHandler);\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        let el = this.el.nativeElement;\r\n        el.removeEventListener('dragover', this.dragOverEventHandler);\r\n        el.removeEventListener('dragenter', this.dragEnterEventHandler);\r\n        el.removeEventListener('dragleave', this.dragLeaveEventHandler);\r\n    }\r\n    onDragOver($event) {\r\n        if (!this.allowDrop($event)) {\r\n            if (this.allowDragoverStyling) {\r\n                return this.addDisabledClass();\r\n            }\r\n            return;\r\n        }\r\n        this.onDragOverCallback.emit({ event: $event, element: this.treeDraggedElement.get() });\r\n        $event.preventDefault();\r\n        if (this.allowDragoverStyling) {\r\n            this.addClass();\r\n        }\r\n    }\r\n    onDragEnter($event) {\r\n        if (!this.allowDrop($event))\r\n            return;\r\n        $event.preventDefault();\r\n        this.onDragEnterCallback.emit({ event: $event, element: this.treeDraggedElement.get() });\r\n    }\r\n    onDragLeave($event) {\r\n        if (!this.allowDrop($event)) {\r\n            if (this.allowDragoverStyling) {\r\n                return this.removeDisabledClass();\r\n            }\r\n            return;\r\n        }\r\n        this.onDragLeaveCallback.emit({ event: $event, element: this.treeDraggedElement.get() });\r\n        if (this.allowDragoverStyling) {\r\n            this.removeClass();\r\n        }\r\n    }\r\n    onDrop($event) {\r\n        if (!this.allowDrop($event))\r\n            return;\r\n        $event.preventDefault();\r\n        this.onDropCallback.emit({ event: $event, element: this.treeDraggedElement.get() });\r\n        if (this.allowDragoverStyling) {\r\n            this.removeClass();\r\n        }\r\n        this.treeDraggedElement.set(null);\r\n    }\r\n    addClass() {\r\n        this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS$1);\r\n    }\r\n    removeClass() {\r\n        this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS$1);\r\n    }\r\n    addDisabledClass() {\r\n        this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n    }\r\n    removeDisabledClass() {\r\n        this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n    }\r\n}\r\n/** @nocollapse */ TreeDropDirective.ɵfac = function TreeDropDirective_Factory(t) { return new (t || TreeDropDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(TreeDraggedElement), i0.ɵɵdirectiveInject(i0.NgZone)); };\r\n/** @nocollapse */ TreeDropDirective.ɵdir = /** @pureOrBreakMyCode */ i0.ɵɵdefineDirective({ type: TreeDropDirective, selectors: [[\"\", \"treeDrop\", \"\"]], hostBindings: function TreeDropDirective_HostBindings(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵlistener(\"drop\", function TreeDropDirective_drop_HostBindingHandler($event) { return ctx.onDrop($event); });\r\n    } }, inputs: { allowDragoverStyling: \"allowDragoverStyling\", treeAllowDrop: \"treeAllowDrop\" }, outputs: { onDropCallback: \"treeDrop\", onDragOverCallback: \"treeDropDragOver\", onDragLeaveCallback: \"treeDropDragLeave\", onDragEnterCallback: \"treeDropDragEnter\" } });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeDropDirective, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[treeDrop]'\r\n            }]\r\n    }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: TreeDraggedElement }, { type: i0.NgZone }]; }, { allowDragoverStyling: [{\r\n            type: Input\r\n        }], onDropCallback: [{\r\n            type: Output,\r\n            args: ['treeDrop']\r\n        }], onDragOverCallback: [{\r\n            type: Output,\r\n            args: ['treeDropDragOver']\r\n        }], onDragLeaveCallback: [{\r\n            type: Output,\r\n            args: ['treeDropDragLeave']\r\n        }], onDragEnterCallback: [{\r\n            type: Output,\r\n            args: ['treeDropDragEnter']\r\n        }], treeAllowDrop: [{\r\n            type: Input\r\n        }], onDrop: [{\r\n            type: HostListener,\r\n            args: ['drop', ['$event']]\r\n        }] }); })();\n\nclass TreeNodeDropSlot {\r\n    onDrop($event) {\r\n        this.node.mouseAction('drop', $event.event, {\r\n            from: $event.element,\r\n            to: { parent: this.node, index: this.dropIndex }\r\n        });\r\n    }\r\n    allowDrop(element, $event) {\r\n        return this.node.options.allowDrop(element, { parent: this.node, index: this.dropIndex }, $event);\r\n    }\r\n}\r\n/** @nocollapse */ TreeNodeDropSlot.ɵfac = function TreeNodeDropSlot_Factory(t) { return new (t || TreeNodeDropSlot)(); };\r\n/** @nocollapse */ TreeNodeDropSlot.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeDropSlot, selectors: [[\"TreeNodeDropSlot\"], [\"tree-node-drop-slot\"]], inputs: { node: \"node\", dropIndex: \"dropIndex\" }, decls: 1, vars: 2, consts: [[1, \"node-drop-slot\", 3, \"treeAllowDrop\", \"allowDragoverStyling\", \"treeDrop\"]], template: function TreeNodeDropSlot_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"div\", 0);\r\n        i0.ɵɵlistener(\"treeDrop\", function TreeNodeDropSlot_Template_div_treeDrop_0_listener($event) { return ctx.onDrop($event); });\r\n        i0.ɵɵelementEnd();\r\n    } if (rf & 2) {\r\n        i0.ɵɵproperty(\"treeAllowDrop\", ctx.allowDrop.bind(ctx))(\"allowDragoverStyling\", true);\r\n    } }, dependencies: [TreeDropDirective], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeDropSlot, [{\r\n        type: Component,\r\n        args: [{ selector: 'TreeNodeDropSlot, tree-node-drop-slot', encapsulation: ViewEncapsulation.None, template: `\r\n    <div\r\n      class=\"node-drop-slot\"\r\n      (treeDrop)=\"onDrop($event)\"\r\n      [treeAllowDrop]=\"allowDrop.bind(this)\"\r\n      [allowDragoverStyling]=\"true\">\r\n    </div>\r\n  ` }]\r\n    }], null, { node: [{\r\n            type: Input\r\n        }], dropIndex: [{\r\n            type: Input\r\n        }] }); })();\n\n// Re-export mobx operators to be able to use inside components with AOT:\r\nfunction actionInternal(...args) {\r\n    return action$1(...args);\r\n}\r\nconst action = Object.assign(actionInternal, action$1);\r\nfunction computedInternal(...args) {\r\n    return computed$1(...args);\r\n}\r\nconst computed = Object.assign(computedInternal, computed$1);\r\nfunction observableInternal(...args) {\r\n    return observable$1(...args);\r\n}\r\nconst observable = Object.assign(observableInternal, observable$1);\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\r\n};\r\nfunction TreeNodeCollectionComponent_ng_container_0_tree_node_2_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelement(0, \"tree-node\", 2);\r\n} if (rf & 2) {\r\n    const node_r2 = ctx.$implicit;\r\n    const i_r3 = ctx.index;\r\n    const ctx_r1 = i0.ɵɵnextContext(2);\r\n    i0.ɵɵproperty(\"node\", node_r2)(\"index\", i_r3)(\"templates\", ctx_r1.templates);\r\n} }\r\nfunction TreeNodeCollectionComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementContainerStart(0);\r\n    i0.ɵɵelementStart(1, \"div\");\r\n    i0.ɵɵtemplate(2, TreeNodeCollectionComponent_ng_container_0_tree_node_2_Template, 1, 3, \"tree-node\", 1);\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵelementContainerEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = i0.ɵɵnextContext();\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵstyleProp(\"margin-top\", ctx_r0.marginTop);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.viewportNodes)(\"ngForTrackBy\", ctx_r0.trackNode);\r\n} }\r\nconst _c0$7 = function () { return { dontDetach: true }; };\r\nclass TreeNodeCollectionComponent {\r\n    constructor() {\r\n        this._dispose = [];\r\n    }\r\n    get nodes() {\r\n        return this._nodes;\r\n    }\r\n    set nodes(nodes) {\r\n        this.setNodes(nodes);\r\n    }\r\n    get marginTop() {\r\n        const firstNode = this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];\r\n        const relativePosition = firstNode && firstNode.parent\r\n            ? firstNode.position -\r\n                firstNode.parent.position -\r\n                firstNode.parent.getSelfHeight()\r\n            : 0;\r\n        return `${relativePosition}px`;\r\n    }\r\n    setNodes(nodes) {\r\n        this._nodes = nodes;\r\n    }\r\n    ngOnInit() {\r\n        this.virtualScroll = this.treeModel.virtualScroll;\r\n        this._dispose = [\r\n            // return node indexes so we can compare structurally,\r\n            reaction(() => {\r\n                return this.virtualScroll\r\n                    .getViewportNodes(this.nodes)\r\n                    .map(n => n.index);\r\n            }, nodeIndexes => {\r\n                this.viewportNodes = nodeIndexes.map(i => this.nodes[i]);\r\n            }, { compareStructural: true, fireImmediately: true }),\r\n            reaction(() => this.nodes, nodes => {\r\n                this.viewportNodes = this.virtualScroll.getViewportNodes(nodes);\r\n            })\r\n        ];\r\n    }\r\n    ngOnDestroy() {\r\n        this._dispose.forEach(d => d());\r\n    }\r\n    trackNode(index, node) {\r\n        return node.id;\r\n    }\r\n}\r\n/** @nocollapse */ TreeNodeCollectionComponent.ɵfac = function TreeNodeCollectionComponent_Factory(t) { return new (t || TreeNodeCollectionComponent)(); };\r\n/** @nocollapse */ TreeNodeCollectionComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeCollectionComponent, selectors: [[\"tree-node-collection\"]], inputs: { nodes: \"nodes\", treeModel: \"treeModel\", templates: \"templates\" }, decls: 1, vars: 2, consts: [[4, \"treeMobxAutorun\"], [3, \"node\", \"index\", \"templates\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"node\", \"index\", \"templates\"]], template: function TreeNodeCollectionComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵtemplate(0, TreeNodeCollectionComponent_ng_container_0_Template, 3, 4, \"ng-container\", 0);\r\n    } if (rf & 2) {\r\n        i0.ɵɵproperty(\"treeMobxAutorun\", i0.ɵɵpureFunction0(1, _c0$7));\r\n    } }, encapsulation: 2 });\r\n__decorate([\r\n    observable,\r\n    __metadata(\"design:type\", Object)\r\n], TreeNodeCollectionComponent.prototype, \"_nodes\", void 0);\r\n__decorate([\r\n    observable,\r\n    __metadata(\"design:type\", Array)\r\n], TreeNodeCollectionComponent.prototype, \"viewportNodes\", void 0);\r\n__decorate([\r\n    computed,\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [])\r\n], TreeNodeCollectionComponent.prototype, \"marginTop\", null);\r\n__decorate([\r\n    action,\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], TreeNodeCollectionComponent.prototype, \"setNodes\", null);\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeCollectionComponent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'tree-node-collection',\r\n                encapsulation: ViewEncapsulation.None,\r\n                template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.margin-top]=\"marginTop\">\r\n        <tree-node\r\n          *ngFor=\"let node of viewportNodes; let i = index; trackBy: trackNode\"\r\n          [node]=\"node\"\r\n          [index]=\"i\"\r\n          [templates]=\"templates\"\r\n        >\r\n        </tree-node>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n            }]\r\n    }], null, { nodes: [{\r\n            type: Input\r\n        }], treeModel: [{\r\n            type: Input\r\n        }], _nodes: [], templates: [{\r\n            type: Input\r\n        }], viewportNodes: [], marginTop: [], setNodes: [] }); })();\n\nconst _c0$6 = [\"loadingTemplate\"];\r\nconst _c1$1 = [\"treeNodeTemplate\"];\r\nconst _c2 = [\"treeNodeWrapperTemplate\"];\r\nconst _c3 = [\"treeNodeFullTemplate\"];\r\nconst _c4 = [\"viewport\"];\r\nconst _c5 = function (a0, a1, a2, a3) { return { loadingTemplate: a0, treeNodeTemplate: a1, treeNodeWrapperTemplate: a2, treeNodeFullTemplate: a3 }; };\r\nfunction TreeComponent_tree_node_collection_3_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelement(0, \"tree-node-collection\", 4);\r\n} if (rf & 2) {\r\n    const ctx_r1 = i0.ɵɵnextContext();\r\n    i0.ɵɵproperty(\"nodes\", ctx_r1.treeModel.roots)(\"treeModel\", ctx_r1.treeModel)(\"templates\", i0.ɵɵpureFunction4(3, _c5, ctx_r1.loadingTemplate, ctx_r1.treeNodeTemplate, ctx_r1.treeNodeWrapperTemplate, ctx_r1.treeNodeFullTemplate));\r\n} }\r\nfunction TreeComponent_tree_node_drop_slot_4_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelement(0, \"tree-node-drop-slot\", 5);\r\n} if (rf & 2) {\r\n    const ctx_r2 = i0.ɵɵnextContext();\r\n    i0.ɵɵproperty(\"dropIndex\", 0)(\"node\", ctx_r2.treeModel.virtualRoot);\r\n} }\r\nclass TreeComponent {\r\n    constructor(treeModel, treeDraggedElement) {\r\n        this.treeModel = treeModel;\r\n        this.treeDraggedElement = treeDraggedElement;\r\n        treeModel.eventNames.forEach((name) => this[name] = new EventEmitter());\r\n        treeModel.subscribeToState((state) => this.stateChange.emit(state));\r\n    }\r\n    // Will be handled in ngOnChanges\r\n    set nodes(nodes) {\r\n    }\r\n    ;\r\n    set options(options) {\r\n    }\r\n    ;\r\n    set focused(value) {\r\n        this.treeModel.setFocus(value);\r\n    }\r\n    set state(state) {\r\n        this.treeModel.setState(state);\r\n    }\r\n    onKeydown($event) {\r\n        if (!this.treeModel.isFocused)\r\n            return;\r\n        if (['input', 'textarea'].includes(document.activeElement.tagName.toLowerCase()))\r\n            return;\r\n        const focusedNode = this.treeModel.getFocusedNode();\r\n        this.treeModel.performKeyAction(focusedNode, $event);\r\n    }\r\n    onMousedown($event) {\r\n        function isOutsideClick(startElement, nodeName) {\r\n            return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);\r\n        }\r\n        if (isOutsideClick($event.target, 'tree-root')) {\r\n            this.treeModel.setFocus(false);\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.options || changes.nodes) {\r\n            this.treeModel.setData({\r\n                options: changes.options && changes.options.currentValue,\r\n                nodes: changes.nodes && changes.nodes.currentValue,\r\n                events: this.pick(this, this.treeModel.eventNames)\r\n            });\r\n        }\r\n    }\r\n    sizeChanged() {\r\n        this.viewportComponent.setViewport();\r\n    }\r\n    pick(object, keys) {\r\n        return keys.reduce((obj, key) => {\r\n            if (object && object.hasOwnProperty(key)) {\r\n                obj[key] = object[key];\r\n            }\r\n            return obj;\r\n        }, {});\r\n    }\r\n}\r\n/** @nocollapse */ TreeComponent.ɵfac = function TreeComponent_Factory(t) { return new (t || TreeComponent)(i0.ɵɵdirectiveInject(TreeModel), i0.ɵɵdirectiveInject(TreeDraggedElement)); };\r\n/** @nocollapse */ TreeComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeComponent, selectors: [[\"Tree\"], [\"tree-root\"]], contentQueries: function TreeComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\r\n        i0.ɵɵcontentQuery(dirIndex, _c0$6, 5);\r\n        i0.ɵɵcontentQuery(dirIndex, _c1$1, 5);\r\n        i0.ɵɵcontentQuery(dirIndex, _c2, 5);\r\n        i0.ɵɵcontentQuery(dirIndex, _c3, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.loadingTemplate = _t.first);\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeNodeTemplate = _t.first);\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeNodeWrapperTemplate = _t.first);\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeNodeFullTemplate = _t.first);\r\n    } }, viewQuery: function TreeComponent_Query(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵviewQuery(_c4, 5);\r\n    } if (rf & 2) {\r\n        let _t;\r\n        i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewportComponent = _t.first);\r\n    } }, hostBindings: function TreeComponent_HostBindings(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵlistener(\"keydown\", function TreeComponent_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); }, false, i0.ɵɵresolveBody)(\"mousedown\", function TreeComponent_mousedown_HostBindingHandler($event) { return ctx.onMousedown($event); }, false, i0.ɵɵresolveBody);\r\n    } }, inputs: { nodes: \"nodes\", options: \"options\", focused: \"focused\", state: \"state\" }, outputs: { toggleExpanded: \"toggleExpanded\", activate: \"activate\", deactivate: \"deactivate\", nodeActivate: \"nodeActivate\", nodeDeactivate: \"nodeDeactivate\", select: \"select\", deselect: \"deselect\", focus: \"focus\", blur: \"blur\", updateData: \"updateData\", initialized: \"initialized\", moveNode: \"moveNode\", copyNode: \"copyNode\", loadNodeChildren: \"loadNodeChildren\", changeFilter: \"changeFilter\", event: \"event\", stateChange: \"stateChange\" }, features: [i0.ɵɵProvidersFeature([TreeModel]), i0.ɵɵNgOnChangesFeature], decls: 5, vars: 6, consts: [[\"viewport\", \"\"], [1, \"angular-tree-component\"], [3, \"nodes\", \"treeModel\", \"templates\", 4, \"ngIf\"], [\"class\", \"empty-tree-drop-slot\", 3, \"dropIndex\", \"node\", 4, \"ngIf\"], [3, \"nodes\", \"treeModel\", \"templates\"], [1, \"empty-tree-drop-slot\", 3, \"dropIndex\", \"node\"]], template: function TreeComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"tree-viewport\", null, 0)(2, \"div\", 1);\r\n        i0.ɵɵtemplate(3, TreeComponent_tree_node_collection_3_Template, 1, 8, \"tree-node-collection\", 2);\r\n        i0.ɵɵtemplate(4, TreeComponent_tree_node_drop_slot_4_Template, 1, 2, \"tree-node-drop-slot\", 3);\r\n        i0.ɵɵelementEnd()();\r\n    } if (rf & 2) {\r\n        i0.ɵɵadvance(2);\r\n        i0.ɵɵclassProp(\"node-dragging\", ctx.treeDraggedElement.isDragging())(\"angular-tree-component-rtl\", ctx.treeModel.options.rtl);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngIf\", ctx.treeModel.roots);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngIf\", ctx.treeModel.isEmptyTree());\r\n    } }, dependencies: [i1.NgIf, TreeNodeDropSlot, TreeNodeCollectionComponent, TreeViewportComponent], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeComponent, [{\r\n        type: Component,\r\n        args: [{ selector: 'Tree, tree-root', providers: [TreeModel], template: `\r\n      <tree-viewport #viewport>\r\n          <div\r\n                  class=\"angular-tree-component\"\r\n                  [class.node-dragging]=\"treeDraggedElement.isDragging()\"\r\n                  [class.angular-tree-component-rtl]=\"treeModel.options.rtl\">\r\n              <tree-node-collection\r\n                      *ngIf=\"treeModel.roots\"\r\n                      [nodes]=\"treeModel.roots\"\r\n                      [treeModel]=\"treeModel\"\r\n                      [templates]=\"{\r\n            loadingTemplate: loadingTemplate,\r\n            treeNodeTemplate: treeNodeTemplate,\r\n            treeNodeWrapperTemplate: treeNodeWrapperTemplate,\r\n            treeNodeFullTemplate: treeNodeFullTemplate\r\n          }\">\r\n              </tree-node-collection>\r\n              <tree-node-drop-slot\r\n                      class=\"empty-tree-drop-slot\"\r\n                      *ngIf=\"treeModel.isEmptyTree()\"\r\n                      [dropIndex]=\"0\"\r\n                      [node]=\"treeModel.virtualRoot\">\r\n              </tree-node-drop-slot>\r\n          </div>\r\n      </tree-viewport>\r\n  ` }]\r\n    }], function () { return [{ type: TreeModel }, { type: TreeDraggedElement }]; }, { loadingTemplate: [{\r\n            type: ContentChild,\r\n            args: ['loadingTemplate', { static: false }]\r\n        }], treeNodeTemplate: [{\r\n            type: ContentChild,\r\n            args: ['treeNodeTemplate', { static: false }]\r\n        }], treeNodeWrapperTemplate: [{\r\n            type: ContentChild,\r\n            args: ['treeNodeWrapperTemplate', { static: false }]\r\n        }], treeNodeFullTemplate: [{\r\n            type: ContentChild,\r\n            args: ['treeNodeFullTemplate', { static: false }]\r\n        }], viewportComponent: [{\r\n            type: ViewChild,\r\n            args: ['viewport', { static: false }]\r\n        }], nodes: [{\r\n            type: Input\r\n        }], options: [{\r\n            type: Input\r\n        }], focused: [{\r\n            type: Input\r\n        }], state: [{\r\n            type: Input\r\n        }], toggleExpanded: [{\r\n            type: Output\r\n        }], activate: [{\r\n            type: Output\r\n        }], deactivate: [{\r\n            type: Output\r\n        }], nodeActivate: [{\r\n            type: Output\r\n        }], nodeDeactivate: [{\r\n            type: Output\r\n        }], select: [{\r\n            type: Output\r\n        }], deselect: [{\r\n            type: Output\r\n        }], focus: [{\r\n            type: Output\r\n        }], blur: [{\r\n            type: Output\r\n        }], updateData: [{\r\n            type: Output\r\n        }], initialized: [{\r\n            type: Output\r\n        }], moveNode: [{\r\n            type: Output\r\n        }], copyNode: [{\r\n            type: Output\r\n        }], loadNodeChildren: [{\r\n            type: Output\r\n        }], changeFilter: [{\r\n            type: Output\r\n        }], event: [{\r\n            type: Output\r\n        }], stateChange: [{\r\n            type: Output\r\n        }], onKeydown: [{\r\n            type: HostListener,\r\n            args: ['body: keydown', ['$event']]\r\n        }], onMousedown: [{\r\n            type: HostListener,\r\n            args: ['body: mousedown', ['$event']]\r\n        }] }); })();\n\nconst EASE_ACCELERATION = 1.005;\r\nclass TreeAnimateOpenDirective {\r\n    constructor(renderer, templateRef, viewContainerRef) {\r\n        this.renderer = renderer;\r\n        this.templateRef = templateRef;\r\n        this.viewContainerRef = viewContainerRef;\r\n    }\r\n    set isOpen(value) {\r\n        if (value) {\r\n            this._show();\r\n            if (this.isEnabled && this._isOpen === false) {\r\n                this._animateOpen();\r\n            }\r\n        }\r\n        else {\r\n            this.isEnabled ? this._animateClose() : this._hide();\r\n        }\r\n        this._isOpen = !!value;\r\n    }\r\n    ;\r\n    _show() {\r\n        if (this.innerElement)\r\n            return;\r\n        // create child view\r\n        this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];\r\n    }\r\n    _hide() {\r\n        this.viewContainerRef.clear();\r\n        this.innerElement = null;\r\n    }\r\n    _animateOpen() {\r\n        let delta = this.animateSpeed;\r\n        let ease = this.animateAcceleration;\r\n        let maxHeight = 0;\r\n        // set height to 0\r\n        this.renderer.setStyle(this.innerElement, 'max-height', `0`);\r\n        // increase maxHeight until height doesn't change\r\n        setTimeout(() => {\r\n            const i = setInterval(() => {\r\n                if (!this._isOpen || !this.innerElement)\r\n                    return clearInterval(i);\r\n                maxHeight += delta;\r\n                const roundedMaxHeight = Math.round(maxHeight);\r\n                this.renderer.setStyle(this.innerElement, 'max-height', `${roundedMaxHeight}px`);\r\n                const height = this.innerElement.getBoundingClientRect ? this.innerElement.getBoundingClientRect().height : 0; // TBD use renderer\r\n                delta *= ease;\r\n                ease *= EASE_ACCELERATION;\r\n                if (height < roundedMaxHeight) {\r\n                    // Make maxHeight auto because animation finished and container might change height later on\r\n                    this.renderer.setStyle(this.innerElement, 'max-height', null);\r\n                    clearInterval(i);\r\n                }\r\n            }, 17);\r\n        });\r\n    }\r\n    _animateClose() {\r\n        if (!this.innerElement)\r\n            return;\r\n        let delta = this.animateSpeed;\r\n        let ease = this.animateAcceleration;\r\n        let height = this.innerElement.getBoundingClientRect().height; // TBD use renderer\r\n        // slowly decrease maxHeight to 0, starting from current height\r\n        const i = setInterval(() => {\r\n            if (this._isOpen || !this.innerElement)\r\n                return clearInterval(i);\r\n            height -= delta;\r\n            this.renderer.setStyle(this.innerElement, 'max-height', `${height}px`);\r\n            delta *= ease;\r\n            ease *= EASE_ACCELERATION;\r\n            if (height <= 0) {\r\n                // after animation complete - remove child element\r\n                this.viewContainerRef.clear();\r\n                this.innerElement = null;\r\n                clearInterval(i);\r\n            }\r\n        }, 17);\r\n    }\r\n}\r\n/** @nocollapse */ TreeAnimateOpenDirective.ɵfac = function TreeAnimateOpenDirective_Factory(t) { return new (t || TreeAnimateOpenDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef)); };\r\n/** @nocollapse */ TreeAnimateOpenDirective.ɵdir = /** @pureOrBreakMyCode */ i0.ɵɵdefineDirective({ type: TreeAnimateOpenDirective, selectors: [[\"\", \"treeAnimateOpen\", \"\"]], inputs: { animateSpeed: [\"treeAnimateOpenSpeed\", \"animateSpeed\"], animateAcceleration: [\"treeAnimateOpenAcceleration\", \"animateAcceleration\"], isEnabled: [\"treeAnimateOpenEnabled\", \"isEnabled\"], isOpen: [\"treeAnimateOpen\", \"isOpen\"] } });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeAnimateOpenDirective, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[treeAnimateOpen]'\r\n            }]\r\n    }], function () { return [{ type: i0.Renderer2 }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; }, { animateSpeed: [{\r\n            type: Input,\r\n            args: ['treeAnimateOpenSpeed']\r\n        }], animateAcceleration: [{\r\n            type: Input,\r\n            args: ['treeAnimateOpenAcceleration']\r\n        }], isEnabled: [{\r\n            type: Input,\r\n            args: ['treeAnimateOpenEnabled']\r\n        }], isOpen: [{\r\n            type: Input,\r\n            args: ['treeAnimateOpen']\r\n        }] }); })();\n\nfunction TreeNodeChildrenComponent_ng_container_0_div_1_tree_node_collection_1_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelement(0, \"tree-node-collection\", 4);\r\n} if (rf & 2) {\r\n    const ctx_r2 = i0.ɵɵnextContext(3);\r\n    i0.ɵɵproperty(\"nodes\", ctx_r2.node.children)(\"templates\", ctx_r2.templates)(\"treeModel\", ctx_r2.node.treeModel);\r\n} }\r\nfunction TreeNodeChildrenComponent_ng_container_0_div_1_tree_loading_component_2_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelement(0, \"tree-loading-component\", 5);\r\n} if (rf & 2) {\r\n    const ctx_r3 = i0.ɵɵnextContext(3);\r\n    i0.ɵɵstyleProp(\"padding-left\", ctx_r3.node.getNodePadding());\r\n    i0.ɵɵproperty(\"template\", ctx_r3.templates.loadingTemplate)(\"node\", ctx_r3.node);\r\n} }\r\nfunction TreeNodeChildrenComponent_ng_container_0_div_1_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"div\");\r\n    i0.ɵɵtemplate(1, TreeNodeChildrenComponent_ng_container_0_div_1_tree_node_collection_1_Template, 1, 3, \"tree-node-collection\", 2);\r\n    i0.ɵɵtemplate(2, TreeNodeChildrenComponent_ng_container_0_div_1_tree_loading_component_2_Template, 1, 4, \"tree-loading-component\", 3);\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r1 = i0.ɵɵnextContext(2);\r\n    i0.ɵɵclassProp(\"tree-children\", true)(\"tree-children-no-padding\", ctx_r1.node.options.levelPadding);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.node.children);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"ngIf\", !ctx_r1.node.children);\r\n} }\r\nfunction TreeNodeChildrenComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementContainerStart(0);\r\n    i0.ɵɵtemplate(1, TreeNodeChildrenComponent_ng_container_0_div_1_Template, 3, 6, \"div\", 1);\r\n    i0.ɵɵelementContainerEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = i0.ɵɵnextContext();\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"treeAnimateOpen\", ctx_r0.node.isExpanded)(\"treeAnimateOpenSpeed\", ctx_r0.node.options.animateSpeed)(\"treeAnimateOpenAcceleration\", ctx_r0.node.options.animateAcceleration)(\"treeAnimateOpenEnabled\", ctx_r0.node.options.animateExpand);\r\n} }\r\nconst _c0$5 = function () { return { dontDetach: true }; };\r\nclass TreeNodeChildrenComponent {\r\n}\r\n/** @nocollapse */ TreeNodeChildrenComponent.ɵfac = function TreeNodeChildrenComponent_Factory(t) { return new (t || TreeNodeChildrenComponent)(); };\r\n/** @nocollapse */ TreeNodeChildrenComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeChildrenComponent, selectors: [[\"tree-node-children\"]], inputs: { node: \"node\", templates: \"templates\" }, decls: 1, vars: 2, consts: [[4, \"treeMobxAutorun\"], [3, \"tree-children\", \"tree-children-no-padding\", 4, \"treeAnimateOpen\", \"treeAnimateOpenSpeed\", \"treeAnimateOpenAcceleration\", \"treeAnimateOpenEnabled\"], [3, \"nodes\", \"templates\", \"treeModel\", 4, \"ngIf\"], [\"class\", \"tree-node-loading\", 3, \"padding-left\", \"template\", \"node\", 4, \"ngIf\"], [3, \"nodes\", \"templates\", \"treeModel\"], [1, \"tree-node-loading\", 3, \"template\", \"node\"]], template: function TreeNodeChildrenComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵtemplate(0, TreeNodeChildrenComponent_ng_container_0_Template, 2, 4, \"ng-container\", 0);\r\n    } if (rf & 2) {\r\n        i0.ɵɵproperty(\"treeMobxAutorun\", i0.ɵɵpureFunction0(1, _c0$5));\r\n    } }, dependencies: [i1.NgIf, LoadingComponent, TreeNodeCollectionComponent, TreeAnimateOpenDirective, TreeMobxAutorunDirective], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeChildrenComponent, [{\r\n        type: Component,\r\n        args: [{ selector: 'tree-node-children', encapsulation: ViewEncapsulation.None, template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        [class.tree-children]=\"true\"\r\n        [class.tree-children-no-padding]=\"node.options.levelPadding\"\r\n        *treeAnimateOpen=\"\r\n          node.isExpanded;\r\n          speed: node.options.animateSpeed;\r\n          acceleration: node.options.animateAcceleration;\r\n          enabled: node.options.animateExpand\r\n        \"\r\n      >\r\n        <tree-node-collection\r\n          *ngIf=\"node.children\"\r\n          [nodes]=\"node.children\"\r\n          [templates]=\"templates\"\r\n          [treeModel]=\"node.treeModel\"\r\n        >\r\n        </tree-node-collection>\r\n        <tree-loading-component\r\n          [style.padding-left]=\"node.getNodePadding()\"\r\n          class=\"tree-node-loading\"\r\n          *ngIf=\"!node.children\"\r\n          [template]=\"templates.loadingTemplate\"\r\n          [node]=\"node\"\r\n        ></tree-loading-component>\r\n      </div>\r\n    </ng-container>\r\n  ` }]\r\n    }], null, { node: [{\r\n            type: Input\r\n        }], templates: [{\r\n            type: Input\r\n        }] }); })();\n\nfunction TreeNodeContent_span_0_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"span\");\r\n    i0.ɵɵtext(1);\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = i0.ɵɵnextContext();\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵtextInterpolate(ctx_r0.node.displayField);\r\n} }\r\nconst _c0$4 = function (a0, a1, a2) { return { $implicit: a0, node: a1, index: a2 }; };\r\nclass TreeNodeContent {\r\n}\r\n/** @nocollapse */ TreeNodeContent.ɵfac = function TreeNodeContent_Factory(t) { return new (t || TreeNodeContent)(); };\r\n/** @nocollapse */ TreeNodeContent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeContent, selectors: [[\"tree-node-content\"]], inputs: { node: \"node\", index: \"index\", template: \"template\" }, decls: 2, vars: 7, consts: [[4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]], template: function TreeNodeContent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵtemplate(0, TreeNodeContent_span_0_Template, 2, 1, \"span\", 0);\r\n        i0.ɵɵelementContainer(1, 1);\r\n    } if (rf & 2) {\r\n        i0.ɵɵproperty(\"ngIf\", !ctx.template);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction3(3, _c0$4, ctx.node, ctx.node, ctx.index));\r\n    } }, dependencies: [i1.NgIf, i1.NgTemplateOutlet], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeContent, [{\r\n        type: Component,\r\n        args: [{\r\n                selector: 'tree-node-content',\r\n                encapsulation: ViewEncapsulation.None,\r\n                template: `\r\n  <span *ngIf=\"!template\">{{ node.displayField }}</span>\r\n  <ng-container\r\n    [ngTemplateOutlet]=\"template\"\r\n    [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index }\">\r\n  </ng-container>`,\r\n            }]\r\n    }], null, { node: [{\r\n            type: Input\r\n        }], index: [{\r\n            type: Input\r\n        }], template: [{\r\n            type: Input\r\n        }] }); })();\n\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\nclass TreeDragDirective {\r\n    constructor(el, renderer, treeDraggedElement, ngZone) {\r\n        this.el = el;\r\n        this.renderer = renderer;\r\n        this.treeDraggedElement = treeDraggedElement;\r\n        this.ngZone = ngZone;\r\n        this.dragEventHandler = this.onDrag.bind(this);\r\n    }\r\n    ngAfterViewInit() {\r\n        let el = this.el.nativeElement;\r\n        this.ngZone.runOutsideAngular(() => {\r\n            el.addEventListener('drag', this.dragEventHandler);\r\n        });\r\n    }\r\n    ngDoCheck() {\r\n        this.renderer.setAttribute(this.el.nativeElement, 'draggable', this.treeDragEnabled ? 'true' : 'false');\r\n    }\r\n    ngOnDestroy() {\r\n        let el = this.el.nativeElement;\r\n        el.removeEventListener('drag', this.dragEventHandler);\r\n    }\r\n    onDragStart(ev) {\r\n        // setting the data is required by firefox\r\n        ev.dataTransfer.setData('text', ev.target.id);\r\n        this.treeDraggedElement.set(this.draggedElement);\r\n        if (this.draggedElement.mouseAction) {\r\n            this.draggedElement.mouseAction('dragStart', ev);\r\n        }\r\n    }\r\n    onDrag(ev) {\r\n        if (this.draggedElement.mouseAction) {\r\n            this.draggedElement.mouseAction('drag', ev);\r\n        }\r\n    }\r\n    onDragEnd() {\r\n        if (this.draggedElement.mouseAction) {\r\n            this.draggedElement.mouseAction('dragEnd');\r\n        }\r\n        this.treeDraggedElement.set(null);\r\n    }\r\n}\r\n/** @nocollapse */ TreeDragDirective.ɵfac = function TreeDragDirective_Factory(t) { return new (t || TreeDragDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(TreeDraggedElement), i0.ɵɵdirectiveInject(i0.NgZone)); };\r\n/** @nocollapse */ TreeDragDirective.ɵdir = /** @pureOrBreakMyCode */ i0.ɵɵdefineDirective({ type: TreeDragDirective, selectors: [[\"\", \"treeDrag\", \"\"]], hostBindings: function TreeDragDirective_HostBindings(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵlistener(\"dragstart\", function TreeDragDirective_dragstart_HostBindingHandler($event) { return ctx.onDragStart($event); })(\"dragend\", function TreeDragDirective_dragend_HostBindingHandler() { return ctx.onDragEnd(); });\r\n    } }, inputs: { draggedElement: [\"treeDrag\", \"draggedElement\"], treeDragEnabled: \"treeDragEnabled\" } });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeDragDirective, [{\r\n        type: Directive,\r\n        args: [{\r\n                selector: '[treeDrag]'\r\n            }]\r\n    }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: TreeDraggedElement }, { type: i0.NgZone }]; }, { draggedElement: [{\r\n            type: Input,\r\n            args: ['treeDrag']\r\n        }], treeDragEnabled: [{\r\n            type: Input\r\n        }], onDragStart: [{\r\n            type: HostListener,\r\n            args: ['dragstart', ['$event']]\r\n        }], onDragEnd: [{\r\n            type: HostListener,\r\n            args: ['dragend']\r\n        }] }); })();\n\nfunction TreeNodeExpanderComponent_ng_container_0_span_1_Template(rf, ctx) { if (rf & 1) {\r\n    const _r4 = i0.ɵɵgetCurrentView();\r\n    i0.ɵɵelementStart(0, \"span\", 3);\r\n    i0.ɵɵlistener(\"click\", function TreeNodeExpanderComponent_ng_container_0_span_1_Template_span_click_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r3.node.mouseAction(\"expanderClick\", $event)); });\r\n    i0.ɵɵelement(1, \"span\", 4);\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r1 = i0.ɵɵnextContext(2);\r\n    i0.ɵɵclassProp(\"toggle-children-wrapper-expanded\", ctx_r1.node.isExpanded)(\"toggle-children-wrapper-collapsed\", ctx_r1.node.isCollapsed);\r\n} }\r\nfunction TreeNodeExpanderComponent_ng_container_0_span_2_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelement(0, \"span\", 5);\r\n} }\r\nfunction TreeNodeExpanderComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementContainerStart(0);\r\n    i0.ɵɵtemplate(1, TreeNodeExpanderComponent_ng_container_0_span_1_Template, 2, 4, \"span\", 1);\r\n    i0.ɵɵtemplate(2, TreeNodeExpanderComponent_ng_container_0_span_2_Template, 1, 0, \"span\", 2);\r\n    i0.ɵɵelementContainerEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = i0.ɵɵnextContext();\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.node.hasChildren);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.node.hasChildren);\r\n} }\r\nconst _c0$3 = function () { return { dontDetach: true }; };\r\nclass TreeNodeExpanderComponent {\r\n}\r\n/** @nocollapse */ TreeNodeExpanderComponent.ɵfac = function TreeNodeExpanderComponent_Factory(t) { return new (t || TreeNodeExpanderComponent)(); };\r\n/** @nocollapse */ TreeNodeExpanderComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeExpanderComponent, selectors: [[\"tree-node-expander\"]], inputs: { node: \"node\" }, decls: 1, vars: 2, consts: [[4, \"treeMobxAutorun\"], [\"class\", \"toggle-children-wrapper\", 3, \"toggle-children-wrapper-expanded\", \"toggle-children-wrapper-collapsed\", \"click\", 4, \"ngIf\"], [\"class\", \"toggle-children-placeholder\", 4, \"ngIf\"], [1, \"toggle-children-wrapper\", 3, \"click\"], [1, \"toggle-children\"], [1, \"toggle-children-placeholder\"]], template: function TreeNodeExpanderComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵtemplate(0, TreeNodeExpanderComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\r\n    } if (rf & 2) {\r\n        i0.ɵɵproperty(\"treeMobxAutorun\", i0.ɵɵpureFunction0(1, _c0$3));\r\n    } }, dependencies: [i1.NgIf, TreeMobxAutorunDirective], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeExpanderComponent, [{\r\n        type: Component,\r\n        args: [{ selector: 'tree-node-expander', encapsulation: ViewEncapsulation.None, template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <span\r\n        *ngIf=\"node.hasChildren\"\r\n        [class.toggle-children-wrapper-expanded]=\"node.isExpanded\"\r\n        [class.toggle-children-wrapper-collapsed]=\"node.isCollapsed\"\r\n        class=\"toggle-children-wrapper\"\r\n        (click)=\"node.mouseAction('expanderClick', $event)\"\r\n      >\r\n        <span class=\"toggle-children\"></span>\r\n      </span>\r\n      <span *ngIf=\"!node.hasChildren\" class=\"toggle-children-placeholder\">\r\n      </span>\r\n    </ng-container>\r\n  ` }]\r\n    }], null, { node: [{\r\n            type: Input\r\n        }] }); })();\n\nfunction TreeNodeCheckboxComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\r\n    const _r2 = i0.ɵɵgetCurrentView();\r\n    i0.ɵɵelementContainerStart(0);\r\n    i0.ɵɵelementStart(1, \"input\", 1);\r\n    i0.ɵɵlistener(\"click\", function TreeNodeCheckboxComponent_ng_container_0_Template_input_click_1_listener($event) { i0.ɵɵrestoreView(_r2); const ctx_r1 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r1.node.mouseAction(\"checkboxClick\", $event)); });\r\n    i0.ɵɵelementEnd();\r\n    i0.ɵɵelementContainerEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = i0.ɵɵnextContext();\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"checked\", ctx_r0.node.isSelected)(\"indeterminate\", ctx_r0.node.isPartiallySelected);\r\n} }\r\nconst _c0$2 = function () { return { dontDetach: true }; };\r\nclass TreeNodeCheckboxComponent {\r\n}\r\n/** @nocollapse */ TreeNodeCheckboxComponent.ɵfac = function TreeNodeCheckboxComponent_Factory(t) { return new (t || TreeNodeCheckboxComponent)(); };\r\n/** @nocollapse */ TreeNodeCheckboxComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeCheckboxComponent, selectors: [[\"tree-node-checkbox\"]], inputs: { node: \"node\" }, decls: 1, vars: 2, consts: [[4, \"treeMobxAutorun\"], [\"type\", \"checkbox\", 1, \"tree-node-checkbox\", 3, \"checked\", \"indeterminate\", \"click\"]], template: function TreeNodeCheckboxComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵtemplate(0, TreeNodeCheckboxComponent_ng_container_0_Template, 2, 2, \"ng-container\", 0);\r\n    } if (rf & 2) {\r\n        i0.ɵɵproperty(\"treeMobxAutorun\", i0.ɵɵpureFunction0(1, _c0$2));\r\n    } }, dependencies: [TreeMobxAutorunDirective], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeCheckboxComponent, [{\r\n        type: Component,\r\n        args: [{ selector: 'tree-node-checkbox', encapsulation: ViewEncapsulation.None, template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <input\r\n        class=\"tree-node-checkbox\"\r\n        type=\"checkbox\"\r\n        (click)=\"node.mouseAction('checkboxClick', $event)\"\r\n        [checked]=\"node.isSelected\"\r\n        [indeterminate]=\"node.isPartiallySelected\"\r\n      />\r\n    </ng-container>\r\n  ` }]\r\n    }], null, { node: [{\r\n            type: Input\r\n        }] }); })();\n\nfunction TreeNodeWrapperComponent_div_0_tree_node_checkbox_1_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelement(0, \"tree-node-checkbox\", 4);\r\n} if (rf & 2) {\r\n    const ctx_r1 = i0.ɵɵnextContext(2);\r\n    i0.ɵɵproperty(\"node\", ctx_r1.node);\r\n} }\r\nfunction TreeNodeWrapperComponent_div_0_Template(rf, ctx) { if (rf & 1) {\r\n    const _r3 = i0.ɵɵgetCurrentView();\r\n    i0.ɵɵelementStart(0, \"div\", 2);\r\n    i0.ɵɵtemplate(1, TreeNodeWrapperComponent_div_0_tree_node_checkbox_1_Template, 1, 1, \"tree-node-checkbox\", 3);\r\n    i0.ɵɵelement(2, \"tree-node-expander\", 4);\r\n    i0.ɵɵelementStart(3, \"div\", 5);\r\n    i0.ɵɵlistener(\"click\", function TreeNodeWrapperComponent_div_0_Template_div_click_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.node.mouseAction(\"click\", $event)); })(\"dblclick\", function TreeNodeWrapperComponent_div_0_Template_div_dblclick_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.node.mouseAction(\"dblClick\", $event)); })(\"mouseover\", function TreeNodeWrapperComponent_div_0_Template_div_mouseover_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.node.mouseAction(\"mouseOver\", $event)); })(\"mouseout\", function TreeNodeWrapperComponent_div_0_Template_div_mouseout_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.node.mouseAction(\"mouseOut\", $event)); })(\"contextmenu\", function TreeNodeWrapperComponent_div_0_Template_div_contextmenu_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.node.mouseAction(\"contextMenu\", $event)); })(\"treeDrop\", function TreeNodeWrapperComponent_div_0_Template_div_treeDrop_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.node.onDrop($event)); })(\"treeDropDragOver\", function TreeNodeWrapperComponent_div_0_Template_div_treeDropDragOver_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.node.mouseAction(\"dragOver\", $event)); })(\"treeDropDragLeave\", function TreeNodeWrapperComponent_div_0_Template_div_treeDropDragLeave_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.node.mouseAction(\"dragLeave\", $event)); })(\"treeDropDragEnter\", function TreeNodeWrapperComponent_div_0_Template_div_treeDropDragEnter_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r11 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r11.node.mouseAction(\"dragEnter\", $event)); });\r\n    i0.ɵɵelement(4, \"tree-node-content\", 6);\r\n    i0.ɵɵelementEnd()();\r\n} if (rf & 2) {\r\n    const ctx_r0 = i0.ɵɵnextContext();\r\n    i0.ɵɵstyleProp(\"padding-left\", ctx_r0.node.getNodePadding());\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.node.options.useCheckbox);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"node\", ctx_r0.node);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵclassProp(\"node-content-wrapper-active\", ctx_r0.node.isActive)(\"node-content-wrapper-focused\", ctx_r0.node.isFocused);\r\n    i0.ɵɵproperty(\"treeAllowDrop\", ctx_r0.node.allowDrop)(\"allowDragoverStyling\", ctx_r0.node.allowDragoverStyling())(\"treeDrag\", ctx_r0.node)(\"treeDragEnabled\", ctx_r0.node.allowDrag());\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"node\", ctx_r0.node)(\"index\", ctx_r0.index)(\"template\", ctx_r0.templates.treeNodeTemplate);\r\n} }\r\nconst _c0$1 = function (a0, a1, a2, a3) { return { $implicit: a0, node: a1, index: a2, templates: a3 }; };\r\nclass TreeNodeWrapperComponent {\r\n}\r\n/** @nocollapse */ TreeNodeWrapperComponent.ɵfac = function TreeNodeWrapperComponent_Factory(t) { return new (t || TreeNodeWrapperComponent)(); };\r\n/** @nocollapse */ TreeNodeWrapperComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeWrapperComponent, selectors: [[\"tree-node-wrapper\"]], inputs: { node: \"node\", index: \"index\", templates: \"templates\" }, decls: 2, vars: 8, consts: [[\"class\", \"node-wrapper\", 3, \"padding-left\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"node-wrapper\"], [3, \"node\", 4, \"ngIf\"], [3, \"node\"], [1, \"node-content-wrapper\", 3, \"treeAllowDrop\", \"allowDragoverStyling\", \"treeDrag\", \"treeDragEnabled\", \"click\", \"dblclick\", \"mouseover\", \"mouseout\", \"contextmenu\", \"treeDrop\", \"treeDropDragOver\", \"treeDropDragLeave\", \"treeDropDragEnter\"], [3, \"node\", \"index\", \"template\"]], template: function TreeNodeWrapperComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵtemplate(0, TreeNodeWrapperComponent_div_0_Template, 5, 15, \"div\", 0);\r\n        i0.ɵɵelementContainer(1, 1);\r\n    } if (rf & 2) {\r\n        i0.ɵɵproperty(\"ngIf\", !ctx.templates.treeNodeWrapperTemplate);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.templates.treeNodeWrapperTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction4(3, _c0$1, ctx.node, ctx.node, ctx.index, ctx.templates));\r\n    } }, dependencies: [i1.NgIf, i1.NgTemplateOutlet, TreeNodeContent, TreeDropDirective, TreeDragDirective, TreeNodeExpanderComponent, TreeNodeCheckboxComponent], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeWrapperComponent, [{\r\n        type: Component,\r\n        args: [{ selector: 'tree-node-wrapper', encapsulation: ViewEncapsulation.None, template: `\r\n      <div *ngIf=\"!templates.treeNodeWrapperTemplate\" class=\"node-wrapper\" [style.padding-left]=\"node.getNodePadding()\">\r\n          <tree-node-checkbox *ngIf=\"node.options.useCheckbox\" [node]=\"node\"></tree-node-checkbox>\r\n          <tree-node-expander [node]=\"node\"></tree-node-expander>\r\n          <div class=\"node-content-wrapper\"\r\n               [class.node-content-wrapper-active]=\"node.isActive\"\r\n               [class.node-content-wrapper-focused]=\"node.isFocused\"\r\n               (click)=\"node.mouseAction('click', $event)\"\r\n               (dblclick)=\"node.mouseAction('dblClick', $event)\"\r\n               (mouseover)=\"node.mouseAction('mouseOver', $event)\"\r\n               (mouseout)=\"node.mouseAction('mouseOut', $event)\"\r\n               (contextmenu)=\"node.mouseAction('contextMenu', $event)\"\r\n               (treeDrop)=\"node.onDrop($event)\"\r\n               (treeDropDragOver)=\"node.mouseAction('dragOver', $event)\"\r\n               (treeDropDragLeave)=\"node.mouseAction('dragLeave', $event)\"\r\n               (treeDropDragEnter)=\"node.mouseAction('dragEnter', $event)\"\r\n               [treeAllowDrop]=\"node.allowDrop\"\r\n               [allowDragoverStyling]=\"node.allowDragoverStyling()\"\r\n               [treeDrag]=\"node\"\r\n               [treeDragEnabled]=\"node.allowDrag()\">\r\n\r\n              <tree-node-content [node]=\"node\" [index]=\"index\" [template]=\"templates.treeNodeTemplate\">\r\n              </tree-node-content>\r\n          </div>\r\n      </div>\r\n      <ng-container\r\n              [ngTemplateOutlet]=\"templates.treeNodeWrapperTemplate\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index, templates: templates }\">\r\n      </ng-container>\r\n  ` }]\r\n    }], null, { node: [{\r\n            type: Input\r\n        }], index: [{\r\n            type: Input\r\n        }], templates: [{\r\n            type: Input\r\n        }] }); })();\n\nfunction TreeNodeComponent_ng_container_0_div_1_tree_node_drop_slot_1_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelement(0, \"tree-node-drop-slot\", 6);\r\n} if (rf & 2) {\r\n    const ctx_r2 = i0.ɵɵnextContext(3);\r\n    i0.ɵɵproperty(\"dropIndex\", ctx_r2.node.index)(\"node\", ctx_r2.node.parent);\r\n} }\r\nfunction TreeNodeComponent_ng_container_0_div_1_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementStart(0, \"div\");\r\n    i0.ɵɵtemplate(1, TreeNodeComponent_ng_container_0_div_1_tree_node_drop_slot_1_Template, 1, 2, \"tree-node-drop-slot\", 3);\r\n    i0.ɵɵelement(2, \"tree-node-wrapper\", 4)(3, \"tree-node-children\", 5)(4, \"tree-node-drop-slot\", 6);\r\n    i0.ɵɵelementEnd();\r\n} if (rf & 2) {\r\n    const ctx_r1 = i0.ɵɵnextContext(2);\r\n    i0.ɵɵclassMap(ctx_r1.node.getClass());\r\n    i0.ɵɵclassProp(\"tree-node\", true)(\"tree-node-expanded\", ctx_r1.node.isExpanded && ctx_r1.node.hasChildren)(\"tree-node-collapsed\", ctx_r1.node.isCollapsed && ctx_r1.node.hasChildren)(\"tree-node-leaf\", ctx_r1.node.isLeaf)(\"tree-node-active\", ctx_r1.node.isActive)(\"tree-node-focused\", ctx_r1.node.isFocused);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.index === 0);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"node\", ctx_r1.node)(\"index\", ctx_r1.index)(\"templates\", ctx_r1.templates);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"node\", ctx_r1.node)(\"templates\", ctx_r1.templates);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"dropIndex\", ctx_r1.node.index + 1)(\"node\", ctx_r1.node.parent);\r\n} }\r\nconst _c0 = function (a0, a1, a2, a3) { return { $implicit: a0, node: a1, index: a2, templates: a3 }; };\r\nfunction TreeNodeComponent_ng_container_0_Template(rf, ctx) { if (rf & 1) {\r\n    i0.ɵɵelementContainerStart(0);\r\n    i0.ɵɵtemplate(1, TreeNodeComponent_ng_container_0_div_1_Template, 5, 22, \"div\", 1);\r\n    i0.ɵɵelementContainer(2, 2);\r\n    i0.ɵɵelementContainerEnd();\r\n} if (rf & 2) {\r\n    const ctx_r0 = i0.ɵɵnextContext();\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"ngIf\", !ctx_r0.templates.treeNodeFullTemplate);\r\n    i0.ɵɵadvance(1);\r\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.templates.treeNodeFullTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction4(3, _c0, ctx_r0.node, ctx_r0.node, ctx_r0.index, ctx_r0.templates));\r\n} }\r\nconst _c1 = function () { return { dontDetach: true }; };\r\nclass TreeNodeComponent {\r\n}\r\n/** @nocollapse */ TreeNodeComponent.ɵfac = function TreeNodeComponent_Factory(t) { return new (t || TreeNodeComponent)(); };\r\n/** @nocollapse */ TreeNodeComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeComponent, selectors: [[\"TreeNode\"], [\"tree-node\"]], inputs: { node: \"node\", index: \"index\", templates: \"templates\" }, decls: 1, vars: 2, consts: [[4, \"treeMobxAutorun\"], [3, \"class\", \"tree-node\", \"tree-node-expanded\", \"tree-node-collapsed\", \"tree-node-leaf\", \"tree-node-active\", \"tree-node-focused\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"dropIndex\", \"node\", 4, \"ngIf\"], [3, \"node\", \"index\", \"templates\"], [3, \"node\", \"templates\"], [3, \"dropIndex\", \"node\"]], template: function TreeNodeComponent_Template(rf, ctx) { if (rf & 1) {\r\n        i0.ɵɵtemplate(0, TreeNodeComponent_ng_container_0_Template, 3, 8, \"ng-container\", 0);\r\n    } if (rf & 2) {\r\n        i0.ɵɵproperty(\"treeMobxAutorun\", i0.ɵɵpureFunction0(1, _c1));\r\n    } }, dependencies: [i1.NgIf, i1.NgTemplateOutlet, TreeNodeChildrenComponent, TreeNodeDropSlot, TreeNodeWrapperComponent, TreeMobxAutorunDirective], encapsulation: 2 });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeComponent, [{\r\n        type: Component,\r\n        args: [{ selector: 'TreeNode, tree-node', encapsulation: ViewEncapsulation.None, template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        *ngIf=\"!templates.treeNodeFullTemplate\"\r\n        [class]=\"node.getClass()\"\r\n        [class.tree-node]=\"true\"\r\n        [class.tree-node-expanded]=\"node.isExpanded && node.hasChildren\"\r\n        [class.tree-node-collapsed]=\"node.isCollapsed && node.hasChildren\"\r\n        [class.tree-node-leaf]=\"node.isLeaf\"\r\n        [class.tree-node-active]=\"node.isActive\"\r\n        [class.tree-node-focused]=\"node.isFocused\"\r\n      >\r\n        <tree-node-drop-slot\r\n          *ngIf=\"index === 0\"\r\n          [dropIndex]=\"node.index\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n\r\n        <tree-node-wrapper\r\n          [node]=\"node\"\r\n          [index]=\"index\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-wrapper>\r\n\r\n        <tree-node-children\r\n          [node]=\"node\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-children>\r\n        <tree-node-drop-slot\r\n          [dropIndex]=\"node.index + 1\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n      </div>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"templates.treeNodeFullTemplate\"\r\n        [ngTemplateOutletContext]=\"{\r\n          $implicit: node,\r\n          node: node,\r\n          index: index,\r\n          templates: templates\r\n        }\"\r\n      >\r\n      </ng-container>\r\n    </ng-container>\r\n  ` }]\r\n    }], null, { node: [{\r\n            type: Input\r\n        }], index: [{\r\n            type: Input\r\n        }], templates: [{\r\n            type: Input\r\n        }] }); })();\n\nclass TreeModule {\r\n}\r\n/** @nocollapse */ TreeModule.ɵfac = function TreeModule_Factory(t) { return new (t || TreeModule)(); };\r\n/** @nocollapse */ TreeModule.ɵmod = /** @pureOrBreakMyCode */ i0.ɵɵdefineNgModule({ type: TreeModule });\r\n/** @nocollapse */ TreeModule.ɵinj = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjector({ imports: [CommonModule] });\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeModule, [{\r\n        type: NgModule,\r\n        args: [{\r\n                declarations: [\r\n                    TreeComponent,\r\n                    TreeNodeComponent,\r\n                    TreeNodeContent,\r\n                    LoadingComponent,\r\n                    TreeDropDirective,\r\n                    TreeDragDirective,\r\n                    TreeNodeExpanderComponent,\r\n                    TreeNodeChildrenComponent,\r\n                    TreeNodeDropSlot,\r\n                    TreeNodeCollectionComponent,\r\n                    TreeViewportComponent,\r\n                    TreeNodeWrapperComponent,\r\n                    TreeNodeCheckboxComponent,\r\n                    TreeAnimateOpenDirective,\r\n                    TreeMobxAutorunDirective\r\n                ],\r\n                exports: [\r\n                    TreeComponent,\r\n                    TreeNodeComponent,\r\n                    TreeNodeContent,\r\n                    LoadingComponent,\r\n                    TreeDropDirective,\r\n                    TreeDragDirective,\r\n                    TreeNodeExpanderComponent,\r\n                    TreeNodeChildrenComponent,\r\n                    TreeNodeDropSlot,\r\n                    TreeNodeCollectionComponent,\r\n                    TreeViewportComponent,\r\n                    TreeNodeWrapperComponent,\r\n                    TreeNodeCheckboxComponent,\r\n                    TreeAnimateOpenDirective,\r\n                    TreeMobxAutorunDirective\r\n                ],\r\n                imports: [CommonModule],\r\n                providers: []\r\n            }]\r\n    }], null, null); })();\r\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TreeModule, { declarations: [TreeComponent,\r\n        TreeNodeComponent,\r\n        TreeNodeContent,\r\n        LoadingComponent,\r\n        TreeDropDirective,\r\n        TreeDragDirective,\r\n        TreeNodeExpanderComponent,\r\n        TreeNodeChildrenComponent,\r\n        TreeNodeDropSlot,\r\n        TreeNodeCollectionComponent,\r\n        TreeViewportComponent,\r\n        TreeNodeWrapperComponent,\r\n        TreeNodeCheckboxComponent,\r\n        TreeAnimateOpenDirective,\r\n        TreeMobxAutorunDirective], imports: [CommonModule], exports: [TreeComponent,\r\n        TreeNodeComponent,\r\n        TreeNodeContent,\r\n        LoadingComponent,\r\n        TreeDropDirective,\r\n        TreeDragDirective,\r\n        TreeNodeExpanderComponent,\r\n        TreeNodeChildrenComponent,\r\n        TreeNodeDropSlot,\r\n        TreeNodeCollectionComponent,\r\n        TreeViewportComponent,\r\n        TreeNodeWrapperComponent,\r\n        TreeNodeCheckboxComponent,\r\n        TreeAnimateOpenDirective,\r\n        TreeMobxAutorunDirective] }); })();\r\ni0.ɵɵsetComponentScope(TreeNodeCollectionComponent, [i1.NgForOf, TreeNodeComponent,\r\n    TreeMobxAutorunDirective], []);\n\n/*\r\n * Public API Surface of angular-tree-component\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { KEYS, LoadingComponent, TREE_ACTIONS, TreeAnimateOpenDirective, TreeComponent, TreeDragDirective, TreeDraggedElement, TreeDropDirective, TreeMobxAutorunDirective, TreeModel, TreeModule, TreeNode, TreeNodeCheckboxComponent, TreeNodeChildrenComponent, TreeNodeCollectionComponent, TreeNodeComponent, TreeNodeContent, TreeNodeDropSlot, TreeNodeExpanderComponent, TreeNodeWrapperComponent, TreeViewportComponent, TreeVirtualScroll };\n//# sourceMappingURL=circlon-angular-tree-component.mjs.map\n","map":{"version":3,"file":"circlon-angular-tree-component.mjs","sources":["../../../projects/angular-tree-component/src/lib/mobx-angular/tree-mobx-autorun.directive.ts","../../../projects/angular-tree-component/src/lib/constants/keys.ts","../../../projects/angular-tree-component/src/lib/models/tree-options.model.ts","../../../projects/angular-tree-component/src/lib/constants/events.ts","../../../projects/angular-tree-component/src/lib/models/tree-node.model.ts","../../../projects/angular-tree-component/src/lib/models/tree.model.ts","../../../projects/angular-tree-component/src/lib/models/tree-dragged-element.model.ts","../../../projects/angular-tree-component/src/lib/models/tree-virtual-scroll.model.ts","../../../projects/angular-tree-component/src/lib/components/loading.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-viewport.component.ts","../../../projects/angular-tree-component/src/lib/directives/tree-drop.directive.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-drop-slot.component.ts","../../../projects/angular-tree-component/src/lib/mobx-angular/mobx-proxy.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-collection.component.ts","../../../projects/angular-tree-component/src/lib/components/tree.component.ts","../../../projects/angular-tree-component/src/lib/directives/tree-animate-open.directive.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-children.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-content.component.ts","../../../projects/angular-tree-component/src/lib/directives/tree-drag.directive.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-expander.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-checkbox.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-wrapper.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node.component.ts","../../../projects/angular-tree-component/src/lib/angular-tree-component.module.ts","../../../projects/angular-tree-component/src/public-api.ts","../../../projects/angular-tree-component/src/circlon-angular-tree-component.ts"],"sourcesContent":["import {\r\n  Directive,\r\n  ViewContainerRef,\r\n  TemplateRef,\r\n  OnInit,\r\n  OnDestroy,\r\n  Input,\r\n  EmbeddedViewRef\r\n} from '@angular/core';\r\nimport { autorun } from 'mobx';\r\n\r\n@Directive({ selector: '[treeMobxAutorun]' })\r\nexport class TreeMobxAutorunDirective implements OnInit, OnDestroy {\r\n  protected templateBindings = {};\r\n  protected dispose: any;\r\n  protected view: EmbeddedViewRef<any>;\r\n  @Input() treeMobxAutorun;\r\n\r\n  constructor(\r\n    protected templateRef: TemplateRef<any>,\r\n    protected viewContainer: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.view = this.viewContainer.createEmbeddedView(this.templateRef);\r\n\r\n    if (this.dispose) {\r\n      this.dispose();\r\n    }\r\n\r\n    if (this.shouldDetach()) {\r\n      this.view.detach();\r\n    }\r\n    this.autoDetect(this.view);\r\n  }\r\n\r\n  shouldDetach() {\r\n    return this.treeMobxAutorun && this.treeMobxAutorun.detach;\r\n  }\r\n\r\n  autoDetect(view: EmbeddedViewRef<any>) {\r\n    this.dispose = autorun(() => view.detectChanges());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.dispose) {\r\n      this.dispose();\r\n    }\r\n  }\r\n}\r\n","export const KEYS = {\r\n  LEFT: 37,\r\n  UP: 38,\r\n  RIGHT: 39,\r\n  DOWN: 40,\r\n  ENTER: 13,\r\n  SPACE: 32,\r\n  CONTEXT_MENU: 32\r\n};\r\n","import { TreeNode } from './tree-node.model';\r\nimport { TreeModel } from './tree.model';\r\nimport { KEYS } from '../constants/keys';\r\nimport { ITreeOptions } from '../defs/api';\r\n\r\nexport interface IActionHandler {\r\n  (tree: TreeModel, node: TreeNode, $event: any, ...rest);\r\n}\r\n\r\nexport const TREE_ACTIONS = {\r\n  TOGGLE_ACTIVE: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(),\r\n  TOGGLE_ACTIVE_MULTI: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(true),\r\n  TOGGLE_SELECTED: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleSelected(),\r\n  ACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(true),\r\n  DEACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(false),\r\n  SELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(true),\r\n  DESELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(false),\r\n  FOCUS: (tree: TreeModel, node: TreeNode, $event: any) => node.focus(),\r\n  TOGGLE_EXPANDED: (tree: TreeModel, node: TreeNode, $event: any) => node.hasChildren && node.toggleExpanded(),\r\n  EXPAND: (tree: TreeModel, node: TreeNode, $event: any) => node.expand(),\r\n  COLLAPSE: (tree: TreeModel, node: TreeNode, $event: any) => node.collapse(),\r\n  DRILL_DOWN: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillDown(),\r\n  DRILL_UP: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillUp(),\r\n  NEXT_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusNextNode(),\r\n  PREVIOUS_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusPreviousNode(),\r\n  MOVE_NODE: (tree: TreeModel, node: TreeNode, $event: any, {from , to}: {from: any, to: any}) => {\r\n    // default action assumes from = node, to = {parent, index}\r\n    if ($event.ctrlKey) {\r\n      tree.copyNode(from, to);\r\n    } else {\r\n      tree.moveNode(from, to);\r\n    }\r\n  }\r\n};\r\n\r\nconst defaultActionMapping: IActionMapping = {\r\n  mouse: {\r\n    click: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n    dblClick: null,\r\n    contextMenu: null,\r\n    expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,\r\n    checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,\r\n    drop: TREE_ACTIONS.MOVE_NODE\r\n  },\r\n  keys: {\r\n    [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n    [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n    [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n    [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n    [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n    [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n  }\r\n};\r\n\r\nexport interface IActionMapping {\r\n  mouse?: {\r\n    click?: IActionHandler,\r\n    dblClick?: IActionHandler,\r\n    contextMenu?: IActionHandler,\r\n    expanderClick?: IActionHandler,\r\n    checkboxClick?: IActionHandler,\r\n    dragStart?: IActionHandler,\r\n    drag?: IActionHandler,\r\n    dragEnd?: IActionHandler,\r\n    dragOver?: IActionHandler,\r\n    dragLeave?: IActionHandler,\r\n    dragEnter?: IActionHandler,\r\n    drop?: IActionHandler,\r\n    mouseOver?: IActionHandler,\r\n    mouseOut?: IActionHandler\r\n  };\r\n  keys?: {\r\n    [key: number]: IActionHandler\r\n  };\r\n}\r\n\r\nexport class TreeOptions {\r\n  get hasChildrenField(): string { return this.options.hasChildrenField || 'hasChildren'; }\r\n  get childrenField(): string { return this.options.childrenField || 'children'; }\r\n  get displayField(): string { return this.options.displayField || 'name'; }\r\n  get idField(): string { return this.options.idField || 'id'; }\r\n  get isExpandedField(): string { return this.options.isExpandedField || 'isExpanded'; }\r\n  get getChildren(): any { return this.options.getChildren; }\r\n  get levelPadding(): number { return this.options.levelPadding || 0; }\r\n  get useVirtualScroll(): boolean { return this.options.useVirtualScroll; }\r\n  get animateExpand(): boolean { return this.options.animateExpand; }\r\n  get animateSpeed(): number { return this.options.animateSpeed || 1; }\r\n  get animateAcceleration(): number { return this.options.animateAcceleration || 1.2; }\r\n  get scrollOnActivate(): boolean { return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate; }\r\n  get rtl(): boolean { return !!this.options.rtl; }\r\n  get rootId(): any {return this.options.rootId; }\r\n  get useCheckbox(): boolean { return this.options.useCheckbox; }\r\n  get useTriState(): boolean { return this.options.useTriState === undefined ? true : this.options.useTriState; }\r\n  get scrollContainer(): HTMLElement { return this.options.scrollContainer; }\r\n  get allowDragoverStyling(): boolean { return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling; }\r\n  actionMapping: IActionMapping;\r\n\r\n  constructor(private options: ITreeOptions = {}) {\r\n    this.actionMapping = {\r\n      mouse: {\r\n        click: this.options?.actionMapping?.mouse?.click ?? defaultActionMapping.mouse.click,\r\n        dblClick: this.options?.actionMapping?.mouse?.dblClick ?? defaultActionMapping.mouse.dblClick,\r\n        contextMenu: this.options?.actionMapping?.mouse?.contextMenu ?? defaultActionMapping.mouse.contextMenu,\r\n        expanderClick: this.options?.actionMapping?.mouse?.expanderClick ?? defaultActionMapping.mouse.expanderClick,\r\n        checkboxClick: this.options?.actionMapping?.mouse?.checkboxClick ?? defaultActionMapping.mouse.checkboxClick,\r\n        drop: this.options?.actionMapping?.mouse?.drop ?? defaultActionMapping.mouse.drop,\r\n        dragStart: this.options?.actionMapping?.mouse?.dragStart ?? undefined,\r\n        drag: this.options?.actionMapping?.mouse?.drag ?? undefined,\r\n        dragEnd: this.options?.actionMapping?.mouse?.dragEnd ?? undefined,\r\n        dragOver: this.options?.actionMapping?.mouse?.dragOver ?? undefined,\r\n        dragLeave: this.options?.actionMapping?.mouse?.dragLeave ?? undefined,\r\n        dragEnter: this.options?.actionMapping?.mouse?.dragEnter ?? undefined,\r\n        mouseOver: this.options?.actionMapping?.mouse?.mouseOver ?? undefined,\r\n        mouseOut: this.options?.actionMapping?.mouse?.mouseOut ?? undefined,\r\n      },\r\n      keys: {\r\n        [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n        [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n        [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n        [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n        [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n        [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n      }\r\n    }\r\n\r\n    if (this.options?.actionMapping?.keys) {\r\n      this.actionMapping.keys = {\r\n        ...this.actionMapping.keys,\r\n        ...this.options.actionMapping.keys\r\n      }\r\n    }\r\n\r\n    if (options.rtl) {\r\n      this.actionMapping.keys[KEYS.RIGHT] = <IActionHandler>options.actionMapping?.keys[KEYS.RIGHT] || TREE_ACTIONS.DRILL_UP;\r\n      this.actionMapping.keys[KEYS.LEFT] = <IActionHandler>options.actionMapping?.keys[KEYS.LEFT] || TREE_ACTIONS.DRILL_DOWN;\r\n    }\r\n  }\r\n\r\n  getNodeClone(node: TreeNode): any {\r\n    if (this.options.getNodeClone) {\r\n      return this.options.getNodeClone(node);\r\n    }\r\n\r\n    // remove id from clone\r\n    // keeping ie11 compatibility\r\n    const nodeClone = Object.assign({}, node.data);\r\n    if (nodeClone.id) {\r\n      delete nodeClone.id;\r\n    }\r\n    return nodeClone;\r\n  }\r\n\r\n  allowDrop(element, to, $event?): boolean {\r\n    if (this.options.allowDrop instanceof Function) {\r\n      return this.options.allowDrop(element, to, $event);\r\n    }\r\n    else {\r\n      return this.options.allowDrop === undefined ? true : this.options.allowDrop;\r\n    }\r\n  }\r\n\r\n  allowDrag(node: TreeNode): boolean {\r\n    if (this.options.allowDrag instanceof Function) {\r\n      return this.options.allowDrag(node);\r\n    } else {\r\n      return this.options.allowDrag;\r\n    }\r\n  }\r\n\r\n  nodeClass(node: TreeNode): string {\r\n    return this.options.nodeClass ? this.options.nodeClass(node) : '';\r\n  }\r\n\r\n  nodeHeight(node: TreeNode): number {\r\n    if (node.data.virtual) {\r\n      return 0;\r\n    }\r\n\r\n    let nodeHeight = this.options.nodeHeight || 22;\r\n\r\n    if (typeof nodeHeight === 'function') {\r\n      nodeHeight = nodeHeight(node);\r\n    }\r\n\r\n    // account for drop slots:\r\n    return nodeHeight + (node.index === 0 ?  2 : 1) * this.dropSlotHeight;\r\n  }\r\n\r\n  get dropSlotHeight(): number {\r\n    return typeof this.options.dropSlotHeight === 'number' ? this.options.dropSlotHeight : 2;\r\n  }\r\n}\r\n","export const TREE_EVENTS = {\r\n  toggleExpanded: 'toggleExpanded',\r\n  activate: 'activate',\r\n  deactivate: 'deactivate',\r\n  nodeActivate: 'nodeActivate',\r\n  nodeDeactivate: 'nodeDeactivate',\r\n  select: 'select',\r\n  deselect: 'deselect',\r\n  focus: 'focus',\r\n  blur: 'blur',\r\n  initialized: 'initialized',\r\n  updateData: 'updateData',\r\n  moveNode: 'moveNode',\r\n  copyNode: 'copyNode',\r\n  event: 'event',\r\n  loadNodeChildren: 'loadNodeChildren',\r\n  changeFilter: 'changeFilter',\r\n  stateChange: 'stateChange'\r\n};\r\n","import { observable, computed, reaction, autorun, action, IReactionDisposer } from 'mobx';\r\nimport { TreeModel } from './tree.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { ITreeNode } from '../defs/api';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nexport class TreeNode implements ITreeNode {\r\n  private handler: IReactionDisposer;\r\n  @computed get isHidden() { return this.treeModel.isHidden(this); };\r\n  @computed get isExpanded() { return this.treeModel.isExpanded(this); };\r\n  @computed get isActive() { return this.treeModel.isActive(this); };\r\n  @computed get isFocused() { return this.treeModel.isNodeFocused(this); };\r\n  @computed get isSelected() {\r\n    if (this.isSelectable()) {\r\n        return this.treeModel.isSelected(this);\r\n    } else {\r\n      return this.children.some((node: TreeNode) => node.isSelected);\r\n    }\r\n  };\r\n  @computed get isAllSelected() {\r\n    if (this.isSelectable()) {\r\n      return this.treeModel.isSelected(this);\r\n    } else {\r\n      return this.children.every((node: TreeNode) => node.isAllSelected);\r\n    }\r\n  };\r\n  @computed get isPartiallySelected() {\r\n    return this.isSelected && !this.isAllSelected;\r\n  }\r\n\r\n  @observable children: TreeNode[];\r\n  @observable index: number;\r\n  @observable position = 0;\r\n  @observable height: number;\r\n  @computed get level(): number {\r\n    return this.parent ? this.parent.level + 1 : 0;\r\n  }\r\n  @computed get path(): string[] {\r\n    return this.parent ? [...this.parent.path, this.id] : [];\r\n  }\r\n\r\n  get elementRef(): any {\r\n    throw `Element Ref is no longer supported since introducing virtual scroll\\n\r\n      You may use a template to obtain a reference to the element`;\r\n  }\r\n\r\n  private _originalNode: any;\r\n  get originalNode() { return this._originalNode; };\r\n\r\n  constructor(public data: any, public parent: TreeNode, public treeModel: TreeModel, index: number) {\r\n    if (this.id === undefined || this.id === null) {\r\n      this.id = uuid();\r\n    } // Make sure there's a unique id without overriding existing ids to work with immutable data structures\r\n    this.index = index;\r\n\r\n    if (this.getField('children')) {\r\n      this._initChildren();\r\n    }\r\n    this.autoLoadChildren();\r\n  }\r\n\r\n  // helper get functions:\r\n  get hasChildren(): boolean {\r\n    return !!(this.getField('hasChildren') || (this.children && this.children.length > 0));\r\n  }\r\n  get isCollapsed(): boolean { return !this.isExpanded; }\r\n  get isLeaf(): boolean { return !this.hasChildren; }\r\n  get isRoot(): boolean { return this.parent.data.virtual; }\r\n  get realParent(): TreeNode { return this.isRoot ? null : this.parent; }\r\n\r\n  // proxy functions:\r\n  get options(): TreeOptions { return this.treeModel.options; }\r\n  fireEvent(event) { this.treeModel.fireEvent(event); }\r\n\r\n  // field accessors:\r\n  get displayField() {\r\n    return this.getField('display');\r\n  }\r\n\r\n  get id() {\r\n    return this.getField('id');\r\n  }\r\n\r\n  set id(value) {\r\n    this.setField('id', value);\r\n  }\r\n\r\n  getField(key) {\r\n    return this.data[this.options[`${key}Field`]];\r\n  }\r\n\r\n  setField(key, value) {\r\n    this.data[this.options[`${key}Field`]] = value;\r\n  }\r\n\r\n  // traversing:\r\n  _findAdjacentSibling(steps, skipHidden = false) {\r\n    const siblings = this._getParentsChildren(skipHidden);\r\n    const index = siblings.indexOf(this);\r\n\r\n    return siblings.length > index + steps ? siblings[index + steps] : null;\r\n  }\r\n\r\n  findNextSibling(skipHidden = false) {\r\n    return this._findAdjacentSibling(+1, skipHidden);\r\n  }\r\n\r\n  findPreviousSibling(skipHidden = false) {\r\n    return this._findAdjacentSibling(-1, skipHidden);\r\n  }\r\n\r\n  getVisibleChildren() {\r\n    return this.visibleChildren;\r\n  }\r\n\r\n  @computed get visibleChildren() {\r\n    return (this.children || []).filter((node) => !node.isHidden);\r\n  }\r\n\r\n  getFirstChild(skipHidden = false) {\r\n    let children = skipHidden ? this.visibleChildren : this.children;\r\n\r\n    return children != null && children.length ? children[0] : null;\r\n  }\r\n\r\n  getLastChild(skipHidden = false) {\r\n    let children = skipHidden ? this.visibleChildren : this.children;\r\n\r\n    return children != null && children.length ? children[children.length - 1] : null;\r\n  }\r\n\r\n  findNextNode(goInside = true, skipHidden = false) {\r\n    return goInside && this.isExpanded && this.getFirstChild(skipHidden) ||\r\n           this.findNextSibling(skipHidden) ||\r\n           this.parent && this.parent.findNextNode(false, skipHidden);\r\n  }\r\n\r\n  findPreviousNode(skipHidden = false) {\r\n    let previousSibling = this.findPreviousSibling(skipHidden);\r\n    if (!previousSibling) {\r\n      return this.realParent;\r\n    }\r\n    return previousSibling._getLastOpenDescendant(skipHidden);\r\n  }\r\n\r\n  _getLastOpenDescendant(skipHidden = false) {\r\n    const lastChild = this.getLastChild(skipHidden);\r\n    return (this.isCollapsed || !lastChild)\r\n      ? this\r\n      : lastChild._getLastOpenDescendant(skipHidden);\r\n  }\r\n\r\n  private _getParentsChildren(skipHidden = false): any[] {\r\n    const children = this.parent &&\r\n      (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);\r\n\r\n    return children || [];\r\n  }\r\n\r\n  private getIndexInParent(skipHidden = false) {\r\n    return this._getParentsChildren(skipHidden).indexOf(this);\r\n  }\r\n\r\n  isDescendantOf(node: TreeNode) {\r\n    if (this === node) return true;\r\n    else return this.parent && this.parent.isDescendantOf(node);\r\n  }\r\n\r\n  getNodePadding(): string {\r\n    return this.options.levelPadding * (this.level - 1) + 'px';\r\n  }\r\n\r\n  getClass(): string {\r\n    return [this.options.nodeClass(this), `tree-node-level-${ this.level }`].join(' ');\r\n  }\r\n\r\n  onDrop($event) {\r\n    this.mouseAction('drop', $event.event, {\r\n      from: $event.element,\r\n      to: { parent: this, index: 0, dropOnNode: true }\r\n    });\r\n  }\r\n\r\n  allowDrop = (element, $event?) => {\r\n    return this.options.allowDrop(element, { parent: this, index: 0 }, $event);\r\n  }\r\n\r\n  allowDragoverStyling = () => {\r\n    return this.options.allowDragoverStyling;\r\n  }\r\n\r\n  allowDrag() {\r\n    return this.options.allowDrag(this);\r\n  }\r\n\r\n\r\n  // helper methods:\r\n  loadNodeChildren() {\r\n    if (!this.options.getChildren) {\r\n      return Promise.resolve(); // Not getChildren method - for using redux\r\n    }\r\n    return Promise.resolve(this.options.getChildren(this))\r\n      .then((children) => {\r\n        if (children) {\r\n          this.setField('children', children);\r\n          this._initChildren();\r\n          if (this.options.useTriState && this.treeModel.isSelected(this)) {\r\n            this.setIsSelected(true);\r\n          }\r\n          this.children.forEach((child) => {\r\n            if (child.getField('isExpanded') && child.hasChildren) {\r\n              child.expand();\r\n            }\r\n          });\r\n      }}).then(() => {\r\n        this.fireEvent({\r\n          eventName: TREE_EVENTS.loadNodeChildren,\r\n          node: this\r\n        });\r\n      });\r\n  }\r\n\r\n  expand() {\r\n    if (!this.isExpanded) {\r\n      this.toggleExpanded();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  collapse() {\r\n    if (this.isExpanded) {\r\n      this.toggleExpanded();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  doForAll(fn: (node: ITreeNode) => any) {\r\n    Promise.resolve(fn(this)).then(() => {\r\n      if (this.children) {\r\n        this.children.forEach((child) => child.doForAll(fn));\r\n      }\r\n    });\r\n  }\r\n\r\n  expandAll() {\r\n    this.doForAll((node) => node.expand());\r\n  }\r\n\r\n  collapseAll() {\r\n    this.doForAll((node) => node.collapse());\r\n  }\r\n\r\n  ensureVisible() {\r\n    if (this.realParent) {\r\n      this.realParent.expand();\r\n      this.realParent.ensureVisible();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleExpanded() {\r\n    this.setIsExpanded(!this.isExpanded);\r\n\r\n    return this;\r\n  }\r\n\r\n  setIsExpanded(value) {\r\n    if (this.hasChildren) {\r\n      this.treeModel.setExpandedNode(this, value);\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  autoLoadChildren() {\r\n    this.handler =\r\n      reaction(\r\n        () => this.isExpanded,\r\n        (isExpanded) => {\r\n          if (!this.children && this.hasChildren && isExpanded) {\r\n            this.loadNodeChildren();\r\n          }\r\n        },\r\n        { fireImmediately: true }\r\n      );\r\n  }\r\n\r\n  dispose() {\r\n    if (this.children) {\r\n      this.children.forEach((child) => child.dispose());\r\n    }\r\n    if (this.handler) {\r\n      this.handler();\r\n    }\r\n    this.parent = null;\r\n    this.children = null;\r\n  }\r\n\r\n  setIsActive(value, multi = false) {\r\n    this.treeModel.setActiveNode(this, value, multi);\r\n    if (value) {\r\n      this.focus(this.options.scrollOnActivate);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  isSelectable() {\r\n    return this.isLeaf || !this.children || !this.options.useTriState;\r\n  }\r\n\r\n  @action setIsSelected(value) {\r\n    if (this.isSelectable()) {\r\n      this.treeModel.setSelectedNode(this, value);\r\n    } else {\r\n      this.visibleChildren.forEach((child) => child.setIsSelected(value));\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleSelected() {\r\n    this.setIsSelected(!this.isSelected);\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleActivated(multi = false) {\r\n    this.setIsActive(!this.isActive, multi);\r\n\r\n    return this;\r\n  }\r\n\r\n  setActiveAndVisible(multi = false) {\r\n    this.setIsActive(true, multi)\r\n      .ensureVisible();\r\n\r\n    setTimeout(this.scrollIntoView.bind(this));\r\n\r\n    return this;\r\n  }\r\n\r\n  scrollIntoView(force = false) {\r\n    this.treeModel.virtualScroll.scrollIntoView(this, force);\r\n  }\r\n\r\n  focus(scroll = true) {\r\n    let previousNode = this.treeModel.getFocusedNode();\r\n    this.treeModel.setFocusedNode(this);\r\n    if (scroll) {\r\n      this.scrollIntoView();\r\n    }\r\n    if (previousNode) {\r\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: previousNode });\r\n    }\r\n    this.fireEvent({ eventName: TREE_EVENTS.focus, node: this });\r\n\r\n    return this;\r\n  }\r\n\r\n  blur() {\r\n    let previousNode = this.treeModel.getFocusedNode();\r\n    this.treeModel.setFocusedNode(null);\r\n    if (previousNode) {\r\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: this });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  setIsHidden(value) {\r\n    this.treeModel.setIsHidden(this, value);\r\n  }\r\n\r\n  hide() {\r\n    this.setIsHidden(true);\r\n  }\r\n\r\n  show() {\r\n    this.setIsHidden(false);\r\n  }\r\n\r\n  mouseAction(actionName: string, $event, data: any = null) {\r\n    this.treeModel.setFocus(true);\r\n\r\n    const actionMapping = this.options.actionMapping.mouse;\r\n    const mouseAction = actionMapping[actionName];\r\n\r\n    if (mouseAction) {\r\n      mouseAction(this.treeModel, this, $event, data);\r\n    }\r\n  }\r\n\r\n  getSelfHeight() {\r\n    return this.options.nodeHeight(this);\r\n  }\r\n\r\n  @action _initChildren() {\r\n    this.children = this.getField('children')\r\n      .map((c, index) => new TreeNode(c, this, this.treeModel, index));\r\n  }\r\n}\r\n\r\nfunction uuid() {\r\n  return Math.floor(Math.random() * 10000000000000);\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { observable, computed, action, autorun } from 'mobx';\r\nimport { Subscription } from 'rxjs';\r\nimport { TreeNode } from './tree-node.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { TreeVirtualScroll } from './tree-virtual-scroll.model';\r\nimport { ITreeModel, IDType, IDTypeDictionary } from '../defs/api';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\n@Injectable()\r\nexport class TreeModel implements ITreeModel, OnDestroy {\r\n  static focusedTree = null;\r\n\r\n  options: TreeOptions = new TreeOptions();\r\n  nodes: any[];\r\n  eventNames = Object.keys(TREE_EVENTS);\r\n  virtualScroll: TreeVirtualScroll;\r\n\r\n  @observable roots: TreeNode[];\r\n  @observable expandedNodeIds: IDTypeDictionary = {};\r\n  @observable selectedLeafNodeIds: IDTypeDictionary = {};\r\n  @observable activeNodeIds: IDTypeDictionary = {};\r\n  @observable hiddenNodeIds: IDTypeDictionary = {};\r\n  @observable focusedNodeId: IDType = null;\r\n  @observable virtualRoot: TreeNode;\r\n\r\n  private firstUpdate = true;\r\n  private events: any;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  // events\r\n  fireEvent(event) {\r\n    event.treeModel = this;\r\n    this.events[event.eventName].emit(event);\r\n    this.events.event.emit(event);\r\n  }\r\n\r\n  subscribe(eventName, fn) {\r\n    const subscription = this.events[eventName].subscribe(fn);\r\n    this.subscriptions.push(subscription);\r\n  }\r\n\r\n\r\n  // getters\r\n  getFocusedNode(): TreeNode {\r\n    return this.focusedNode;\r\n  }\r\n\r\n\r\n  getActiveNode(): TreeNode {\r\n    return this.activeNodes[0];\r\n  }\r\n\r\n  getActiveNodes(): TreeNode[] {\r\n    return this.activeNodes;\r\n  }\r\n\r\n  getVisibleRoots() {\r\n    return this.virtualRoot.visibleChildren;\r\n  }\r\n\r\n  getFirstRoot(skipHidden = false) {\r\n    const root = skipHidden ? this.getVisibleRoots() : this.roots;\r\n    return root != null && root.length ? root[0] : null;\r\n  }\r\n\r\n  getLastRoot(skipHidden = false) {\r\n    const root = skipHidden ? this.getVisibleRoots() : this.roots;\r\n    return root != null && root.length ? root[root.length - 1] : null;\r\n  }\r\n\r\n  get isFocused() {\r\n    return TreeModel.focusedTree === this;\r\n  }\r\n\r\n  isNodeFocused(node) {\r\n    return this.focusedNode === node;\r\n  }\r\n\r\n  isEmptyTree(): boolean {\r\n    return this.roots && this.roots.length === 0;\r\n  }\r\n\r\n  @computed get focusedNode() {\r\n    return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;\r\n  }\r\n\r\n  @computed get expandedNodes() {\r\n    const nodes = Object.keys(this.expandedNodeIds)\r\n      .filter((id) => this.expandedNodeIds[id])\r\n      .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get activeNodes() {\r\n    const nodes = Object.keys(this.activeNodeIds)\r\n      .filter((id) => this.activeNodeIds[id])\r\n      .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get hiddenNodes() {\r\n    const nodes = Object.keys(this.hiddenNodeIds)\r\n        .filter((id) => this.hiddenNodeIds[id])\r\n        .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get selectedLeafNodes() {\r\n    const nodes = Object.keys(this.selectedLeafNodeIds)\r\n        .filter((id) => this.selectedLeafNodeIds[id])\r\n        .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  // locating nodes\r\n  getNodeByPath(path: any[], startNode= null): TreeNode {\r\n    if (!path) return null;\r\n\r\n    startNode = startNode || this.virtualRoot;\r\n    if (path.length === 0) return startNode;\r\n\r\n    if (!startNode.children) return null;\r\n\r\n    const childId = path.shift();\r\n    const childNode = startNode.children.find(c => c.id === childId);\r\n\r\n    if (!childNode) return null;\r\n\r\n    return this.getNodeByPath(path, childNode);\r\n  }\r\n\r\n  getNodeById(id) {\r\n    const idStr = id.toString();\r\n\r\n    return this.getNodeBy((node) => node.id.toString() === idStr);\r\n  }\r\n\r\n  getNodeBy(predicate, startNode = null) {\r\n    startNode = startNode || this.virtualRoot;\r\n\r\n    if (!startNode.children) return null;\r\n\r\n    const found = startNode.children.find(predicate);\r\n\r\n    if (found) { // found in children\r\n      return found;\r\n    } else { // look in children's children\r\n      for (let child of startNode.children) {\r\n        const foundInChildren = this.getNodeBy(predicate, child);\r\n        if (foundInChildren) return foundInChildren;\r\n      }\r\n    }\r\n  }\r\n\r\n  isExpanded(node) {\r\n    return this.expandedNodeIds[node.id];\r\n  }\r\n\r\n  isHidden(node) {\r\n    return this.hiddenNodeIds[node.id];\r\n  }\r\n\r\n  isActive(node) {\r\n    return this.activeNodeIds[node.id];\r\n  }\r\n\r\n  isSelected(node) {\r\n    return this.selectedLeafNodeIds[node.id];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n    this.unsubscribeAll();\r\n  }\r\n\r\n  dispose() {\r\n    // Dispose reactions of the replaced nodes\r\n    if (this.virtualRoot) {\r\n      this.virtualRoot.dispose();\r\n    }\r\n  }\r\n\r\n  unsubscribeAll() {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  // actions\r\n  @action setData({ nodes, options = null, events = null }: {nodes: any, options: any, events: any}) {\r\n    if (options) {\r\n      this.options = new TreeOptions(options);\r\n    }\r\n    if (events) {\r\n      this.events = events;\r\n    }\r\n    if (nodes) {\r\n      this.nodes = nodes;\r\n    }\r\n\r\n    this.update();\r\n  }\r\n\r\n  @action update() {\r\n    // Rebuild tree:\r\n    let virtualRootConfig = {\r\n      id: this.options.rootId,\r\n      virtual: true,\r\n      [this.options.childrenField]: this.nodes\r\n    };\r\n\r\n    this.dispose();\r\n\r\n    this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);\r\n\r\n    this.roots = this.virtualRoot.children;\r\n\r\n    // Fire event:\r\n    if (this.firstUpdate) {\r\n      if (this.roots) {\r\n        this.firstUpdate = false;\r\n        this._calculateExpandedNodes();\r\n      }\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.updateData });\r\n    }\r\n  }\r\n\r\n\r\n  @action setFocusedNode(node) {\r\n    this.focusedNodeId = node ? node.id : null;\r\n  }\r\n\r\n  @action setFocus(value) {\r\n    TreeModel.focusedTree = value ? this : null;\r\n  }\r\n\r\n  @action doForAll(fn) {\r\n    this.roots.forEach((root) => root.doForAll(fn));\r\n  }\r\n\r\n  @action focusNextNode() {\r\n    let previousNode = this.getFocusedNode();\r\n    let nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);\r\n    if (nextNode) nextNode.focus();\r\n  }\r\n\r\n  @action focusPreviousNode() {\r\n    let previousNode = this.getFocusedNode();\r\n    let nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);\r\n    if (nextNode) nextNode.focus();\r\n  }\r\n\r\n  @action focusDrillDown() {\r\n    let previousNode = this.getFocusedNode();\r\n    if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {\r\n      previousNode.toggleExpanded();\r\n    }\r\n    else {\r\n      let nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);\r\n      if (nextNode) nextNode.focus();\r\n    }\r\n  }\r\n\r\n  @action focusDrillUp() {\r\n    let previousNode = this.getFocusedNode();\r\n    if (!previousNode) return;\r\n    if (previousNode.isExpanded) {\r\n      previousNode.toggleExpanded();\r\n    }\r\n    else {\r\n      let nextNode = previousNode.realParent;\r\n      if (nextNode) nextNode.focus();\r\n    }\r\n  }\r\n\r\n  @action setActiveNode(node, value, multi = false) {\r\n    if (multi) {\r\n      this._setActiveNodeMulti(node, value);\r\n    }\r\n    else {\r\n      this._setActiveNodeSingle(node, value);\r\n    }\r\n\r\n    if (value) {\r\n      node.focus(this.options.scrollOnActivate);\r\n      this.fireEvent({ eventName: TREE_EVENTS.activate, node });\r\n      this.fireEvent({ eventName: TREE_EVENTS.nodeActivate, node }); // For IE11\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.deactivate, node });\r\n      this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node }); // For IE11\r\n    }\r\n  }\r\n\r\n  @action setSelectedNode(node, value) {\r\n    this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, {[node.id]: value});\r\n\r\n    if (value) {\r\n      node.focus();\r\n      this.fireEvent({ eventName: TREE_EVENTS.select, node });\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.deselect, node });\r\n    }\r\n  }\r\n\r\n  @action setExpandedNode(node, value) {\r\n    this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[node.id]: value});\r\n    this.fireEvent({ eventName: TREE_EVENTS.toggleExpanded, node, isExpanded: value });\r\n  }\r\n\r\n  @action expandAll() {\r\n    this.roots.forEach((root) => root.expandAll());\r\n  }\r\n\r\n  @action collapseAll() {\r\n    this.roots.forEach((root) => root.collapseAll());\r\n  }\r\n\r\n  @action setIsHidden(node, value) {\r\n    this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, {[node.id]: value});\r\n  }\r\n\r\n  @action setHiddenNodeIds(nodeIds) {\r\n    this.hiddenNodeIds = nodeIds.reduce((hiddenNodeIds, id) => Object.assign(hiddenNodeIds, {\r\n      [id]: true\r\n    }), {});\r\n  }\r\n\r\n  performKeyAction(node, $event) {\r\n    const keyAction = this.options.actionMapping.keys[$event.keyCode];\r\n    if (keyAction) {\r\n      $event.preventDefault();\r\n      keyAction(this, node, $event);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  @action filterNodes(filter, autoShow = true) {\r\n    let filterFn;\r\n\r\n    if (!filter) {\r\n      return this.clearFilter();\r\n    }\r\n\r\n    // support function and string filter\r\n    if (filter && typeof filter.valueOf() === 'string') {\r\n      filterFn = (node) => node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\r\n    }\r\n    else if (filter && typeof filter === 'function') {\r\n       filterFn = filter;\r\n    }\r\n    else {\r\n      console.error('Don\\'t know what to do with filter', filter);\r\n      console.error('Should be either a string or function');\r\n      return;\r\n    }\r\n\r\n    const ids = {};\r\n    this.roots.forEach((node) => this._filterNode(ids, node, filterFn, autoShow));\r\n    this.hiddenNodeIds = ids;\r\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n  }\r\n\r\n  @action clearFilter() {\r\n    this.hiddenNodeIds = {};\r\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n  }\r\n\r\n  @action moveNode(node, to) {\r\n    const fromIndex = node.getIndexInParent();\r\n    const fromParent = node.parent;\r\n\r\n    if (!this.canMoveNode(node, to, fromIndex)) return;\r\n\r\n    const fromChildren = fromParent.getField('children');\r\n\r\n    // If node doesn't have children - create children array\r\n    if (!to.parent.getField('children')) {\r\n      to.parent.setField('children', []);\r\n    }\r\n    const toChildren = to.parent.getField('children');\r\n\r\n    const originalNode = fromChildren.splice(fromIndex, 1)[0];\r\n\r\n    // Compensate for index if already removed from parent:\r\n    let toIndex = (fromParent === to.parent && to.index > fromIndex) ? to.index - 1 : to.index;\r\n\r\n    toChildren.splice(toIndex, 0, originalNode);\r\n\r\n    fromParent.treeModel.update();\r\n    if (to.parent.treeModel !== fromParent.treeModel) {\r\n      to.parent.treeModel.update();\r\n    }\r\n\r\n    this.fireEvent({\r\n      eventName: TREE_EVENTS.moveNode,\r\n      node: originalNode,\r\n      to: { parent: to.parent.data, index: toIndex },\r\n      from: { parent: fromParent.data, index: fromIndex}\r\n    });\r\n  }\r\n\r\n  @action copyNode(node, to) {\r\n    const fromIndex = node.getIndexInParent();\r\n\r\n    if (!this.canMoveNode(node, to, fromIndex)) return;\r\n\r\n    // If node doesn't have children - create children array\r\n    if (!to.parent.getField('children')) {\r\n      to.parent.setField('children', []);\r\n    }\r\n    const toChildren = to.parent.getField('children');\r\n\r\n    const nodeCopy = this.options.getNodeClone(node);\r\n\r\n    toChildren.splice(to.index, 0, nodeCopy);\r\n\r\n    node.treeModel.update();\r\n    if (to.parent.treeModel !== node.treeModel) {\r\n      to.parent.treeModel.update();\r\n    }\r\n\r\n    this.fireEvent({ eventName: TREE_EVENTS.copyNode, node: nodeCopy, to: { parent: to.parent.data, index: to.index } });\r\n  }\r\n\r\n  getState() {\r\n    return {\r\n      expandedNodeIds: this.expandedNodeIds,\r\n      selectedLeafNodeIds: this.selectedLeafNodeIds,\r\n      activeNodeIds: this.activeNodeIds,\r\n      hiddenNodeIds: this.hiddenNodeIds,\r\n      focusedNodeId: this.focusedNodeId\r\n    };\r\n  }\r\n\r\n  @action setState(state) {\r\n    if (!state) return;\r\n\r\n    Object.assign(this, {\r\n      expandedNodeIds: state.expandedNodeIds || {},\r\n      selectedLeafNodeIds: state.selectedLeafNodeIds || {},\r\n      activeNodeIds: state.activeNodeIds || {},\r\n      hiddenNodeIds: state.hiddenNodeIds || {},\r\n      focusedNodeId: state.focusedNodeId\r\n    });\r\n  }\r\n\r\n  subscribeToState(fn) {\r\n    autorun(() => fn(this.getState()));\r\n  }\r\n\r\n  canMoveNode(node, to, fromIndex = undefined) {\r\n    const fromNodeIndex = fromIndex || node.getIndexInParent();\r\n\r\n    // same node:\r\n    if (node.parent === to.parent && fromIndex === to.index) {\r\n      return false;\r\n    }\r\n\r\n    return !to.parent.isDescendantOf(node);\r\n  }\r\n\r\n  calculateExpandedNodes() {\r\n      this._calculateExpandedNodes();\r\n  }\r\n\r\n  // private methods\r\n  private _filterNode(ids, node, filterFn, autoShow) {\r\n    // if node passes function then it's visible\r\n    let isVisible = filterFn(node);\r\n\r\n    if (node.children) {\r\n      // if one of node's children passes filter then this node is also visible\r\n      node.children.forEach((child) => {\r\n        if (this._filterNode(ids, child, filterFn, autoShow)) {\r\n          isVisible = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    // mark node as hidden\r\n    if (!isVisible) {\r\n      ids[node.id] = true;\r\n    }\r\n    // auto expand parents to make sure the filtered nodes are visible\r\n    if (autoShow && isVisible) {\r\n      node.ensureVisible();\r\n    }\r\n    return isVisible;\r\n  }\r\n\r\n  private _calculateExpandedNodes(startNode = null) {\r\n    startNode = startNode || this.virtualRoot;\r\n\r\n    if (startNode.data[this.options.isExpandedField]) {\r\n      this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[startNode.id]: true});\r\n    }\r\n    if (startNode.children) {\r\n      startNode.children.forEach((child) => this._calculateExpandedNodes(child));\r\n    }\r\n  }\r\n\r\n  private _setActiveNodeSingle(node, value) {\r\n    // Deactivate all other nodes:\r\n    this.activeNodes\r\n      .filter((activeNode) => activeNode !== node)\r\n      .forEach((activeNode) => {\r\n        this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: activeNode });\r\n        this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: activeNode }); // For IE11\r\n      });\r\n\r\n    if (value) {\r\n      this.activeNodeIds = {[node.id]: true};\r\n    }\r\n    else {\r\n      this.activeNodeIds = {};\r\n    }\r\n  }\r\n\r\n  private _setActiveNodeMulti(node, value) {\r\n    this.activeNodeIds = Object.assign({}, this.activeNodeIds, {[node.id]: value});\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TreeDraggedElement {\r\n  _draggedElement: any = null;\r\n\r\n  set(draggedElement: any) {\r\n    this._draggedElement = draggedElement;\r\n  }\r\n\r\n  get(): any {\r\n    return this._draggedElement;\r\n  }\r\n\r\n  isDragging() {\r\n    return !!this.get();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { observable, computed, action, autorun, reaction } from 'mobx';\r\nimport { TreeModel } from './tree.model';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nconst Y_OFFSET = 500; // Extra pixels outside the viewport, in each direction, to render nodes in\r\nconst Y_EPSILON = 150; // Minimum pixel change required to recalculate the rendered nodes\r\n\r\n@Injectable()\r\nexport class TreeVirtualScroll {\r\n  private _dispose: any;\r\n\r\n  @observable yBlocks = 0;\r\n  @observable x = 0;\r\n  @observable viewportHeight = null;\r\n  viewport = null;\r\n\r\n  @computed get y() {\r\n    return this.yBlocks * Y_EPSILON;\r\n  }\r\n\r\n  @computed get totalHeight() {\r\n    return this.treeModel.virtualRoot ? this.treeModel.virtualRoot.height : 0;\r\n  }\r\n\r\n  constructor(private treeModel: TreeModel) {\r\n    treeModel.virtualScroll = this;\r\n    this._dispose = [autorun(() => this.fixScroll())];\r\n  }\r\n\r\n  fireEvent(event) {\r\n    this.treeModel.fireEvent(event);\r\n  }\r\n\r\n  init() {\r\n    const fn = this.recalcPositions.bind(this);\r\n\r\n    fn();\r\n    this._dispose = [\r\n      ...this._dispose,\r\n      reaction(() => this.treeModel.roots, fn),\r\n      reaction(() => this.treeModel.expandedNodeIds, fn),\r\n      reaction(() => this.treeModel.hiddenNodeIds, fn)\r\n    ];\r\n    this.treeModel.subscribe(TREE_EVENTS.loadNodeChildren, fn);\r\n  }\r\n\r\n  isEnabled() {\r\n    return this.treeModel.options.useVirtualScroll;\r\n  }\r\n\r\n  @action private _setYBlocks(value) {\r\n    this.yBlocks = value;\r\n  }\r\n\r\n  @action recalcPositions() {\r\n    this.treeModel.virtualRoot.height = this._getPositionAfter(this.treeModel.getVisibleRoots(), 0);\r\n  }\r\n\r\n  private _getPositionAfter(nodes, startPos) {\r\n    let position = startPos;\r\n\r\n    nodes.forEach((node) => {\r\n      node.position = position;\r\n      position = this._getPositionAfterNode(node, position);\r\n    });\r\n    return position;\r\n  }\r\n\r\n  private _getPositionAfterNode(node, startPos) {\r\n    let position = node.getSelfHeight() + startPos;\r\n\r\n    if (node.children && node.isExpanded) { // TBD: consider loading component as well\r\n      position = this._getPositionAfter(node.visibleChildren, position);\r\n    }\r\n    node.height = position - startPos;\r\n    return position;\r\n  }\r\n\r\n\r\n  clear() {\r\n    this._dispose.forEach((d) => d());\r\n  }\r\n\r\n  @action setViewport(viewport) {\r\n    Object.assign(this, {\r\n      viewport,\r\n      x: viewport.scrollLeft,\r\n      yBlocks: Math.round(viewport.scrollTop / Y_EPSILON),\r\n      viewportHeight: viewport.getBoundingClientRect ? viewport.getBoundingClientRect().height : 0\r\n    });\r\n  }\r\n\r\n  @action scrollIntoView(node, force, scrollToMiddle = true) {\r\n    if (node.options.scrollContainer) {\r\n      const scrollContainer = node.options.scrollContainer;\r\n      const scrollContainerHeight = scrollContainer.getBoundingClientRect().height;\r\n      const scrollContainerTop = scrollContainer.getBoundingClientRect().top;\r\n      const nodeTop = this.viewport.getBoundingClientRect().top + node.position - scrollContainerTop;\r\n\r\n      if (force || // force scroll to node\r\n        nodeTop < scrollContainer.scrollTop || // node is above scroll container\r\n        nodeTop + node.getSelfHeight() > scrollContainer.scrollTop + scrollContainerHeight) { // node is below container\r\n        scrollContainer.scrollTop = scrollToMiddle ?\r\n          nodeTop - scrollContainerHeight / 2 : // scroll to middle\r\n          nodeTop; // scroll to start\r\n      }\r\n    } else {\r\n      if (force || // force scroll to node\r\n        node.position < this.y || // node is above viewport\r\n        node.position + node.getSelfHeight() > this.y + this.viewportHeight) { // node is below viewport\r\n        if (this.viewport) {\r\n          this.viewport.scrollTop = scrollToMiddle ?\r\n          node.position - this.viewportHeight / 2 : // scroll to middle\r\n          node.position; // scroll to start\r\n\r\n          this._setYBlocks(Math.floor(this.viewport.scrollTop / Y_EPSILON));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getViewportNodes(nodes) {\r\n    if (!nodes) return [];\r\n\r\n    const visibleNodes = nodes.filter((node) => !node.isHidden);\r\n\r\n    if (!this.isEnabled()) return visibleNodes;\r\n\r\n    if (!this.viewportHeight || !visibleNodes.length) return [];\r\n\r\n    // When loading children async this method is called before their height and position is calculated.\r\n    // In that case firstIndex === 0 and lastIndex === visibleNodes.length - 1 (e.g. 1000),\r\n    // which means that it loops through every visibleNodes item and push them into viewportNodes array.\r\n    // We can prevent nodes from being pushed to the array and wait for the appropriate calculations to take place\r\n    const lastVisibleNode = visibleNodes.slice(-1)[0]\r\n    if (!lastVisibleNode.height && lastVisibleNode.position === 0) return [];\r\n\r\n    // Search for first node in the viewport using binary search\r\n    // Look for first node that starts after the beginning of the viewport (with buffer)\r\n    // Or that ends after the beginning of the viewport\r\n    const firstIndex = binarySearch(visibleNodes, (node) => {\r\n      return (node.position + Y_OFFSET > this.y) ||\r\n             (node.position + node.height > this.y);\r\n    });\r\n\r\n    // Search for last node in the viewport using binary search\r\n    // Look for first node that starts after the end of the viewport (with buffer)\r\n    const lastIndex = binarySearch(visibleNodes, (node) => {\r\n      return node.position - Y_OFFSET > this.y + this.viewportHeight;\r\n    }, firstIndex);\r\n\r\n    const viewportNodes = [];\r\n\r\n    for (let i = firstIndex; i <= lastIndex; i++) {\r\n      viewportNodes.push(visibleNodes[i]);\r\n    }\r\n\r\n    return viewportNodes;\r\n  }\r\n\r\n  fixScroll() {\r\n    const maxY = Math.max(0, this.totalHeight - this.viewportHeight);\r\n\r\n    if (this.y < 0) this._setYBlocks(0);\r\n    if (this.y > maxY) this._setYBlocks(maxY / Y_EPSILON);\r\n  }\r\n}\r\n\r\nfunction binarySearch(nodes, condition, firstIndex = 0) {\r\n  let index = firstIndex;\r\n  let toIndex = nodes.length - 1;\r\n\r\n  while (index !== toIndex) {\r\n    let midIndex = Math.floor((index + toIndex) / 2);\r\n\r\n    if (condition(nodes[midIndex])) {\r\n      toIndex = midIndex;\r\n    }\r\n    else {\r\n      if (index === midIndex) index = toIndex;\r\n      else index = midIndex;\r\n    }\r\n  }\r\n  return index;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  TemplateRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  encapsulation: ViewEncapsulation.None,\r\n  selector: 'tree-loading-component',\r\n  template: `\r\n    <span *ngIf=\"!template\">loading...</span>\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"template\"\r\n      [ngTemplateOutletContext]=\"{ $implicit: node }\"\r\n    >\r\n    </ng-container>\r\n  `\r\n})\r\nexport class LoadingComponent {\r\n  @Input() template: TemplateRef<any>;\r\n  @Input() node: TreeNode;\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  AfterViewInit,\r\n  OnInit,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\n@Component({\r\n  selector: 'tree-viewport',\r\n  styles: [],\r\n  providers: [TreeVirtualScroll],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.height]=\"getTotalHeight()\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeViewportComponent implements AfterViewInit, OnInit, OnDestroy {\r\n  setViewport = this.throttle(() => {\r\n    this.virtualScroll.setViewport(this.elementRef.nativeElement);\r\n  }, 17);\r\n\r\n  private readonly scrollEventHandler: ($event: Event) => void;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    public virtualScroll: TreeVirtualScroll\r\n  ) {\r\n    this.scrollEventHandler = this.setViewport.bind(this);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.virtualScroll.init();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.setViewport();\r\n      this.virtualScroll.fireEvent({ eventName: TREE_EVENTS.initialized });\r\n    });\r\n    let el: HTMLElement = this.elementRef.nativeElement;\r\n    el.addEventListener('scroll', this.scrollEventHandler);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.virtualScroll.clear();\r\n    let el: HTMLElement = this.elementRef.nativeElement;\r\n    el.removeEventListener('scroll', this.scrollEventHandler);\r\n  }\r\n\r\n  getTotalHeight() {\r\n    return (\r\n      (this.virtualScroll.isEnabled() &&\r\n        this.virtualScroll.totalHeight + 'px') ||\r\n      'auto'\r\n    );\r\n  }\r\n\r\n  private throttle(func, timeFrame) {\r\n    let lastTime = 0;\r\n    return function () {\r\n      let now = Date.now();\r\n      if (now - lastTime >= timeFrame) {\r\n        func();\r\n        lastTime = now;\r\n      }\r\n    };\r\n  }\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\n\r\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\nconst DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';\r\n\r\n@Directive({\r\n  selector: '[treeDrop]'\r\n})\r\nexport class TreeDropDirective implements AfterViewInit, OnDestroy {\r\n  @Input() allowDragoverStyling = true;\r\n  @Output('treeDrop') onDropCallback = new EventEmitter();\r\n  @Output('treeDropDragOver') onDragOverCallback = new EventEmitter();\r\n  @Output('treeDropDragLeave') onDragLeaveCallback = new EventEmitter();\r\n  @Output('treeDropDragEnter') onDragEnterCallback = new EventEmitter();\r\n  private readonly dragOverEventHandler: (ev: DragEvent) => void;\r\n  private readonly dragEnterEventHandler: (ev: DragEvent) => void;\r\n  private readonly dragLeaveEventHandler: (ev: DragEvent) => void;\r\n\r\n  private _allowDrop = (element, $event) => true;\r\n\r\n  @Input() set treeAllowDrop(allowDrop) {\r\n    if (allowDrop instanceof Function) {\r\n      this._allowDrop = allowDrop;\r\n    }\r\n    else this._allowDrop = (element, $event) => allowDrop;\r\n  }\r\n\r\n  allowDrop($event) {\r\n    return this._allowDrop(this.treeDraggedElement.get(), $event);\r\n  }\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\r\n    this.dragOverEventHandler = this.onDragOver.bind(this);\r\n    this.dragEnterEventHandler = this.onDragEnter.bind(this);\r\n    this.dragLeaveEventHandler = this.onDragLeave.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('dragover', this.dragOverEventHandler);\r\n      el.addEventListener('dragenter', this.dragEnterEventHandler);\r\n      el.addEventListener('dragleave', this.dragLeaveEventHandler);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    el.removeEventListener('dragover', this.dragOverEventHandler);\r\n    el.removeEventListener('dragenter', this.dragEnterEventHandler);\r\n    el.removeEventListener('dragleave', this.dragLeaveEventHandler);\r\n  }\r\n\r\n  onDragOver($event) {\r\n    if (!this.allowDrop($event)) {\r\n      if (this.allowDragoverStyling) {\r\n        return this.addDisabledClass();\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.onDragOverCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    $event.preventDefault();\r\n    if (this.allowDragoverStyling) {\r\n      this.addClass();\r\n    }\r\n  }\r\n\r\n  onDragEnter($event) {\r\n    if (!this.allowDrop($event)) return;\r\n\r\n    $event.preventDefault();\r\n    this.onDragEnterCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n  }\r\n\r\n  onDragLeave($event) {\r\n    if (!this.allowDrop($event)) {\r\n      if (this.allowDragoverStyling) {\r\n        return this.removeDisabledClass();\r\n      }\r\n      return;\r\n    }\r\n    this.onDragLeaveCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    if (this.allowDragoverStyling) {\r\n      this.removeClass();\r\n    }\r\n  }\r\n\r\n  @HostListener('drop', ['$event']) onDrop($event) {\r\n    if (!this.allowDrop($event)) return;\r\n\r\n    $event.preventDefault();\r\n    this.onDropCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    if (this.allowDragoverStyling) {\r\n      this.removeClass();\r\n    }\r\n    this.treeDraggedElement.set(null);\r\n  }\r\n\r\n  private addClass() {\r\n    this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS);\r\n  }\r\n\r\n  private removeClass() {\r\n    this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS);\r\n  }\r\n\r\n  private addDisabledClass() {\r\n    this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n  }\r\n\r\n  private removeDisabledClass() {\r\n    this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'TreeNodeDropSlot, tree-node-drop-slot',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <div\r\n      class=\"node-drop-slot\"\r\n      (treeDrop)=\"onDrop($event)\"\r\n      [treeAllowDrop]=\"allowDrop.bind(this)\"\r\n      [allowDragoverStyling]=\"true\">\r\n    </div>\r\n  `\r\n})\r\nexport class TreeNodeDropSlot {\r\n  @Input() node: TreeNode;\r\n  @Input() dropIndex: number;\r\n\r\n  onDrop($event) {\r\n    this.node.mouseAction('drop', $event.event, {\r\n      from: $event.element,\r\n      to: { parent: this.node, index: this.dropIndex }\r\n    });\r\n  }\r\n\r\n  allowDrop(element, $event) {\r\n    return this.node.options.allowDrop(element, { parent: this.node, index: this.dropIndex }, $event);\r\n  }\r\n}\r\n","import { action as mobxAction } from 'mobx';\r\nimport { computed as mobxComputed } from 'mobx';\r\nimport { observable as mobxObservable } from 'mobx';\r\n\r\n// Re-export mobx operators to be able to use inside components with AOT:\r\nexport function actionInternal(...args) {\r\n  return (mobxAction as any)(...args);\r\n}\r\nexport const action: typeof mobxAction = Object.assign(\r\n  actionInternal,\r\n  mobxAction\r\n) as any;\r\n\r\nfunction computedInternal(...args) {\r\n  return (mobxComputed as any)(...args);\r\n}\r\nexport const computed: typeof mobxComputed = Object.assign(\r\n  computedInternal,\r\n  mobxComputed\r\n) as any;\r\n\r\nfunction observableInternal(...args) {\r\n  return (mobxObservable as any)(...args);\r\n}\r\n\r\nexport const observable: typeof mobxObservable = Object.assign(\r\n  observableInternal,\r\n  mobxObservable\r\n) as any;\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { reaction } from 'mobx';\r\nimport { observable, computed, action } from '../mobx-angular/mobx-proxy';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nimport { TreeNode } from '../models/tree-node.model';\r\nimport { TreeModel } from '../models/tree.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-collection',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.margin-top]=\"marginTop\">\r\n        <tree-node\r\n          *ngFor=\"let node of viewportNodes; let i = index; trackBy: trackNode\"\r\n          [node]=\"node\"\r\n          [index]=\"i\"\r\n          [templates]=\"templates\"\r\n        >\r\n        </tree-node>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeCollectionComponent implements OnInit, OnDestroy {\r\n  @Input()\r\n  get nodes() {\r\n    return this._nodes;\r\n  }\r\n  set nodes(nodes) {\r\n    this.setNodes(nodes);\r\n  }\r\n\r\n  @Input() treeModel: TreeModel;\r\n\r\n  @observable _nodes;\r\n  private virtualScroll: TreeVirtualScroll; // Cannot inject this, because we might be inside treeNodeTemplateFull\r\n  @Input() templates;\r\n\r\n  @observable viewportNodes: TreeNode[];\r\n\r\n  @computed get marginTop(): string {\r\n    const firstNode =\r\n      this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];\r\n    const relativePosition =\r\n      firstNode && firstNode.parent\r\n        ? firstNode.position -\r\n          firstNode.parent.position -\r\n          firstNode.parent.getSelfHeight()\r\n        : 0;\r\n\r\n    return `${relativePosition}px`;\r\n  }\r\n\r\n  _dispose = [];\r\n\r\n  @action setNodes(nodes) {\r\n    this._nodes = nodes;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.virtualScroll = this.treeModel.virtualScroll;\r\n    this._dispose = [\r\n      // return node indexes so we can compare structurally,\r\n      reaction(\r\n        () => {\r\n          return this.virtualScroll\r\n            .getViewportNodes(this.nodes)\r\n            .map(n => n.index);\r\n        },\r\n        nodeIndexes => {\r\n          this.viewportNodes = nodeIndexes.map(i => this.nodes[i]);\r\n        },\r\n        { compareStructural: true, fireImmediately: true } as any\r\n      ),\r\n      reaction(\r\n        () => this.nodes,\r\n        nodes => {\r\n          this.viewportNodes = this.virtualScroll.getViewportNodes(nodes);\r\n        }\r\n      )\r\n    ];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dispose.forEach(d => d());\r\n  }\r\n\r\n  trackNode(index, node) {\r\n    return node.id;\r\n  }\r\n}\r\n","import { Component, ContentChild, EventEmitter, HostListener, Input, OnChanges, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { TreeModel } from '../models/tree.model';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\nimport { TreeOptions } from '../models/tree-options.model';\r\nimport { ITreeOptions } from '../defs/api';\r\nimport { TreeViewportComponent } from './tree-viewport.component';\r\n\r\n@Component({\r\n  selector: 'Tree, tree-root',\r\n  providers: [TreeModel],\r\n  styles: [],\r\n  template: `\r\n      <tree-viewport #viewport>\r\n          <div\r\n                  class=\"angular-tree-component\"\r\n                  [class.node-dragging]=\"treeDraggedElement.isDragging()\"\r\n                  [class.angular-tree-component-rtl]=\"treeModel.options.rtl\">\r\n              <tree-node-collection\r\n                      *ngIf=\"treeModel.roots\"\r\n                      [nodes]=\"treeModel.roots\"\r\n                      [treeModel]=\"treeModel\"\r\n                      [templates]=\"{\r\n            loadingTemplate: loadingTemplate,\r\n            treeNodeTemplate: treeNodeTemplate,\r\n            treeNodeWrapperTemplate: treeNodeWrapperTemplate,\r\n            treeNodeFullTemplate: treeNodeFullTemplate\r\n          }\">\r\n              </tree-node-collection>\r\n              <tree-node-drop-slot\r\n                      class=\"empty-tree-drop-slot\"\r\n                      *ngIf=\"treeModel.isEmptyTree()\"\r\n                      [dropIndex]=\"0\"\r\n                      [node]=\"treeModel.virtualRoot\">\r\n              </tree-node-drop-slot>\r\n          </div>\r\n      </tree-viewport>\r\n  `\r\n})\r\nexport class TreeComponent implements OnChanges {\r\n  _nodes: any[];\r\n  _options: TreeOptions;\r\n\r\n  @ContentChild('loadingTemplate', { static: false }) loadingTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeTemplate', { static: false }) treeNodeTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeWrapperTemplate', { static: false }) treeNodeWrapperTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeFullTemplate', { static: false }) treeNodeFullTemplate: TemplateRef<any>;\r\n  @ViewChild('viewport', { static: false }) viewportComponent: TreeViewportComponent;\r\n\r\n  // Will be handled in ngOnChanges\r\n  @Input() set nodes(nodes: any[]) {\r\n  };\r\n\r\n  @Input() set options(options: ITreeOptions) {\r\n  };\r\n\r\n  @Input() set focused(value: boolean) {\r\n    this.treeModel.setFocus(value);\r\n  }\r\n\r\n  @Input() set state(state) {\r\n    this.treeModel.setState(state);\r\n  }\r\n\r\n  @Output() toggleExpanded;\r\n  @Output() activate;\r\n  @Output() deactivate;\r\n  @Output() nodeActivate;\r\n  @Output() nodeDeactivate;\r\n  @Output() select;\r\n  @Output() deselect;\r\n  @Output() focus;\r\n  @Output() blur;\r\n  @Output() updateData;\r\n  @Output() initialized;\r\n  @Output() moveNode;\r\n  @Output() copyNode;\r\n  @Output() loadNodeChildren;\r\n  @Output() changeFilter;\r\n  @Output() event;\r\n  @Output() stateChange;\r\n\r\n  constructor(\r\n    public treeModel: TreeModel,\r\n    public treeDraggedElement: TreeDraggedElement) {\r\n\r\n    treeModel.eventNames.forEach((name) => this[name] = new EventEmitter());\r\n    treeModel.subscribeToState((state) => this.stateChange.emit(state));\r\n  }\r\n\r\n  @HostListener('body: keydown', ['$event'])\r\n  onKeydown($event) {\r\n    if (!this.treeModel.isFocused) return;\r\n    if (['input', 'textarea'].includes(document.activeElement.tagName.toLowerCase())) return;\r\n\r\n    const focusedNode = this.treeModel.getFocusedNode();\r\n\r\n    this.treeModel.performKeyAction(focusedNode, $event);\r\n  }\r\n\r\n  @HostListener('body: mousedown', ['$event'])\r\n  onMousedown($event) {\r\n    function isOutsideClick(startElement: Element, nodeName: string) {\r\n      return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);\r\n    }\r\n\r\n    if (isOutsideClick($event.target, 'tree-root')) {\r\n      this.treeModel.setFocus(false);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.options || changes.nodes) {\r\n      this.treeModel.setData({\r\n        options: changes.options && changes.options.currentValue,\r\n        nodes: changes.nodes && changes.nodes.currentValue,\r\n        events: this.pick(this, this.treeModel.eventNames)\r\n      });\r\n    }\r\n  }\r\n\r\n  sizeChanged() {\r\n    this.viewportComponent.setViewport();\r\n  }\r\n\r\n  private pick(object, keys) {\r\n    return keys.reduce((obj, key) => {\r\n      if (object && object.hasOwnProperty(key)) {\r\n        obj[key] = object[key];\r\n      }\r\n      return obj;\r\n    }, {});\r\n  }\r\n}\r\n","import { Directive, Input, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nconst EASE_ACCELERATION = 1.005;\r\n\r\n@Directive({\r\n  selector: '[treeAnimateOpen]'\r\n})\r\nexport class TreeAnimateOpenDirective {\r\n  private _isOpen: boolean;\r\n\r\n  @Input('treeAnimateOpenSpeed') animateSpeed: number;\r\n  @Input('treeAnimateOpenAcceleration') animateAcceleration: number;\r\n  @Input('treeAnimateOpenEnabled') isEnabled: boolean;\r\n\r\n  @Input('treeAnimateOpen')\r\n  set isOpen(value: boolean) {\r\n    if (value) {\r\n      this._show();\r\n      if (this.isEnabled && this._isOpen === false) {\r\n        this._animateOpen();\r\n      }\r\n    } else {\r\n      this.isEnabled ? this._animateClose() : this._hide();\r\n    }\r\n    this._isOpen = !!value;\r\n  };\r\n\r\n  private innerElement: any;\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private templateRef: TemplateRef<any>,\r\n    private viewContainerRef: ViewContainerRef) {\r\n  }\r\n\r\n  private _show() {\r\n    if (this.innerElement) return;\r\n\r\n    // create child view\r\n    this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];\r\n  }\r\n\r\n  private _hide() {\r\n    this.viewContainerRef.clear();\r\n    this.innerElement = null;\r\n  }\r\n\r\n  private _animateOpen() {\r\n    let delta = this.animateSpeed;\r\n    let ease = this.animateAcceleration;\r\n    let maxHeight = 0;\r\n\r\n    // set height to 0\r\n    this.renderer.setStyle(this.innerElement, 'max-height', `0`);\r\n\r\n    // increase maxHeight until height doesn't change\r\n    setTimeout(() => { // Allow inner element to create its content\r\n      const i = setInterval(() => {\r\n        if (!this._isOpen || !this.innerElement) return clearInterval(i);\r\n\r\n        maxHeight += delta;\r\n        const roundedMaxHeight = Math.round(maxHeight);\r\n\r\n        this.renderer.setStyle(this.innerElement, 'max-height', `${roundedMaxHeight}px`);\r\n        const height = this.innerElement.getBoundingClientRect ? this.innerElement.getBoundingClientRect().height : 0; // TBD use renderer\r\n\r\n        delta *= ease;\r\n        ease *= EASE_ACCELERATION;\r\n        if (height < roundedMaxHeight) {\r\n          // Make maxHeight auto because animation finished and container might change height later on\r\n          this.renderer.setStyle(this.innerElement, 'max-height', null);\r\n          clearInterval(i);\r\n        }\r\n      }, 17);\r\n    });\r\n  }\r\n\r\n  private _animateClose() {\r\n    if (!this.innerElement) return;\r\n\r\n    let delta = this.animateSpeed;\r\n    let ease = this.animateAcceleration;\r\n    let height = this.innerElement.getBoundingClientRect().height; // TBD use renderer\r\n\r\n    // slowly decrease maxHeight to 0, starting from current height\r\n    const i = setInterval(() => {\r\n      if (this._isOpen || !this.innerElement) return clearInterval(i);\r\n\r\n      height -= delta;\r\n      this.renderer.setStyle(this.innerElement, 'max-height', `${height}px`);\r\n      delta *= ease;\r\n      ease *= EASE_ACCELERATION;\r\n\r\n      if (height <= 0) {\r\n        // after animation complete - remove child element\r\n        this.viewContainerRef.clear();\r\n        this.innerElement = null;\r\n        clearInterval(i);\r\n      }\r\n    }, 17);\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-children',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        [class.tree-children]=\"true\"\r\n        [class.tree-children-no-padding]=\"node.options.levelPadding\"\r\n        *treeAnimateOpen=\"\r\n          node.isExpanded;\r\n          speed: node.options.animateSpeed;\r\n          acceleration: node.options.animateAcceleration;\r\n          enabled: node.options.animateExpand\r\n        \"\r\n      >\r\n        <tree-node-collection\r\n          *ngIf=\"node.children\"\r\n          [nodes]=\"node.children\"\r\n          [templates]=\"templates\"\r\n          [treeModel]=\"node.treeModel\"\r\n        >\r\n        </tree-node-collection>\r\n        <tree-loading-component\r\n          [style.padding-left]=\"node.getNodePadding()\"\r\n          class=\"tree-node-loading\"\r\n          *ngIf=\"!node.children\"\r\n          [template]=\"templates.loadingTemplate\"\r\n          [node]=\"node\"\r\n        ></tree-loading-component>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeChildrenComponent {\r\n  @Input() node: TreeNode;\r\n  @Input() templates: any;\r\n}\r\n","import { Component, Input, ViewEncapsulation, TemplateRef } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-content',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n  <span *ngIf=\"!template\">{{ node.displayField }}</span>\r\n  <ng-container\r\n    [ngTemplateOutlet]=\"template\"\r\n    [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index }\">\r\n  </ng-container>`,\r\n})\r\nexport class TreeNodeContent {\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() template: TemplateRef<any>;\r\n}\r\n","import { AfterViewInit, Directive, DoCheck, ElementRef, HostListener, Input, NgZone, OnDestroy, Renderer2 } from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\n\r\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\n\r\n@Directive({\r\n  selector: '[treeDrag]'\r\n})\r\nexport class TreeDragDirective implements AfterViewInit, DoCheck, OnDestroy {\r\n  @Input('treeDrag') draggedElement;\r\n  @Input() treeDragEnabled;\r\n  private readonly dragEventHandler: (ev: DragEvent) => void;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\r\n    this.dragEventHandler = this.onDrag.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('drag', this.dragEventHandler);\r\n    });\r\n  }\r\n\r\n  ngDoCheck() {\r\n    this.renderer.setAttribute(this.el.nativeElement, 'draggable', this.treeDragEnabled ? 'true' : 'false');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    el.removeEventListener('drag', this.dragEventHandler);\r\n  }\r\n\r\n  @HostListener('dragstart', ['$event']) onDragStart(ev) {\r\n    // setting the data is required by firefox\r\n    ev.dataTransfer.setData('text', ev.target.id);\r\n    this.treeDraggedElement.set(this.draggedElement);\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('dragStart', ev);\r\n    }\r\n  }\r\n\r\n  onDrag(ev) {\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('drag', ev);\r\n    }\r\n  }\r\n\r\n  @HostListener('dragend') onDragEnd() {\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('dragEnd');\r\n    }\r\n    this.treeDraggedElement.set(null);\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-expander',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <span\r\n        *ngIf=\"node.hasChildren\"\r\n        [class.toggle-children-wrapper-expanded]=\"node.isExpanded\"\r\n        [class.toggle-children-wrapper-collapsed]=\"node.isCollapsed\"\r\n        class=\"toggle-children-wrapper\"\r\n        (click)=\"node.mouseAction('expanderClick', $event)\"\r\n      >\r\n        <span class=\"toggle-children\"></span>\r\n      </span>\r\n      <span *ngIf=\"!node.hasChildren\" class=\"toggle-children-placeholder\">\r\n      </span>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeExpanderComponent {\r\n  @Input() node: TreeNode;\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-checkbox',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <input\r\n        class=\"tree-node-checkbox\"\r\n        type=\"checkbox\"\r\n        (click)=\"node.mouseAction('checkboxClick', $event)\"\r\n        [checked]=\"node.isSelected\"\r\n        [indeterminate]=\"node.isPartiallySelected\"\r\n      />\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeCheckboxComponent {\r\n  @Input() node: TreeNode;\r\n}\r\n","import { Component , Input , ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-wrapper' ,\r\n  encapsulation: ViewEncapsulation.None ,\r\n  styles: [] ,\r\n  template: `\r\n      <div *ngIf=\"!templates.treeNodeWrapperTemplate\" class=\"node-wrapper\" [style.padding-left]=\"node.getNodePadding()\">\r\n          <tree-node-checkbox *ngIf=\"node.options.useCheckbox\" [node]=\"node\"></tree-node-checkbox>\r\n          <tree-node-expander [node]=\"node\"></tree-node-expander>\r\n          <div class=\"node-content-wrapper\"\r\n               [class.node-content-wrapper-active]=\"node.isActive\"\r\n               [class.node-content-wrapper-focused]=\"node.isFocused\"\r\n               (click)=\"node.mouseAction('click', $event)\"\r\n               (dblclick)=\"node.mouseAction('dblClick', $event)\"\r\n               (mouseover)=\"node.mouseAction('mouseOver', $event)\"\r\n               (mouseout)=\"node.mouseAction('mouseOut', $event)\"\r\n               (contextmenu)=\"node.mouseAction('contextMenu', $event)\"\r\n               (treeDrop)=\"node.onDrop($event)\"\r\n               (treeDropDragOver)=\"node.mouseAction('dragOver', $event)\"\r\n               (treeDropDragLeave)=\"node.mouseAction('dragLeave', $event)\"\r\n               (treeDropDragEnter)=\"node.mouseAction('dragEnter', $event)\"\r\n               [treeAllowDrop]=\"node.allowDrop\"\r\n               [allowDragoverStyling]=\"node.allowDragoverStyling()\"\r\n               [treeDrag]=\"node\"\r\n               [treeDragEnabled]=\"node.allowDrag()\">\r\n\r\n              <tree-node-content [node]=\"node\" [index]=\"index\" [template]=\"templates.treeNodeTemplate\">\r\n              </tree-node-content>\r\n          </div>\r\n      </div>\r\n      <ng-container\r\n              [ngTemplateOutlet]=\"templates.treeNodeWrapperTemplate\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index, templates: templates }\">\r\n      </ng-container>\r\n  `\r\n})\r\n\r\nexport class TreeNodeWrapperComponent {\r\n\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() templates: any;\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'TreeNode, tree-node',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        *ngIf=\"!templates.treeNodeFullTemplate\"\r\n        [class]=\"node.getClass()\"\r\n        [class.tree-node]=\"true\"\r\n        [class.tree-node-expanded]=\"node.isExpanded && node.hasChildren\"\r\n        [class.tree-node-collapsed]=\"node.isCollapsed && node.hasChildren\"\r\n        [class.tree-node-leaf]=\"node.isLeaf\"\r\n        [class.tree-node-active]=\"node.isActive\"\r\n        [class.tree-node-focused]=\"node.isFocused\"\r\n      >\r\n        <tree-node-drop-slot\r\n          *ngIf=\"index === 0\"\r\n          [dropIndex]=\"node.index\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n\r\n        <tree-node-wrapper\r\n          [node]=\"node\"\r\n          [index]=\"index\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-wrapper>\r\n\r\n        <tree-node-children\r\n          [node]=\"node\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-children>\r\n        <tree-node-drop-slot\r\n          [dropIndex]=\"node.index + 1\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n      </div>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"templates.treeNodeFullTemplate\"\r\n        [ngTemplateOutletContext]=\"{\r\n          $implicit: node,\r\n          node: node,\r\n          index: index,\r\n          templates: templates\r\n        }\"\r\n      >\r\n      </ng-container>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeComponent {\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() templates: any;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreeMobxAutorunDirective } from './mobx-angular/tree-mobx-autorun.directive';\r\n\r\nimport {\r\n  IActionHandler,\r\n  IActionMapping,\r\n  TREE_ACTIONS\r\n} from './models/tree-options.model';\r\nimport {\r\n  IAllowDragFn,\r\n  IAllowDropFn,\r\n  ITreeOptions,\r\n  ITreeState\r\n} from './defs/api';\r\nimport { KEYS } from './constants/keys';\r\nimport { TreeModel } from './models/tree.model';\r\nimport { TreeNode } from './models/tree-node.model';\r\nimport { TreeDraggedElement } from './models/tree-dragged-element.model';\r\nimport { TreeVirtualScroll } from './models/tree-virtual-scroll.model';\r\nimport { LoadingComponent } from './components/loading.component';\r\nimport { TreeComponent } from './components/tree.component';\r\nimport { TreeNodeComponent } from './components/tree-node.component';\r\nimport { TreeNodeContent } from './components/tree-node-content.component';\r\nimport { TreeNodeDropSlot } from './components/tree-node-drop-slot.component';\r\nimport { TreeNodeExpanderComponent } from './components/tree-node-expander.component';\r\nimport { TreeNodeChildrenComponent } from './components/tree-node-children.component';\r\nimport { TreeNodeCollectionComponent } from './components/tree-node-collection.component';\r\nimport { TreeNodeWrapperComponent } from './components/tree-node-wrapper.component';\r\nimport { TreeViewportComponent } from './components/tree-viewport.component';\r\nimport { TreeNodeCheckboxComponent } from './components/tree-node-checkbox.component';\r\nimport { TreeDropDirective } from './directives/tree-drop.directive';\r\nimport { TreeDragDirective } from './directives/tree-drag.directive';\r\nimport { TreeAnimateOpenDirective } from './directives/tree-animate-open.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TreeComponent,\r\n    TreeNodeComponent,\r\n    TreeNodeContent,\r\n    LoadingComponent,\r\n    TreeDropDirective,\r\n    TreeDragDirective,\r\n    TreeNodeExpanderComponent,\r\n    TreeNodeChildrenComponent,\r\n    TreeNodeDropSlot,\r\n    TreeNodeCollectionComponent,\r\n    TreeViewportComponent,\r\n    TreeNodeWrapperComponent,\r\n    TreeNodeCheckboxComponent,\r\n    TreeAnimateOpenDirective,\r\n    TreeMobxAutorunDirective\r\n  ],\r\n  exports: [\r\n    TreeComponent,\r\n    TreeNodeComponent,\r\n    TreeNodeContent,\r\n    LoadingComponent,\r\n    TreeDropDirective,\r\n    TreeDragDirective,\r\n    TreeNodeExpanderComponent,\r\n    TreeNodeChildrenComponent,\r\n    TreeNodeDropSlot,\r\n    TreeNodeCollectionComponent,\r\n    TreeViewportComponent,\r\n    TreeNodeWrapperComponent,\r\n    TreeNodeCheckboxComponent,\r\n    TreeAnimateOpenDirective,\r\n    TreeMobxAutorunDirective\r\n  ],\r\n  imports: [CommonModule],\r\n  providers: []\r\n})\r\nexport class TreeModule {}\r\n\r\nexport {\r\n  TreeModel,\r\n  TreeNode,\r\n  TreeDraggedElement,\r\n  TreeVirtualScroll,\r\n  ITreeOptions,\r\n  TREE_ACTIONS,\r\n  KEYS,\r\n  IActionMapping,\r\n  IActionHandler,\r\n  IAllowDropFn,\r\n  IAllowDragFn,\r\n  LoadingComponent,\r\n  TreeAnimateOpenDirective,\r\n  TreeMobxAutorunDirective,\r\n  TreeComponent,\r\n  TreeNodeComponent,\r\n  TreeNodeWrapperComponent,\r\n  TreeNodeContent,\r\n  TreeDropDirective,\r\n  TreeDragDirective,\r\n  TreeNodeExpanderComponent,\r\n  TreeNodeChildrenComponent,\r\n  TreeNodeDropSlot,\r\n  TreeNodeCollectionComponent,\r\n  TreeViewportComponent,\r\n  TreeNodeCheckboxComponent,\r\n  ITreeState\r\n};\r\n","/*\r\n * Public API Surface of angular-tree-component\r\n */\r\n\r\nexport * from './lib/angular-tree-component.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["__decorate","computed","observable","action","i1.TreeModel","_c0","i1.TreeVirtualScroll","_c1","DRAG_OVER_CLASS","i1.TreeDraggedElement","mobxAction","mobxComputed","mobxObservable","i2.TreeDraggedElement"],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Directive, Input, Injectable, Component, ViewEncapsulation, EventEmitter, Output, HostListener, ContentChild, ViewChild, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { autorun, reaction, computed as computed$1, observable as observable$1, action as action$1 } from 'mobx';\n\nclass TreeMobxAutorunDirective {\r\n    constructor(templateRef, viewContainer) {\r\n        this.templateRef = templateRef;\r\n        this.viewContainer = viewContainer;\r\n        this.templateBindings = {};\r\n    }\r\n    ngOnInit() {\r\n        this.view = this.viewContainer.createEmbeddedView(this.templateRef);\r\n        if (this.dispose) {\r\n            this.dispose();\r\n        }\r\n        if (this.shouldDetach()) {\r\n            this.view.detach();\r\n        }\r\n        this.autoDetect(this.view);\r\n    }\r\n    shouldDetach() {\r\n        return this.treeMobxAutorun && this.treeMobxAutorun.detach;\r\n    }\r\n    autoDetect(view) {\r\n        this.dispose = autorun(() => view.detectChanges());\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.dispose) {\r\n            this.dispose();\r\n        }\r\n    }\r\n}\r\n/** @nocollapse */ TreeMobxAutorunDirective.ɵfac = function TreeMobxAutorunDirective_Factory(t) { return new (t || TreeMobxAutorunDirective)(i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef)); };\r\n/** @nocollapse */ TreeMobxAutorunDirective.ɵdir = /** @pureOrBreakMyCode */ i0.ɵɵdefineDirective({ type: TreeMobxAutorunDirective, selectors: [[\"\", \"treeMobxAutorun\", \"\"]], inputs: { treeMobxAutorun: \"treeMobxAutorun\" } });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeMobxAutorunDirective, [{\r\n            type: Directive,\r\n            args: [{ selector: '[treeMobxAutorun]' }]\r\n        }], function () { return [{ type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; }, { treeMobxAutorun: [{\r\n                type: Input\r\n            }] });\r\n})();\n\nconst KEYS = {\r\n    LEFT: 37,\r\n    UP: 38,\r\n    RIGHT: 39,\r\n    DOWN: 40,\r\n    ENTER: 13,\r\n    SPACE: 32,\r\n    CONTEXT_MENU: 32\r\n};\n\nconst TREE_ACTIONS = {\r\n    TOGGLE_ACTIVE: (tree, node, $event) => node && node.toggleActivated(),\r\n    TOGGLE_ACTIVE_MULTI: (tree, node, $event) => node && node.toggleActivated(true),\r\n    TOGGLE_SELECTED: (tree, node, $event) => node && node.toggleSelected(),\r\n    ACTIVATE: (tree, node, $event) => node.setIsActive(true),\r\n    DEACTIVATE: (tree, node, $event) => node.setIsActive(false),\r\n    SELECT: (tree, node, $event) => node.setIsSelected(true),\r\n    DESELECT: (tree, node, $event) => node.setIsSelected(false),\r\n    FOCUS: (tree, node, $event) => node.focus(),\r\n    TOGGLE_EXPANDED: (tree, node, $event) => node.hasChildren && node.toggleExpanded(),\r\n    EXPAND: (tree, node, $event) => node.expand(),\r\n    COLLAPSE: (tree, node, $event) => node.collapse(),\r\n    DRILL_DOWN: (tree, node, $event) => tree.focusDrillDown(),\r\n    DRILL_UP: (tree, node, $event) => tree.focusDrillUp(),\r\n    NEXT_NODE: (tree, node, $event) => tree.focusNextNode(),\r\n    PREVIOUS_NODE: (tree, node, $event) => tree.focusPreviousNode(),\r\n    MOVE_NODE: (tree, node, $event, { from, to }) => {\r\n        // default action assumes from = node, to = {parent, index}\r\n        if ($event.ctrlKey) {\r\n            tree.copyNode(from, to);\r\n        }\r\n        else {\r\n            tree.moveNode(from, to);\r\n        }\r\n    }\r\n};\r\nconst defaultActionMapping = {\r\n    mouse: {\r\n        click: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n        dblClick: null,\r\n        contextMenu: null,\r\n        expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,\r\n        checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,\r\n        drop: TREE_ACTIONS.MOVE_NODE\r\n    },\r\n    keys: {\r\n        [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n        [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n        [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n        [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n        [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n        [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n    }\r\n};\r\nclass TreeOptions {\r\n    constructor(options = {}) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w, _x, _y, _z, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35;\r\n        this.options = options;\r\n        this.actionMapping = {\r\n            mouse: {\r\n                click: (_d = (_c = (_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.actionMapping) === null || _b === void 0 ? void 0 : _b.mouse) === null || _c === void 0 ? void 0 : _c.click) !== null && _d !== void 0 ? _d : defaultActionMapping.mouse.click,\r\n                dblClick: (_h = (_g = (_f = (_e = this.options) === null || _e === void 0 ? void 0 : _e.actionMapping) === null || _f === void 0 ? void 0 : _f.mouse) === null || _g === void 0 ? void 0 : _g.dblClick) !== null && _h !== void 0 ? _h : defaultActionMapping.mouse.dblClick,\r\n                contextMenu: (_m = (_l = (_k = (_j = this.options) === null || _j === void 0 ? void 0 : _j.actionMapping) === null || _k === void 0 ? void 0 : _k.mouse) === null || _l === void 0 ? void 0 : _l.contextMenu) !== null && _m !== void 0 ? _m : defaultActionMapping.mouse.contextMenu,\r\n                expanderClick: (_r = (_q = (_p = (_o = this.options) === null || _o === void 0 ? void 0 : _o.actionMapping) === null || _p === void 0 ? void 0 : _p.mouse) === null || _q === void 0 ? void 0 : _q.expanderClick) !== null && _r !== void 0 ? _r : defaultActionMapping.mouse.expanderClick,\r\n                checkboxClick: (_v = (_u = (_t = (_s = this.options) === null || _s === void 0 ? void 0 : _s.actionMapping) === null || _t === void 0 ? void 0 : _t.mouse) === null || _u === void 0 ? void 0 : _u.checkboxClick) !== null && _v !== void 0 ? _v : defaultActionMapping.mouse.checkboxClick,\r\n                drop: (_z = (_y = (_x = (_w = this.options) === null || _w === void 0 ? void 0 : _w.actionMapping) === null || _x === void 0 ? void 0 : _x.mouse) === null || _y === void 0 ? void 0 : _y.drop) !== null && _z !== void 0 ? _z : defaultActionMapping.mouse.drop,\r\n                dragStart: (_3 = (_2 = (_1 = (_0 = this.options) === null || _0 === void 0 ? void 0 : _0.actionMapping) === null || _1 === void 0 ? void 0 : _1.mouse) === null || _2 === void 0 ? void 0 : _2.dragStart) !== null && _3 !== void 0 ? _3 : undefined,\r\n                drag: (_7 = (_6 = (_5 = (_4 = this.options) === null || _4 === void 0 ? void 0 : _4.actionMapping) === null || _5 === void 0 ? void 0 : _5.mouse) === null || _6 === void 0 ? void 0 : _6.drag) !== null && _7 !== void 0 ? _7 : undefined,\r\n                dragEnd: (_11 = (_10 = (_9 = (_8 = this.options) === null || _8 === void 0 ? void 0 : _8.actionMapping) === null || _9 === void 0 ? void 0 : _9.mouse) === null || _10 === void 0 ? void 0 : _10.dragEnd) !== null && _11 !== void 0 ? _11 : undefined,\r\n                dragOver: (_15 = (_14 = (_13 = (_12 = this.options) === null || _12 === void 0 ? void 0 : _12.actionMapping) === null || _13 === void 0 ? void 0 : _13.mouse) === null || _14 === void 0 ? void 0 : _14.dragOver) !== null && _15 !== void 0 ? _15 : undefined,\r\n                dragLeave: (_19 = (_18 = (_17 = (_16 = this.options) === null || _16 === void 0 ? void 0 : _16.actionMapping) === null || _17 === void 0 ? void 0 : _17.mouse) === null || _18 === void 0 ? void 0 : _18.dragLeave) !== null && _19 !== void 0 ? _19 : undefined,\r\n                dragEnter: (_23 = (_22 = (_21 = (_20 = this.options) === null || _20 === void 0 ? void 0 : _20.actionMapping) === null || _21 === void 0 ? void 0 : _21.mouse) === null || _22 === void 0 ? void 0 : _22.dragEnter) !== null && _23 !== void 0 ? _23 : undefined,\r\n                mouseOver: (_27 = (_26 = (_25 = (_24 = this.options) === null || _24 === void 0 ? void 0 : _24.actionMapping) === null || _25 === void 0 ? void 0 : _25.mouse) === null || _26 === void 0 ? void 0 : _26.mouseOver) !== null && _27 !== void 0 ? _27 : undefined,\r\n                mouseOut: (_31 = (_30 = (_29 = (_28 = this.options) === null || _28 === void 0 ? void 0 : _28.actionMapping) === null || _29 === void 0 ? void 0 : _29.mouse) === null || _30 === void 0 ? void 0 : _30.mouseOut) !== null && _31 !== void 0 ? _31 : undefined,\r\n            },\r\n            keys: {\r\n                [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n                [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n                [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n                [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n                [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n                [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n            }\r\n        };\r\n        if ((_33 = (_32 = this.options) === null || _32 === void 0 ? void 0 : _32.actionMapping) === null || _33 === void 0 ? void 0 : _33.keys) {\r\n            this.actionMapping.keys = Object.assign(Object.assign({}, this.actionMapping.keys), this.options.actionMapping.keys);\r\n        }\r\n        if (options.rtl) {\r\n            this.actionMapping.keys[KEYS.RIGHT] = ((_34 = options.actionMapping) === null || _34 === void 0 ? void 0 : _34.keys[KEYS.RIGHT]) || TREE_ACTIONS.DRILL_UP;\r\n            this.actionMapping.keys[KEYS.LEFT] = ((_35 = options.actionMapping) === null || _35 === void 0 ? void 0 : _35.keys[KEYS.LEFT]) || TREE_ACTIONS.DRILL_DOWN;\r\n        }\r\n    }\r\n    get hasChildrenField() { return this.options.hasChildrenField || 'hasChildren'; }\r\n    get childrenField() { return this.options.childrenField || 'children'; }\r\n    get displayField() { return this.options.displayField || 'name'; }\r\n    get idField() { return this.options.idField || 'id'; }\r\n    get isExpandedField() { return this.options.isExpandedField || 'isExpanded'; }\r\n    get getChildren() { return this.options.getChildren; }\r\n    get levelPadding() { return this.options.levelPadding || 0; }\r\n    get useVirtualScroll() { return this.options.useVirtualScroll; }\r\n    get animateExpand() { return this.options.animateExpand; }\r\n    get animateSpeed() { return this.options.animateSpeed || 1; }\r\n    get animateAcceleration() { return this.options.animateAcceleration || 1.2; }\r\n    get scrollOnActivate() { return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate; }\r\n    get rtl() { return !!this.options.rtl; }\r\n    get rootId() { return this.options.rootId; }\r\n    get useCheckbox() { return this.options.useCheckbox; }\r\n    get useTriState() { return this.options.useTriState === undefined ? true : this.options.useTriState; }\r\n    get scrollContainer() { return this.options.scrollContainer; }\r\n    get allowDragoverStyling() { return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling; }\r\n    getNodeClone(node) {\r\n        if (this.options.getNodeClone) {\r\n            return this.options.getNodeClone(node);\r\n        }\r\n        // remove id from clone\r\n        // keeping ie11 compatibility\r\n        const nodeClone = Object.assign({}, node.data);\r\n        if (nodeClone.id) {\r\n            delete nodeClone.id;\r\n        }\r\n        return nodeClone;\r\n    }\r\n    allowDrop(element, to, $event) {\r\n        if (this.options.allowDrop instanceof Function) {\r\n            return this.options.allowDrop(element, to, $event);\r\n        }\r\n        else {\r\n            return this.options.allowDrop === undefined ? true : this.options.allowDrop;\r\n        }\r\n    }\r\n    allowDrag(node) {\r\n        if (this.options.allowDrag instanceof Function) {\r\n            return this.options.allowDrag(node);\r\n        }\r\n        else {\r\n            return this.options.allowDrag;\r\n        }\r\n    }\r\n    nodeClass(node) {\r\n        return this.options.nodeClass ? this.options.nodeClass(node) : '';\r\n    }\r\n    nodeHeight(node) {\r\n        if (node.data.virtual) {\r\n            return 0;\r\n        }\r\n        let nodeHeight = this.options.nodeHeight || 22;\r\n        if (typeof nodeHeight === 'function') {\r\n            nodeHeight = nodeHeight(node);\r\n        }\r\n        // account for drop slots:\r\n        return nodeHeight + (node.index === 0 ? 2 : 1) * this.dropSlotHeight;\r\n    }\r\n    get dropSlotHeight() {\r\n        return typeof this.options.dropSlotHeight === 'number' ? this.options.dropSlotHeight : 2;\r\n    }\r\n}\n\nconst TREE_EVENTS = {\r\n    toggleExpanded: 'toggleExpanded',\r\n    activate: 'activate',\r\n    deactivate: 'deactivate',\r\n    nodeActivate: 'nodeActivate',\r\n    nodeDeactivate: 'nodeDeactivate',\r\n    select: 'select',\r\n    deselect: 'deselect',\r\n    focus: 'focus',\r\n    blur: 'blur',\r\n    initialized: 'initialized',\r\n    updateData: 'updateData',\r\n    moveNode: 'moveNode',\r\n    copyNode: 'copyNode',\r\n    event: 'event',\r\n    loadNodeChildren: 'loadNodeChildren',\r\n    changeFilter: 'changeFilter',\r\n    stateChange: 'stateChange'\r\n};\n\nvar __decorate$3 = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\r\n        r = Reflect.decorate(decorators, target, key, desc);\r\n    else\r\n        for (var i = decorators.length - 1; i >= 0; i--)\r\n            if (d = decorators[i])\r\n                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata$3 = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\r\n        return Reflect.metadata(k, v);\r\n};\r\nclass TreeNode {\r\n    constructor(data, parent, treeModel, index) {\r\n        this.data = data;\r\n        this.parent = parent;\r\n        this.treeModel = treeModel;\r\n        this.position = 0;\r\n        this.allowDrop = (element, $event) => {\r\n            return this.options.allowDrop(element, { parent: this, index: 0 }, $event);\r\n        };\r\n        this.allowDragoverStyling = () => {\r\n            return this.options.allowDragoverStyling;\r\n        };\r\n        if (this.id === undefined || this.id === null) {\r\n            this.id = uuid();\r\n        } // Make sure there's a unique id without overriding existing ids to work with immutable data structures\r\n        this.index = index;\r\n        if (this.getField('children')) {\r\n            this._initChildren();\r\n        }\r\n        this.autoLoadChildren();\r\n    }\r\n    get isHidden() { return this.treeModel.isHidden(this); }\r\n    ;\r\n    get isExpanded() { return this.treeModel.isExpanded(this); }\r\n    ;\r\n    get isActive() { return this.treeModel.isActive(this); }\r\n    ;\r\n    get isFocused() { return this.treeModel.isNodeFocused(this); }\r\n    ;\r\n    get isSelected() {\r\n        if (this.isSelectable()) {\r\n            return this.treeModel.isSelected(this);\r\n        }\r\n        else {\r\n            return this.children.some((node) => node.isSelected);\r\n        }\r\n    }\r\n    ;\r\n    get isAllSelected() {\r\n        if (this.isSelectable()) {\r\n            return this.treeModel.isSelected(this);\r\n        }\r\n        else {\r\n            return this.children.every((node) => node.isAllSelected);\r\n        }\r\n    }\r\n    ;\r\n    get isPartiallySelected() {\r\n        return this.isSelected && !this.isAllSelected;\r\n    }\r\n    get level() {\r\n        return this.parent ? this.parent.level + 1 : 0;\r\n    }\r\n    get path() {\r\n        return this.parent ? [...this.parent.path, this.id] : [];\r\n    }\r\n    get elementRef() {\r\n        throw `Element Ref is no longer supported since introducing virtual scroll\\n\r\n      You may use a template to obtain a reference to the element`;\r\n    }\r\n    get originalNode() { return this._originalNode; }\r\n    ;\r\n    // helper get functions:\r\n    get hasChildren() {\r\n        return !!(this.getField('hasChildren') || (this.children && this.children.length > 0));\r\n    }\r\n    get isCollapsed() { return !this.isExpanded; }\r\n    get isLeaf() { return !this.hasChildren; }\r\n    get isRoot() { return this.parent.data.virtual; }\r\n    get realParent() { return this.isRoot ? null : this.parent; }\r\n    // proxy functions:\r\n    get options() { return this.treeModel.options; }\r\n    fireEvent(event) { this.treeModel.fireEvent(event); }\r\n    // field accessors:\r\n    get displayField() {\r\n        return this.getField('display');\r\n    }\r\n    get id() {\r\n        return this.getField('id');\r\n    }\r\n    set id(value) {\r\n        this.setField('id', value);\r\n    }\r\n    getField(key) {\r\n        return this.data[this.options[`${key}Field`]];\r\n    }\r\n    setField(key, value) {\r\n        this.data[this.options[`${key}Field`]] = value;\r\n    }\r\n    // traversing:\r\n    _findAdjacentSibling(steps, skipHidden = false) {\r\n        const siblings = this._getParentsChildren(skipHidden);\r\n        const index = siblings.indexOf(this);\r\n        return siblings.length > index + steps ? siblings[index + steps] : null;\r\n    }\r\n    findNextSibling(skipHidden = false) {\r\n        return this._findAdjacentSibling(+1, skipHidden);\r\n    }\r\n    findPreviousSibling(skipHidden = false) {\r\n        return this._findAdjacentSibling(-1, skipHidden);\r\n    }\r\n    getVisibleChildren() {\r\n        return this.visibleChildren;\r\n    }\r\n    get visibleChildren() {\r\n        return (this.children || []).filter((node) => !node.isHidden);\r\n    }\r\n    getFirstChild(skipHidden = false) {\r\n        let children = skipHidden ? this.visibleChildren : this.children;\r\n        return children != null && children.length ? children[0] : null;\r\n    }\r\n    getLastChild(skipHidden = false) {\r\n        let children = skipHidden ? this.visibleChildren : this.children;\r\n        return children != null && children.length ? children[children.length - 1] : null;\r\n    }\r\n    findNextNode(goInside = true, skipHidden = false) {\r\n        return goInside && this.isExpanded && this.getFirstChild(skipHidden) ||\r\n            this.findNextSibling(skipHidden) ||\r\n            this.parent && this.parent.findNextNode(false, skipHidden);\r\n    }\r\n    findPreviousNode(skipHidden = false) {\r\n        let previousSibling = this.findPreviousSibling(skipHidden);\r\n        if (!previousSibling) {\r\n            return this.realParent;\r\n        }\r\n        return previousSibling._getLastOpenDescendant(skipHidden);\r\n    }\r\n    _getLastOpenDescendant(skipHidden = false) {\r\n        const lastChild = this.getLastChild(skipHidden);\r\n        return (this.isCollapsed || !lastChild)\r\n            ? this\r\n            : lastChild._getLastOpenDescendant(skipHidden);\r\n    }\r\n    _getParentsChildren(skipHidden = false) {\r\n        const children = this.parent &&\r\n            (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);\r\n        return children || [];\r\n    }\r\n    getIndexInParent(skipHidden = false) {\r\n        return this._getParentsChildren(skipHidden).indexOf(this);\r\n    }\r\n    isDescendantOf(node) {\r\n        if (this === node)\r\n            return true;\r\n        else\r\n            return this.parent && this.parent.isDescendantOf(node);\r\n    }\r\n    getNodePadding() {\r\n        return this.options.levelPadding * (this.level - 1) + 'px';\r\n    }\r\n    getClass() {\r\n        return [this.options.nodeClass(this), `tree-node-level-${this.level}`].join(' ');\r\n    }\r\n    onDrop($event) {\r\n        this.mouseAction('drop', $event.event, {\r\n            from: $event.element,\r\n            to: { parent: this, index: 0, dropOnNode: true }\r\n        });\r\n    }\r\n    allowDrag() {\r\n        return this.options.allowDrag(this);\r\n    }\r\n    // helper methods:\r\n    loadNodeChildren() {\r\n        if (!this.options.getChildren) {\r\n            return Promise.resolve(); // Not getChildren method - for using redux\r\n        }\r\n        return Promise.resolve(this.options.getChildren(this))\r\n            .then((children) => {\r\n            if (children) {\r\n                this.setField('children', children);\r\n                this._initChildren();\r\n                if (this.options.useTriState && this.treeModel.isSelected(this)) {\r\n                    this.setIsSelected(true);\r\n                }\r\n                this.children.forEach((child) => {\r\n                    if (child.getField('isExpanded') && child.hasChildren) {\r\n                        child.expand();\r\n                    }\r\n                });\r\n            }\r\n        }).then(() => {\r\n            this.fireEvent({\r\n                eventName: TREE_EVENTS.loadNodeChildren,\r\n                node: this\r\n            });\r\n        });\r\n    }\r\n    expand() {\r\n        if (!this.isExpanded) {\r\n            this.toggleExpanded();\r\n        }\r\n        return this;\r\n    }\r\n    collapse() {\r\n        if (this.isExpanded) {\r\n            this.toggleExpanded();\r\n        }\r\n        return this;\r\n    }\r\n    doForAll(fn) {\r\n        Promise.resolve(fn(this)).then(() => {\r\n            if (this.children) {\r\n                this.children.forEach((child) => child.doForAll(fn));\r\n            }\r\n        });\r\n    }\r\n    expandAll() {\r\n        this.doForAll((node) => node.expand());\r\n    }\r\n    collapseAll() {\r\n        this.doForAll((node) => node.collapse());\r\n    }\r\n    ensureVisible() {\r\n        if (this.realParent) {\r\n            this.realParent.expand();\r\n            this.realParent.ensureVisible();\r\n        }\r\n        return this;\r\n    }\r\n    toggleExpanded() {\r\n        this.setIsExpanded(!this.isExpanded);\r\n        return this;\r\n    }\r\n    setIsExpanded(value) {\r\n        if (this.hasChildren) {\r\n            this.treeModel.setExpandedNode(this, value);\r\n        }\r\n        return this;\r\n    }\r\n    ;\r\n    autoLoadChildren() {\r\n        this.handler =\r\n            reaction(() => this.isExpanded, (isExpanded) => {\r\n                if (!this.children && this.hasChildren && isExpanded) {\r\n                    this.loadNodeChildren();\r\n                }\r\n            }, { fireImmediately: true });\r\n    }\r\n    dispose() {\r\n        if (this.children) {\r\n            this.children.forEach((child) => child.dispose());\r\n        }\r\n        if (this.handler) {\r\n            this.handler();\r\n        }\r\n        this.parent = null;\r\n        this.children = null;\r\n    }\r\n    setIsActive(value, multi = false) {\r\n        this.treeModel.setActiveNode(this, value, multi);\r\n        if (value) {\r\n            this.focus(this.options.scrollOnActivate);\r\n        }\r\n        return this;\r\n    }\r\n    isSelectable() {\r\n        return this.isLeaf || !this.children || !this.options.useTriState;\r\n    }\r\n    setIsSelected(value) {\r\n        if (this.isSelectable()) {\r\n            this.treeModel.setSelectedNode(this, value);\r\n        }\r\n        else {\r\n            this.visibleChildren.forEach((child) => child.setIsSelected(value));\r\n        }\r\n        return this;\r\n    }\r\n    toggleSelected() {\r\n        this.setIsSelected(!this.isSelected);\r\n        return this;\r\n    }\r\n    toggleActivated(multi = false) {\r\n        this.setIsActive(!this.isActive, multi);\r\n        return this;\r\n    }\r\n    setActiveAndVisible(multi = false) {\r\n        this.setIsActive(true, multi)\r\n            .ensureVisible();\r\n        setTimeout(this.scrollIntoView.bind(this));\r\n        return this;\r\n    }\r\n    scrollIntoView(force = false) {\r\n        this.treeModel.virtualScroll.scrollIntoView(this, force);\r\n    }\r\n    focus(scroll = true) {\r\n        let previousNode = this.treeModel.getFocusedNode();\r\n        this.treeModel.setFocusedNode(this);\r\n        if (scroll) {\r\n            this.scrollIntoView();\r\n        }\r\n        if (previousNode) {\r\n            this.fireEvent({ eventName: TREE_EVENTS.blur, node: previousNode });\r\n        }\r\n        this.fireEvent({ eventName: TREE_EVENTS.focus, node: this });\r\n        return this;\r\n    }\r\n    blur() {\r\n        let previousNode = this.treeModel.getFocusedNode();\r\n        this.treeModel.setFocusedNode(null);\r\n        if (previousNode) {\r\n            this.fireEvent({ eventName: TREE_EVENTS.blur, node: this });\r\n        }\r\n        return this;\r\n    }\r\n    setIsHidden(value) {\r\n        this.treeModel.setIsHidden(this, value);\r\n    }\r\n    hide() {\r\n        this.setIsHidden(true);\r\n    }\r\n    show() {\r\n        this.setIsHidden(false);\r\n    }\r\n    mouseAction(actionName, $event, data = null) {\r\n        this.treeModel.setFocus(true);\r\n        const actionMapping = this.options.actionMapping.mouse;\r\n        const mouseAction = actionMapping[actionName];\r\n        if (mouseAction) {\r\n            mouseAction(this.treeModel, this, $event, data);\r\n        }\r\n    }\r\n    getSelfHeight() {\r\n        return this.options.nodeHeight(this);\r\n    }\r\n    _initChildren() {\r\n        this.children = this.getField('children')\r\n            .map((c, index) => new TreeNode(c, this, this.treeModel, index));\r\n    }\r\n}\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"isHidden\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"isExpanded\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"isActive\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"isFocused\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"isSelected\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"isAllSelected\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"isPartiallySelected\", null);\r\n__decorate$3([\r\n    observable$1,\r\n    __metadata$3(\"design:type\", Array)\r\n], TreeNode.prototype, \"children\", void 0);\r\n__decorate$3([\r\n    observable$1,\r\n    __metadata$3(\"design:type\", Number)\r\n], TreeNode.prototype, \"index\", void 0);\r\n__decorate$3([\r\n    observable$1,\r\n    __metadata$3(\"design:type\", Object)\r\n], TreeNode.prototype, \"position\", void 0);\r\n__decorate$3([\r\n    observable$1,\r\n    __metadata$3(\"design:type\", Number)\r\n], TreeNode.prototype, \"height\", void 0);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Number),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"level\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Array),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"path\", null);\r\n__decorate$3([\r\n    computed$1,\r\n    __metadata$3(\"design:type\", Object),\r\n    __metadata$3(\"design:paramtypes\", [])\r\n], TreeNode.prototype, \"visibleChildren\", null);\r\n__decorate$3([\r\n    action$1,\r\n    __metadata$3(\"design:type\", Function),\r\n    __metadata$3(\"design:paramtypes\", [Object]),\r\n    __metadata$3(\"design:returntype\", void 0)\r\n], TreeNode.prototype, \"setIsSelected\", null);\r\n__decorate$3([\r\n    action$1,\r\n    __metadata$3(\"design:type\", Function),\r\n    __metadata$3(\"design:paramtypes\", []),\r\n    __metadata$3(\"design:returntype\", void 0)\r\n], TreeNode.prototype, \"_initChildren\", null);\r\nfunction uuid() {\r\n    return Math.floor(Math.random() * 10000000000000);\r\n}\n\nvar __decorate$2 = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\r\n        r = Reflect.decorate(decorators, target, key, desc);\r\n    else\r\n        for (var i = decorators.length - 1; i >= 0; i--)\r\n            if (d = decorators[i])\r\n                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata$2 = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\r\n        return Reflect.metadata(k, v);\r\n};\r\nclass TreeModel {\r\n    constructor() {\r\n        this.options = new TreeOptions();\r\n        this.eventNames = Object.keys(TREE_EVENTS);\r\n        this.expandedNodeIds = {};\r\n        this.selectedLeafNodeIds = {};\r\n        this.activeNodeIds = {};\r\n        this.hiddenNodeIds = {};\r\n        this.focusedNodeId = null;\r\n        this.firstUpdate = true;\r\n        this.subscriptions = [];\r\n    }\r\n    // events\r\n    fireEvent(event) {\r\n        event.treeModel = this;\r\n        this.events[event.eventName].emit(event);\r\n        this.events.event.emit(event);\r\n    }\r\n    subscribe(eventName, fn) {\r\n        const subscription = this.events[eventName].subscribe(fn);\r\n        this.subscriptions.push(subscription);\r\n    }\r\n    // getters\r\n    getFocusedNode() {\r\n        return this.focusedNode;\r\n    }\r\n    getActiveNode() {\r\n        return this.activeNodes[0];\r\n    }\r\n    getActiveNodes() {\r\n        return this.activeNodes;\r\n    }\r\n    getVisibleRoots() {\r\n        return this.virtualRoot.visibleChildren;\r\n    }\r\n    getFirstRoot(skipHidden = false) {\r\n        const root = skipHidden ? this.getVisibleRoots() : this.roots;\r\n        return root != null && root.length ? root[0] : null;\r\n    }\r\n    getLastRoot(skipHidden = false) {\r\n        const root = skipHidden ? this.getVisibleRoots() : this.roots;\r\n        return root != null && root.length ? root[root.length - 1] : null;\r\n    }\r\n    get isFocused() {\r\n        return TreeModel.focusedTree === this;\r\n    }\r\n    isNodeFocused(node) {\r\n        return this.focusedNode === node;\r\n    }\r\n    isEmptyTree() {\r\n        return this.roots && this.roots.length === 0;\r\n    }\r\n    get focusedNode() {\r\n        return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;\r\n    }\r\n    get expandedNodes() {\r\n        const nodes = Object.keys(this.expandedNodeIds)\r\n            .filter((id) => this.expandedNodeIds[id])\r\n            .map((id) => this.getNodeById(id));\r\n        return nodes.filter(Boolean);\r\n    }\r\n    get activeNodes() {\r\n        const nodes = Object.keys(this.activeNodeIds)\r\n            .filter((id) => this.activeNodeIds[id])\r\n            .map((id) => this.getNodeById(id));\r\n        return nodes.filter(Boolean);\r\n    }\r\n    get hiddenNodes() {\r\n        const nodes = Object.keys(this.hiddenNodeIds)\r\n            .filter((id) => this.hiddenNodeIds[id])\r\n            .map((id) => this.getNodeById(id));\r\n        return nodes.filter(Boolean);\r\n    }\r\n    get selectedLeafNodes() {\r\n        const nodes = Object.keys(this.selectedLeafNodeIds)\r\n            .filter((id) => this.selectedLeafNodeIds[id])\r\n            .map((id) => this.getNodeById(id));\r\n        return nodes.filter(Boolean);\r\n    }\r\n    // locating nodes\r\n    getNodeByPath(path, startNode = null) {\r\n        if (!path)\r\n            return null;\r\n        startNode = startNode || this.virtualRoot;\r\n        if (path.length === 0)\r\n            return startNode;\r\n        if (!startNode.children)\r\n            return null;\r\n        const childId = path.shift();\r\n        const childNode = startNode.children.find(c => c.id === childId);\r\n        if (!childNode)\r\n            return null;\r\n        return this.getNodeByPath(path, childNode);\r\n    }\r\n    getNodeById(id) {\r\n        const idStr = id.toString();\r\n        return this.getNodeBy((node) => node.id.toString() === idStr);\r\n    }\r\n    getNodeBy(predicate, startNode = null) {\r\n        startNode = startNode || this.virtualRoot;\r\n        if (!startNode.children)\r\n            return null;\r\n        const found = startNode.children.find(predicate);\r\n        if (found) { // found in children\r\n            return found;\r\n        }\r\n        else { // look in children's children\r\n            for (let child of startNode.children) {\r\n                const foundInChildren = this.getNodeBy(predicate, child);\r\n                if (foundInChildren)\r\n                    return foundInChildren;\r\n            }\r\n        }\r\n    }\r\n    isExpanded(node) {\r\n        return this.expandedNodeIds[node.id];\r\n    }\r\n    isHidden(node) {\r\n        return this.hiddenNodeIds[node.id];\r\n    }\r\n    isActive(node) {\r\n        return this.activeNodeIds[node.id];\r\n    }\r\n    isSelected(node) {\r\n        return this.selectedLeafNodeIds[node.id];\r\n    }\r\n    ngOnDestroy() {\r\n        this.dispose();\r\n        this.unsubscribeAll();\r\n    }\r\n    dispose() {\r\n        // Dispose reactions of the replaced nodes\r\n        if (this.virtualRoot) {\r\n            this.virtualRoot.dispose();\r\n        }\r\n    }\r\n    unsubscribeAll() {\r\n        this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n        this.subscriptions = [];\r\n    }\r\n    // actions\r\n    setData({ nodes, options = null, events = null }) {\r\n        if (options) {\r\n            this.options = new TreeOptions(options);\r\n        }\r\n        if (events) {\r\n            this.events = events;\r\n        }\r\n        if (nodes) {\r\n            this.nodes = nodes;\r\n        }\r\n        this.update();\r\n    }\r\n    update() {\r\n        // Rebuild tree:\r\n        let virtualRootConfig = {\r\n            id: this.options.rootId,\r\n            virtual: true,\r\n            [this.options.childrenField]: this.nodes\r\n        };\r\n        this.dispose();\r\n        this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);\r\n        this.roots = this.virtualRoot.children;\r\n        // Fire event:\r\n        if (this.firstUpdate) {\r\n            if (this.roots) {\r\n                this.firstUpdate = false;\r\n                this._calculateExpandedNodes();\r\n            }\r\n        }\r\n        else {\r\n            this.fireEvent({ eventName: TREE_EVENTS.updateData });\r\n        }\r\n    }\r\n    setFocusedNode(node) {\r\n        this.focusedNodeId = node ? node.id : null;\r\n    }\r\n    setFocus(value) {\r\n        TreeModel.focusedTree = value ? this : null;\r\n    }\r\n    doForAll(fn) {\r\n        this.roots.forEach((root) => root.doForAll(fn));\r\n    }\r\n    focusNextNode() {\r\n        let previousNode = this.getFocusedNode();\r\n        let nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);\r\n        if (nextNode)\r\n            nextNode.focus();\r\n    }\r\n    focusPreviousNode() {\r\n        let previousNode = this.getFocusedNode();\r\n        let nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);\r\n        if (nextNode)\r\n            nextNode.focus();\r\n    }\r\n    focusDrillDown() {\r\n        let previousNode = this.getFocusedNode();\r\n        if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {\r\n            previousNode.toggleExpanded();\r\n        }\r\n        else {\r\n            let nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);\r\n            if (nextNode)\r\n                nextNode.focus();\r\n        }\r\n    }\r\n    focusDrillUp() {\r\n        let previousNode = this.getFocusedNode();\r\n        if (!previousNode)\r\n            return;\r\n        if (previousNode.isExpanded) {\r\n            previousNode.toggleExpanded();\r\n        }\r\n        else {\r\n            let nextNode = previousNode.realParent;\r\n            if (nextNode)\r\n                nextNode.focus();\r\n        }\r\n    }\r\n    setActiveNode(node, value, multi = false) {\r\n        if (multi) {\r\n            this._setActiveNodeMulti(node, value);\r\n        }\r\n        else {\r\n            this._setActiveNodeSingle(node, value);\r\n        }\r\n        if (value) {\r\n            node.focus(this.options.scrollOnActivate);\r\n            this.fireEvent({ eventName: TREE_EVENTS.activate, node });\r\n            this.fireEvent({ eventName: TREE_EVENTS.nodeActivate, node }); // For IE11\r\n        }\r\n        else {\r\n            this.fireEvent({ eventName: TREE_EVENTS.deactivate, node });\r\n            this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node }); // For IE11\r\n        }\r\n    }\r\n    setSelectedNode(node, value) {\r\n        this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, { [node.id]: value });\r\n        if (value) {\r\n            node.focus();\r\n            this.fireEvent({ eventName: TREE_EVENTS.select, node });\r\n        }\r\n        else {\r\n            this.fireEvent({ eventName: TREE_EVENTS.deselect, node });\r\n        }\r\n    }\r\n    setExpandedNode(node, value) {\r\n        this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, { [node.id]: value });\r\n        this.fireEvent({ eventName: TREE_EVENTS.toggleExpanded, node, isExpanded: value });\r\n    }\r\n    expandAll() {\r\n        this.roots.forEach((root) => root.expandAll());\r\n    }\r\n    collapseAll() {\r\n        this.roots.forEach((root) => root.collapseAll());\r\n    }\r\n    setIsHidden(node, value) {\r\n        this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, { [node.id]: value });\r\n    }\r\n    setHiddenNodeIds(nodeIds) {\r\n        this.hiddenNodeIds = nodeIds.reduce((hiddenNodeIds, id) => Object.assign(hiddenNodeIds, {\r\n            [id]: true\r\n        }), {});\r\n    }\r\n    performKeyAction(node, $event) {\r\n        const keyAction = this.options.actionMapping.keys[$event.keyCode];\r\n        if (keyAction) {\r\n            $event.preventDefault();\r\n            keyAction(this, node, $event);\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    filterNodes(filter, autoShow = true) {\r\n        let filterFn;\r\n        if (!filter) {\r\n            return this.clearFilter();\r\n        }\r\n        // support function and string filter\r\n        if (filter && typeof filter.valueOf() === 'string') {\r\n            filterFn = (node) => node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\r\n        }\r\n        else if (filter && typeof filter === 'function') {\r\n            filterFn = filter;\r\n        }\r\n        else {\r\n            console.error('Don\\'t know what to do with filter', filter);\r\n            console.error('Should be either a string or function');\r\n            return;\r\n        }\r\n        const ids = {};\r\n        this.roots.forEach((node) => this._filterNode(ids, node, filterFn, autoShow));\r\n        this.hiddenNodeIds = ids;\r\n        this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n    }\r\n    clearFilter() {\r\n        this.hiddenNodeIds = {};\r\n        this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n    }\r\n    moveNode(node, to) {\r\n        const fromIndex = node.getIndexInParent();\r\n        const fromParent = node.parent;\r\n        if (!this.canMoveNode(node, to, fromIndex))\r\n            return;\r\n        const fromChildren = fromParent.getField('children');\r\n        // If node doesn't have children - create children array\r\n        if (!to.parent.getField('children')) {\r\n            to.parent.setField('children', []);\r\n        }\r\n        const toChildren = to.parent.getField('children');\r\n        const originalNode = fromChildren.splice(fromIndex, 1)[0];\r\n        // Compensate for index if already removed from parent:\r\n        let toIndex = (fromParent === to.parent && to.index > fromIndex) ? to.index - 1 : to.index;\r\n        toChildren.splice(toIndex, 0, originalNode);\r\n        fromParent.treeModel.update();\r\n        if (to.parent.treeModel !== fromParent.treeModel) {\r\n            to.parent.treeModel.update();\r\n        }\r\n        this.fireEvent({\r\n            eventName: TREE_EVENTS.moveNode,\r\n            node: originalNode,\r\n            to: { parent: to.parent.data, index: toIndex },\r\n            from: { parent: fromParent.data, index: fromIndex }\r\n        });\r\n    }\r\n    copyNode(node, to) {\r\n        const fromIndex = node.getIndexInParent();\r\n        if (!this.canMoveNode(node, to, fromIndex))\r\n            return;\r\n        // If node doesn't have children - create children array\r\n        if (!to.parent.getField('children')) {\r\n            to.parent.setField('children', []);\r\n        }\r\n        const toChildren = to.parent.getField('children');\r\n        const nodeCopy = this.options.getNodeClone(node);\r\n        toChildren.splice(to.index, 0, nodeCopy);\r\n        node.treeModel.update();\r\n        if (to.parent.treeModel !== node.treeModel) {\r\n            to.parent.treeModel.update();\r\n        }\r\n        this.fireEvent({ eventName: TREE_EVENTS.copyNode, node: nodeCopy, to: { parent: to.parent.data, index: to.index } });\r\n    }\r\n    getState() {\r\n        return {\r\n            expandedNodeIds: this.expandedNodeIds,\r\n            selectedLeafNodeIds: this.selectedLeafNodeIds,\r\n            activeNodeIds: this.activeNodeIds,\r\n            hiddenNodeIds: this.hiddenNodeIds,\r\n            focusedNodeId: this.focusedNodeId\r\n        };\r\n    }\r\n    setState(state) {\r\n        if (!state)\r\n            return;\r\n        Object.assign(this, {\r\n            expandedNodeIds: state.expandedNodeIds || {},\r\n            selectedLeafNodeIds: state.selectedLeafNodeIds || {},\r\n            activeNodeIds: state.activeNodeIds || {},\r\n            hiddenNodeIds: state.hiddenNodeIds || {},\r\n            focusedNodeId: state.focusedNodeId\r\n        });\r\n    }\r\n    subscribeToState(fn) {\r\n        autorun(() => fn(this.getState()));\r\n    }\r\n    canMoveNode(node, to, fromIndex = undefined) {\r\n        const fromNodeIndex = fromIndex || node.getIndexInParent();\r\n        // same node:\r\n        if (node.parent === to.parent && fromIndex === to.index) {\r\n            return false;\r\n        }\r\n        return !to.parent.isDescendantOf(node);\r\n    }\r\n    calculateExpandedNodes() {\r\n        this._calculateExpandedNodes();\r\n    }\r\n    // private methods\r\n    _filterNode(ids, node, filterFn, autoShow) {\r\n        // if node passes function then it's visible\r\n        let isVisible = filterFn(node);\r\n        if (node.children) {\r\n            // if one of node's children passes filter then this node is also visible\r\n            node.children.forEach((child) => {\r\n                if (this._filterNode(ids, child, filterFn, autoShow)) {\r\n                    isVisible = true;\r\n                }\r\n            });\r\n        }\r\n        // mark node as hidden\r\n        if (!isVisible) {\r\n            ids[node.id] = true;\r\n        }\r\n        // auto expand parents to make sure the filtered nodes are visible\r\n        if (autoShow && isVisible) {\r\n            node.ensureVisible();\r\n        }\r\n        return isVisible;\r\n    }\r\n    _calculateExpandedNodes(startNode = null) {\r\n        startNode = startNode || this.virtualRoot;\r\n        if (startNode.data[this.options.isExpandedField]) {\r\n            this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, { [startNode.id]: true });\r\n        }\r\n        if (startNode.children) {\r\n            startNode.children.forEach((child) => this._calculateExpandedNodes(child));\r\n        }\r\n    }\r\n    _setActiveNodeSingle(node, value) {\r\n        // Deactivate all other nodes:\r\n        this.activeNodes\r\n            .filter((activeNode) => activeNode !== node)\r\n            .forEach((activeNode) => {\r\n            this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: activeNode });\r\n            this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: activeNode }); // For IE11\r\n        });\r\n        if (value) {\r\n            this.activeNodeIds = { [node.id]: true };\r\n        }\r\n        else {\r\n            this.activeNodeIds = {};\r\n        }\r\n    }\r\n    _setActiveNodeMulti(node, value) {\r\n        this.activeNodeIds = Object.assign({}, this.activeNodeIds, { [node.id]: value });\r\n    }\r\n}\r\nTreeModel.focusedTree = null;\r\n/** @nocollapse */ TreeModel.ɵfac = function TreeModel_Factory(t) { return new (t || TreeModel)(); };\r\n/** @nocollapse */ TreeModel.ɵprov = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjectable({ token: TreeModel, factory: TreeModel.ɵfac });\r\n__decorate$2([\r\n    observable$1,\r\n    __metadata$2(\"design:type\", Array)\r\n], TreeModel.prototype, \"roots\", void 0);\r\n__decorate$2([\r\n    observable$1,\r\n    __metadata$2(\"design:type\", Object)\r\n], TreeModel.prototype, \"expandedNodeIds\", void 0);\r\n__decorate$2([\r\n    observable$1,\r\n    __metadata$2(\"design:type\", Object)\r\n], TreeModel.prototype, \"selectedLeafNodeIds\", void 0);\r\n__decorate$2([\r\n    observable$1,\r\n    __metadata$2(\"design:type\", Object)\r\n], TreeModel.prototype, \"activeNodeIds\", void 0);\r\n__decorate$2([\r\n    observable$1,\r\n    __metadata$2(\"design:type\", Object)\r\n], TreeModel.prototype, \"hiddenNodeIds\", void 0);\r\n__decorate$2([\r\n    observable$1,\r\n    __metadata$2(\"design:type\", Object)\r\n], TreeModel.prototype, \"focusedNodeId\", void 0);\r\n__decorate$2([\r\n    observable$1,\r\n    __metadata$2(\"design:type\", TreeNode)\r\n], TreeModel.prototype, \"virtualRoot\", void 0);\r\n__decorate$2([\r\n    computed$1,\r\n    __metadata$2(\"design:type\", Object),\r\n    __metadata$2(\"design:paramtypes\", [])\r\n], TreeModel.prototype, \"focusedNode\", null);\r\n__decorate$2([\r\n    computed$1,\r\n    __metadata$2(\"design:type\", Object),\r\n    __metadata$2(\"design:paramtypes\", [])\r\n], TreeModel.prototype, \"expandedNodes\", null);\r\n__decorate$2([\r\n    computed$1,\r\n    __metadata$2(\"design:type\", Object),\r\n    __metadata$2(\"design:paramtypes\", [])\r\n], TreeModel.prototype, \"activeNodes\", null);\r\n__decorate$2([\r\n    computed$1,\r\n    __metadata$2(\"design:type\", Object),\r\n    __metadata$2(\"design:paramtypes\", [])\r\n], TreeModel.prototype, \"hiddenNodes\", null);\r\n__decorate$2([\r\n    computed$1,\r\n    __metadata$2(\"design:type\", Object),\r\n    __metadata$2(\"design:paramtypes\", [])\r\n], TreeModel.prototype, \"selectedLeafNodes\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setData\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"update\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setFocusedNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setFocus\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"doForAll\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"focusNextNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"focusPreviousNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"focusDrillDown\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"focusDrillUp\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object, Object, Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setActiveNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setSelectedNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setExpandedNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"expandAll\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"collapseAll\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setIsHidden\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setHiddenNodeIds\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"filterNodes\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", []),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"clearFilter\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"moveNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object, Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"copyNode\", null);\r\n__decorate$2([\r\n    action$1,\r\n    __metadata$2(\"design:type\", Function),\r\n    __metadata$2(\"design:paramtypes\", [Object]),\r\n    __metadata$2(\"design:returntype\", void 0)\r\n], TreeModel.prototype, \"setState\", null);\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeModel, [{\r\n            type: Injectable\r\n        }], null, { roots: [], expandedNodeIds: [], selectedLeafNodeIds: [], activeNodeIds: [], hiddenNodeIds: [], focusedNodeId: [], virtualRoot: [], focusedNode: [], expandedNodes: [], activeNodes: [], hiddenNodes: [], selectedLeafNodes: [], setData: [], update: [], setFocusedNode: [], setFocus: [], doForAll: [], focusNextNode: [], focusPreviousNode: [], focusDrillDown: [], focusDrillUp: [], setActiveNode: [], setSelectedNode: [], setExpandedNode: [], expandAll: [], collapseAll: [], setIsHidden: [], setHiddenNodeIds: [], filterNodes: [], clearFilter: [], moveNode: [], copyNode: [], setState: [] });\r\n})();\n\nclass TreeDraggedElement {\r\n    constructor() {\r\n        this._draggedElement = null;\r\n    }\r\n    set(draggedElement) {\r\n        this._draggedElement = draggedElement;\r\n    }\r\n    get() {\r\n        return this._draggedElement;\r\n    }\r\n    isDragging() {\r\n        return !!this.get();\r\n    }\r\n}\r\n/** @nocollapse */ TreeDraggedElement.ɵfac = function TreeDraggedElement_Factory(t) { return new (t || TreeDraggedElement)(); };\r\n/** @nocollapse */ TreeDraggedElement.ɵprov = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjectable({ token: TreeDraggedElement, factory: TreeDraggedElement.ɵfac, providedIn: 'root' });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeDraggedElement, [{\r\n            type: Injectable,\r\n            args: [{\r\n                    providedIn: 'root'\r\n                }]\r\n        }], null, null);\r\n})();\n\nvar __decorate$1 = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\r\n        r = Reflect.decorate(decorators, target, key, desc);\r\n    else\r\n        for (var i = decorators.length - 1; i >= 0; i--)\r\n            if (d = decorators[i])\r\n                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata$1 = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\r\n        return Reflect.metadata(k, v);\r\n};\r\nconst Y_OFFSET = 500; // Extra pixels outside the viewport, in each direction, to render nodes in\r\nconst Y_EPSILON = 150; // Minimum pixel change required to recalculate the rendered nodes\r\nclass TreeVirtualScroll {\r\n    constructor(treeModel) {\r\n        this.treeModel = treeModel;\r\n        this.yBlocks = 0;\r\n        this.x = 0;\r\n        this.viewportHeight = null;\r\n        this.viewport = null;\r\n        treeModel.virtualScroll = this;\r\n        this._dispose = [autorun(() => this.fixScroll())];\r\n    }\r\n    get y() {\r\n        return this.yBlocks * Y_EPSILON;\r\n    }\r\n    get totalHeight() {\r\n        return this.treeModel.virtualRoot ? this.treeModel.virtualRoot.height : 0;\r\n    }\r\n    fireEvent(event) {\r\n        this.treeModel.fireEvent(event);\r\n    }\r\n    init() {\r\n        const fn = this.recalcPositions.bind(this);\r\n        fn();\r\n        this._dispose = [\r\n            ...this._dispose,\r\n            reaction(() => this.treeModel.roots, fn),\r\n            reaction(() => this.treeModel.expandedNodeIds, fn),\r\n            reaction(() => this.treeModel.hiddenNodeIds, fn)\r\n        ];\r\n        this.treeModel.subscribe(TREE_EVENTS.loadNodeChildren, fn);\r\n    }\r\n    isEnabled() {\r\n        return this.treeModel.options.useVirtualScroll;\r\n    }\r\n    _setYBlocks(value) {\r\n        this.yBlocks = value;\r\n    }\r\n    recalcPositions() {\r\n        this.treeModel.virtualRoot.height = this._getPositionAfter(this.treeModel.getVisibleRoots(), 0);\r\n    }\r\n    _getPositionAfter(nodes, startPos) {\r\n        let position = startPos;\r\n        nodes.forEach((node) => {\r\n            node.position = position;\r\n            position = this._getPositionAfterNode(node, position);\r\n        });\r\n        return position;\r\n    }\r\n    _getPositionAfterNode(node, startPos) {\r\n        let position = node.getSelfHeight() + startPos;\r\n        if (node.children && node.isExpanded) { // TBD: consider loading component as well\r\n            position = this._getPositionAfter(node.visibleChildren, position);\r\n        }\r\n        node.height = position - startPos;\r\n        return position;\r\n    }\r\n    clear() {\r\n        this._dispose.forEach((d) => d());\r\n    }\r\n    setViewport(viewport) {\r\n        Object.assign(this, {\r\n            viewport,\r\n            x: viewport.scrollLeft,\r\n            yBlocks: Math.round(viewport.scrollTop / Y_EPSILON),\r\n            viewportHeight: viewport.getBoundingClientRect ? viewport.getBoundingClientRect().height : 0\r\n        });\r\n    }\r\n    scrollIntoView(node, force, scrollToMiddle = true) {\r\n        if (node.options.scrollContainer) {\r\n            const scrollContainer = node.options.scrollContainer;\r\n            const scrollContainerHeight = scrollContainer.getBoundingClientRect().height;\r\n            const scrollContainerTop = scrollContainer.getBoundingClientRect().top;\r\n            const nodeTop = this.viewport.getBoundingClientRect().top + node.position - scrollContainerTop;\r\n            if (force || // force scroll to node\r\n                nodeTop < scrollContainer.scrollTop || // node is above scroll container\r\n                nodeTop + node.getSelfHeight() > scrollContainer.scrollTop + scrollContainerHeight) { // node is below container\r\n                scrollContainer.scrollTop = scrollToMiddle ?\r\n                    nodeTop - scrollContainerHeight / 2 : // scroll to middle\r\n                    nodeTop; // scroll to start\r\n            }\r\n        }\r\n        else {\r\n            if (force || // force scroll to node\r\n                node.position < this.y || // node is above viewport\r\n                node.position + node.getSelfHeight() > this.y + this.viewportHeight) { // node is below viewport\r\n                if (this.viewport) {\r\n                    this.viewport.scrollTop = scrollToMiddle ?\r\n                        node.position - this.viewportHeight / 2 : // scroll to middle\r\n                        node.position; // scroll to start\r\n                    this._setYBlocks(Math.floor(this.viewport.scrollTop / Y_EPSILON));\r\n                }\r\n            }\r\n        }\r\n    }\r\n    getViewportNodes(nodes) {\r\n        if (!nodes)\r\n            return [];\r\n        const visibleNodes = nodes.filter((node) => !node.isHidden);\r\n        if (!this.isEnabled())\r\n            return visibleNodes;\r\n        if (!this.viewportHeight || !visibleNodes.length)\r\n            return [];\r\n        // When loading children async this method is called before their height and position is calculated.\r\n        // In that case firstIndex === 0 and lastIndex === visibleNodes.length - 1 (e.g. 1000),\r\n        // which means that it loops through every visibleNodes item and push them into viewportNodes array.\r\n        // We can prevent nodes from being pushed to the array and wait for the appropriate calculations to take place\r\n        const lastVisibleNode = visibleNodes.slice(-1)[0];\r\n        if (!lastVisibleNode.height && lastVisibleNode.position === 0)\r\n            return [];\r\n        // Search for first node in the viewport using binary search\r\n        // Look for first node that starts after the beginning of the viewport (with buffer)\r\n        // Or that ends after the beginning of the viewport\r\n        const firstIndex = binarySearch(visibleNodes, (node) => {\r\n            return (node.position + Y_OFFSET > this.y) ||\r\n                (node.position + node.height > this.y);\r\n        });\r\n        // Search for last node in the viewport using binary search\r\n        // Look for first node that starts after the end of the viewport (with buffer)\r\n        const lastIndex = binarySearch(visibleNodes, (node) => {\r\n            return node.position - Y_OFFSET > this.y + this.viewportHeight;\r\n        }, firstIndex);\r\n        const viewportNodes = [];\r\n        for (let i = firstIndex; i <= lastIndex; i++) {\r\n            viewportNodes.push(visibleNodes[i]);\r\n        }\r\n        return viewportNodes;\r\n    }\r\n    fixScroll() {\r\n        const maxY = Math.max(0, this.totalHeight - this.viewportHeight);\r\n        if (this.y < 0)\r\n            this._setYBlocks(0);\r\n        if (this.y > maxY)\r\n            this._setYBlocks(maxY / Y_EPSILON);\r\n    }\r\n}\r\n/** @nocollapse */ TreeVirtualScroll.ɵfac = function TreeVirtualScroll_Factory(t) { return new (t || TreeVirtualScroll)(i0.ɵɵinject(TreeModel)); };\r\n/** @nocollapse */ TreeVirtualScroll.ɵprov = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjectable({ token: TreeVirtualScroll, factory: TreeVirtualScroll.ɵfac });\r\n__decorate$1([\r\n    observable$1,\r\n    __metadata$1(\"design:type\", Object)\r\n], TreeVirtualScroll.prototype, \"yBlocks\", void 0);\r\n__decorate$1([\r\n    observable$1,\r\n    __metadata$1(\"design:type\", Object)\r\n], TreeVirtualScroll.prototype, \"x\", void 0);\r\n__decorate$1([\r\n    observable$1,\r\n    __metadata$1(\"design:type\", Object)\r\n], TreeVirtualScroll.prototype, \"viewportHeight\", void 0);\r\n__decorate$1([\r\n    computed$1,\r\n    __metadata$1(\"design:type\", Object),\r\n    __metadata$1(\"design:paramtypes\", [])\r\n], TreeVirtualScroll.prototype, \"y\", null);\r\n__decorate$1([\r\n    computed$1,\r\n    __metadata$1(\"design:type\", Object),\r\n    __metadata$1(\"design:paramtypes\", [])\r\n], TreeVirtualScroll.prototype, \"totalHeight\", null);\r\n__decorate$1([\r\n    action$1,\r\n    __metadata$1(\"design:type\", Function),\r\n    __metadata$1(\"design:paramtypes\", [Object]),\r\n    __metadata$1(\"design:returntype\", void 0)\r\n], TreeVirtualScroll.prototype, \"_setYBlocks\", null);\r\n__decorate$1([\r\n    action$1,\r\n    __metadata$1(\"design:type\", Function),\r\n    __metadata$1(\"design:paramtypes\", []),\r\n    __metadata$1(\"design:returntype\", void 0)\r\n], TreeVirtualScroll.prototype, \"recalcPositions\", null);\r\n__decorate$1([\r\n    action$1,\r\n    __metadata$1(\"design:type\", Function),\r\n    __metadata$1(\"design:paramtypes\", [Object]),\r\n    __metadata$1(\"design:returntype\", void 0)\r\n], TreeVirtualScroll.prototype, \"setViewport\", null);\r\n__decorate$1([\r\n    action$1,\r\n    __metadata$1(\"design:type\", Function),\r\n    __metadata$1(\"design:paramtypes\", [Object, Object, Object]),\r\n    __metadata$1(\"design:returntype\", void 0)\r\n], TreeVirtualScroll.prototype, \"scrollIntoView\", null);\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeVirtualScroll, [{\r\n            type: Injectable\r\n        }], function () { return [{ type: TreeModel }]; }, { yBlocks: [], x: [], viewportHeight: [], y: [], totalHeight: [], _setYBlocks: [], recalcPositions: [], setViewport: [], scrollIntoView: [] });\r\n})();\r\nfunction binarySearch(nodes, condition, firstIndex = 0) {\r\n    let index = firstIndex;\r\n    let toIndex = nodes.length - 1;\r\n    while (index !== toIndex) {\r\n        let midIndex = Math.floor((index + toIndex) / 2);\r\n        if (condition(nodes[midIndex])) {\r\n            toIndex = midIndex;\r\n        }\r\n        else {\r\n            if (index === midIndex)\r\n                index = toIndex;\r\n            else\r\n                index = midIndex;\r\n        }\r\n    }\r\n    return index;\r\n}\n\nfunction LoadingComponent_span_0_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"span\");\r\n        i0.ɵɵtext(1, \"loading...\");\r\n        i0.ɵɵelementEnd();\r\n    }\r\n}\r\nconst _c0$9 = function (a0) { return { $implicit: a0 }; };\r\nclass LoadingComponent {\r\n}\r\n/** @nocollapse */ LoadingComponent.ɵfac = function LoadingComponent_Factory(t) { return new (t || LoadingComponent)(); };\r\n/** @nocollapse */ LoadingComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: LoadingComponent, selectors: [[\"tree-loading-component\"]], inputs: { template: \"template\", node: \"node\" }, decls: 2, vars: 5, consts: [[4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]], template: function LoadingComponent_Template(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵtemplate(0, LoadingComponent_span_0_Template, 2, 0, \"span\", 0);\r\n            i0.ɵɵelementContainer(1, 1);\r\n        }\r\n        if (rf & 2) {\r\n            i0.ɵɵproperty(\"ngIf\", !ctx.template);\r\n            i0.ɵɵadvance(1);\r\n            i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction1(3, _c0$9, ctx.node));\r\n        }\r\n    }, dependencies: [i1.NgIf, i1.NgTemplateOutlet], encapsulation: 2 });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(LoadingComponent, [{\r\n            type: Component,\r\n            args: [{\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    selector: 'tree-loading-component',\r\n                    template: `\r\n    <span *ngIf=\"!template\">loading...</span>\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"template\"\r\n      [ngTemplateOutletContext]=\"{ $implicit: node }\"\r\n    >\r\n    </ng-container>\r\n  `\r\n                }]\r\n        }], null, { template: [{\r\n                type: Input\r\n            }], node: [{\r\n                type: Input\r\n            }] });\r\n})();\n\nconst DRAG_OVER_CLASS$1 = 'is-dragging-over';\r\nconst DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';\r\nclass TreeDropDirective {\r\n    constructor(el, renderer, treeDraggedElement, ngZone) {\r\n        this.el = el;\r\n        this.renderer = renderer;\r\n        this.treeDraggedElement = treeDraggedElement;\r\n        this.ngZone = ngZone;\r\n        this.allowDragoverStyling = true;\r\n        this.onDropCallback = new EventEmitter();\r\n        this.onDragOverCallback = new EventEmitter();\r\n        this.onDragLeaveCallback = new EventEmitter();\r\n        this.onDragEnterCallback = new EventEmitter();\r\n        this._allowDrop = (element, $event) => true;\r\n        this.dragOverEventHandler = this.onDragOver.bind(this);\r\n        this.dragEnterEventHandler = this.onDragEnter.bind(this);\r\n        this.dragLeaveEventHandler = this.onDragLeave.bind(this);\r\n    }\r\n    set treeAllowDrop(allowDrop) {\r\n        if (allowDrop instanceof Function) {\r\n            this._allowDrop = allowDrop;\r\n        }\r\n        else\r\n            this._allowDrop = (element, $event) => allowDrop;\r\n    }\r\n    allowDrop($event) {\r\n        return this._allowDrop(this.treeDraggedElement.get(), $event);\r\n    }\r\n    ngAfterViewInit() {\r\n        let el = this.el.nativeElement;\r\n        this.ngZone.runOutsideAngular(() => {\r\n            el.addEventListener('dragover', this.dragOverEventHandler);\r\n            el.addEventListener('dragenter', this.dragEnterEventHandler);\r\n            el.addEventListener('dragleave', this.dragLeaveEventHandler);\r\n        });\r\n    }\r\n    ngOnDestroy() {\r\n        let el = this.el.nativeElement;\r\n        el.removeEventListener('dragover', this.dragOverEventHandler);\r\n        el.removeEventListener('dragenter', this.dragEnterEventHandler);\r\n        el.removeEventListener('dragleave', this.dragLeaveEventHandler);\r\n    }\r\n    onDragOver($event) {\r\n        if (!this.allowDrop($event)) {\r\n            if (this.allowDragoverStyling) {\r\n                return this.addDisabledClass();\r\n            }\r\n            return;\r\n        }\r\n        this.onDragOverCallback.emit({ event: $event, element: this.treeDraggedElement.get() });\r\n        $event.preventDefault();\r\n        if (this.allowDragoverStyling) {\r\n            this.addClass();\r\n        }\r\n    }\r\n    onDragEnter($event) {\r\n        if (!this.allowDrop($event))\r\n            return;\r\n        $event.preventDefault();\r\n        this.onDragEnterCallback.emit({ event: $event, element: this.treeDraggedElement.get() });\r\n    }\r\n    onDragLeave($event) {\r\n        if (!this.allowDrop($event)) {\r\n            if (this.allowDragoverStyling) {\r\n                return this.removeDisabledClass();\r\n            }\r\n            return;\r\n        }\r\n        this.onDragLeaveCallback.emit({ event: $event, element: this.treeDraggedElement.get() });\r\n        if (this.allowDragoverStyling) {\r\n            this.removeClass();\r\n        }\r\n    }\r\n    onDrop($event) {\r\n        if (!this.allowDrop($event))\r\n            return;\r\n        $event.preventDefault();\r\n        this.onDropCallback.emit({ event: $event, element: this.treeDraggedElement.get() });\r\n        if (this.allowDragoverStyling) {\r\n            this.removeClass();\r\n        }\r\n        this.treeDraggedElement.set(null);\r\n    }\r\n    addClass() {\r\n        this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS$1);\r\n    }\r\n    removeClass() {\r\n        this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS$1);\r\n    }\r\n    addDisabledClass() {\r\n        this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n    }\r\n    removeDisabledClass() {\r\n        this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n    }\r\n}\r\n/** @nocollapse */ TreeDropDirective.ɵfac = function TreeDropDirective_Factory(t) { return new (t || TreeDropDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(TreeDraggedElement), i0.ɵɵdirectiveInject(i0.NgZone)); };\r\n/** @nocollapse */ TreeDropDirective.ɵdir = /** @pureOrBreakMyCode */ i0.ɵɵdefineDirective({ type: TreeDropDirective, selectors: [[\"\", \"treeDrop\", \"\"]], hostBindings: function TreeDropDirective_HostBindings(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵlistener(\"drop\", function TreeDropDirective_drop_HostBindingHandler($event) { return ctx.onDrop($event); });\r\n        }\r\n    }, inputs: { allowDragoverStyling: \"allowDragoverStyling\", treeAllowDrop: \"treeAllowDrop\" }, outputs: { onDropCallback: \"treeDrop\", onDragOverCallback: \"treeDropDragOver\", onDragLeaveCallback: \"treeDropDragLeave\", onDragEnterCallback: \"treeDropDragEnter\" } });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeDropDirective, [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[treeDrop]'\r\n                }]\r\n        }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: TreeDraggedElement }, { type: i0.NgZone }]; }, { allowDragoverStyling: [{\r\n                type: Input\r\n            }], onDropCallback: [{\r\n                type: Output,\r\n                args: ['treeDrop']\r\n            }], onDragOverCallback: [{\r\n                type: Output,\r\n                args: ['treeDropDragOver']\r\n            }], onDragLeaveCallback: [{\r\n                type: Output,\r\n                args: ['treeDropDragLeave']\r\n            }], onDragEnterCallback: [{\r\n                type: Output,\r\n                args: ['treeDropDragEnter']\r\n            }], treeAllowDrop: [{\r\n                type: Input\r\n            }], onDrop: [{\r\n                type: HostListener,\r\n                args: ['drop', ['$event']]\r\n            }] });\r\n})();\n\nclass TreeNodeDropSlot {\r\n    onDrop($event) {\r\n        this.node.mouseAction('drop', $event.event, {\r\n            from: $event.element,\r\n            to: { parent: this.node, index: this.dropIndex }\r\n        });\r\n    }\r\n    allowDrop(element, $event) {\r\n        return this.node.options.allowDrop(element, { parent: this.node, index: this.dropIndex }, $event);\r\n    }\r\n}\r\n/** @nocollapse */ TreeNodeDropSlot.ɵfac = function TreeNodeDropSlot_Factory(t) { return new (t || TreeNodeDropSlot)(); };\r\n/** @nocollapse */ TreeNodeDropSlot.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeDropSlot, selectors: [[\"TreeNodeDropSlot\"], [\"tree-node-drop-slot\"]], inputs: { node: \"node\", dropIndex: \"dropIndex\" }, decls: 1, vars: 2, consts: [[1, \"node-drop-slot\", 3, \"treeAllowDrop\", \"allowDragoverStyling\", \"treeDrop\"]], template: function TreeNodeDropSlot_Template(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵelementStart(0, \"div\", 0);\r\n            i0.ɵɵlistener(\"treeDrop\", function TreeNodeDropSlot_Template_div_treeDrop_0_listener($event) { return ctx.onDrop($event); });\r\n            i0.ɵɵelementEnd();\r\n        }\r\n        if (rf & 2) {\r\n            i0.ɵɵproperty(\"treeAllowDrop\", ctx.allowDrop.bind(ctx))(\"allowDragoverStyling\", true);\r\n        }\r\n    }, dependencies: [TreeDropDirective], encapsulation: 2 });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeDropSlot, [{\r\n            type: Component,\r\n            args: [{ selector: 'TreeNodeDropSlot, tree-node-drop-slot', encapsulation: ViewEncapsulation.None, template: `\r\n    <div\r\n      class=\"node-drop-slot\"\r\n      (treeDrop)=\"onDrop($event)\"\r\n      [treeAllowDrop]=\"allowDrop.bind(this)\"\r\n      [allowDragoverStyling]=\"true\">\r\n    </div>\r\n  ` }]\r\n        }], null, { node: [{\r\n                type: Input\r\n            }], dropIndex: [{\r\n                type: Input\r\n            }] });\r\n})();\n\n// Re-export mobx operators to be able to use inside components with AOT:\r\nfunction actionInternal(...args) {\r\n    return action$1(...args);\r\n}\r\nconst action = Object.assign(actionInternal, action$1);\r\nfunction computedInternal(...args) {\r\n    return computed$1(...args);\r\n}\r\nconst computed = Object.assign(computedInternal, computed$1);\r\nfunction observableInternal(...args) {\r\n    return observable$1(...args);\r\n}\r\nconst observable = Object.assign(observableInternal, observable$1);\n\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\")\r\n        r = Reflect.decorate(decorators, target, key, desc);\r\n    else\r\n        for (var i = decorators.length - 1; i >= 0; i--)\r\n            if (d = decorators[i])\r\n                r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\nvar __metadata = (this && this.__metadata) || function (k, v) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\")\r\n        return Reflect.metadata(k, v);\r\n};\r\nfunction TreeNodeCollectionComponent_ng_container_0_tree_node_2_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelement(0, \"tree-node\", 2);\r\n    }\r\n    if (rf & 2) {\r\n        const node_r2 = ctx.$implicit;\r\n        const i_r3 = ctx.index;\r\n        const ctx_r1 = i0.ɵɵnextContext(2);\r\n        i0.ɵɵproperty(\"node\", node_r2)(\"index\", i_r3)(\"templates\", ctx_r1.templates);\r\n    }\r\n}\r\nfunction TreeNodeCollectionComponent_ng_container_0_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelementContainerStart(0);\r\n        i0.ɵɵelementStart(1, \"div\");\r\n        i0.ɵɵtemplate(2, TreeNodeCollectionComponent_ng_container_0_tree_node_2_Template, 1, 3, \"tree-node\", 1);\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementContainerEnd();\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r0 = i0.ɵɵnextContext();\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵstyleProp(\"margin-top\", ctx_r0.marginTop);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngForOf\", ctx_r0.viewportNodes)(\"ngForTrackBy\", ctx_r0.trackNode);\r\n    }\r\n}\r\nconst _c0$8 = function () { return { dontDetach: true }; };\r\nclass TreeNodeCollectionComponent {\r\n    constructor() {\r\n        this._dispose = [];\r\n    }\r\n    get nodes() {\r\n        return this._nodes;\r\n    }\r\n    set nodes(nodes) {\r\n        this.setNodes(nodes);\r\n    }\r\n    get marginTop() {\r\n        const firstNode = this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];\r\n        const relativePosition = firstNode && firstNode.parent\r\n            ? firstNode.position -\r\n                firstNode.parent.position -\r\n                firstNode.parent.getSelfHeight()\r\n            : 0;\r\n        return `${relativePosition}px`;\r\n    }\r\n    setNodes(nodes) {\r\n        this._nodes = nodes;\r\n    }\r\n    ngOnInit() {\r\n        this.virtualScroll = this.treeModel.virtualScroll;\r\n        this._dispose = [\r\n            // return node indexes so we can compare structurally,\r\n            reaction(() => {\r\n                return this.virtualScroll\r\n                    .getViewportNodes(this.nodes)\r\n                    .map(n => n.index);\r\n            }, nodeIndexes => {\r\n                this.viewportNodes = nodeIndexes.map(i => this.nodes[i]);\r\n            }, { compareStructural: true, fireImmediately: true }),\r\n            reaction(() => this.nodes, nodes => {\r\n                this.viewportNodes = this.virtualScroll.getViewportNodes(nodes);\r\n            })\r\n        ];\r\n    }\r\n    ngOnDestroy() {\r\n        this._dispose.forEach(d => d());\r\n    }\r\n    trackNode(index, node) {\r\n        return node.id;\r\n    }\r\n}\r\n/** @nocollapse */ TreeNodeCollectionComponent.ɵfac = function TreeNodeCollectionComponent_Factory(t) { return new (t || TreeNodeCollectionComponent)(); };\r\n/** @nocollapse */ TreeNodeCollectionComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeCollectionComponent, selectors: [[\"tree-node-collection\"]], inputs: { nodes: \"nodes\", treeModel: \"treeModel\", templates: \"templates\" }, decls: 1, vars: 2, consts: [[4, \"treeMobxAutorun\"], [3, \"node\", \"index\", \"templates\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [3, \"node\", \"index\", \"templates\"]], template: function TreeNodeCollectionComponent_Template(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵtemplate(0, TreeNodeCollectionComponent_ng_container_0_Template, 3, 4, \"ng-container\", 0);\r\n        }\r\n        if (rf & 2) {\r\n            i0.ɵɵproperty(\"treeMobxAutorun\", i0.ɵɵpureFunction0(1, _c0$8));\r\n        }\r\n    }, encapsulation: 2 });\r\n__decorate([\r\n    observable,\r\n    __metadata(\"design:type\", Object)\r\n], TreeNodeCollectionComponent.prototype, \"_nodes\", void 0);\r\n__decorate([\r\n    observable,\r\n    __metadata(\"design:type\", Array)\r\n], TreeNodeCollectionComponent.prototype, \"viewportNodes\", void 0);\r\n__decorate([\r\n    computed,\r\n    __metadata(\"design:type\", String),\r\n    __metadata(\"design:paramtypes\", [])\r\n], TreeNodeCollectionComponent.prototype, \"marginTop\", null);\r\n__decorate([\r\n    action,\r\n    __metadata(\"design:type\", Function),\r\n    __metadata(\"design:paramtypes\", [Object]),\r\n    __metadata(\"design:returntype\", void 0)\r\n], TreeNodeCollectionComponent.prototype, \"setNodes\", null);\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeCollectionComponent, [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'tree-node-collection',\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.margin-top]=\"marginTop\">\r\n        <tree-node\r\n          *ngFor=\"let node of viewportNodes; let i = index; trackBy: trackNode\"\r\n          [node]=\"node\"\r\n          [index]=\"i\"\r\n          [templates]=\"templates\"\r\n        >\r\n        </tree-node>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n                }]\r\n        }], null, { nodes: [{\r\n                type: Input\r\n            }], treeModel: [{\r\n                type: Input\r\n            }], _nodes: [], templates: [{\r\n                type: Input\r\n            }], viewportNodes: [], marginTop: [], setNodes: [] });\r\n})();\n\nfunction TreeViewportComponent_ng_container_0_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelementContainerStart(0);\r\n        i0.ɵɵelementStart(1, \"div\");\r\n        i0.ɵɵprojection(2);\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementContainerEnd();\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r0 = i0.ɵɵnextContext();\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵstyleProp(\"height\", ctx_r0.getTotalHeight());\r\n    }\r\n}\r\nconst _c0$7 = function () { return { dontDetach: true }; };\r\nconst _c1$2 = [\"*\"];\r\nclass TreeViewportComponent {\r\n    constructor(elementRef, virtualScroll) {\r\n        this.elementRef = elementRef;\r\n        this.virtualScroll = virtualScroll;\r\n        this.setViewport = this.throttle(() => {\r\n            this.virtualScroll.setViewport(this.elementRef.nativeElement);\r\n        }, 17);\r\n        this.scrollEventHandler = this.setViewport.bind(this);\r\n    }\r\n    ngOnInit() {\r\n        this.virtualScroll.init();\r\n    }\r\n    ngAfterViewInit() {\r\n        setTimeout(() => {\r\n            this.setViewport();\r\n            this.virtualScroll.fireEvent({ eventName: TREE_EVENTS.initialized });\r\n        });\r\n        let el = this.elementRef.nativeElement;\r\n        el.addEventListener('scroll', this.scrollEventHandler);\r\n    }\r\n    ngOnDestroy() {\r\n        this.virtualScroll.clear();\r\n        let el = this.elementRef.nativeElement;\r\n        el.removeEventListener('scroll', this.scrollEventHandler);\r\n    }\r\n    getTotalHeight() {\r\n        return ((this.virtualScroll.isEnabled() &&\r\n            this.virtualScroll.totalHeight + 'px') ||\r\n            'auto');\r\n    }\r\n    throttle(func, timeFrame) {\r\n        let lastTime = 0;\r\n        return function () {\r\n            let now = Date.now();\r\n            if (now - lastTime >= timeFrame) {\r\n                func();\r\n                lastTime = now;\r\n            }\r\n        };\r\n    }\r\n}\r\n/** @nocollapse */ TreeViewportComponent.ɵfac = function TreeViewportComponent_Factory(t) { return new (t || TreeViewportComponent)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(TreeVirtualScroll)); };\r\n/** @nocollapse */ TreeViewportComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeViewportComponent, selectors: [[\"tree-viewport\"]], features: [i0.ɵɵProvidersFeature([TreeVirtualScroll])], ngContentSelectors: _c1$2, decls: 1, vars: 2, consts: [[4, \"treeMobxAutorun\"]], template: function TreeViewportComponent_Template(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵprojectionDef();\r\n            i0.ɵɵtemplate(0, TreeViewportComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\r\n        }\r\n        if (rf & 2) {\r\n            i0.ɵɵproperty(\"treeMobxAutorun\", i0.ɵɵpureFunction0(1, _c0$7));\r\n        }\r\n    }, dependencies: [TreeMobxAutorunDirective], encapsulation: 2 });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeViewportComponent, [{\r\n            type: Component,\r\n            args: [{ selector: 'tree-viewport', providers: [TreeVirtualScroll], template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.height]=\"getTotalHeight()\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </ng-container>\r\n  ` }]\r\n        }], function () { return [{ type: i0.ElementRef }, { type: TreeVirtualScroll }]; }, null);\r\n})();\n\nconst _c0$6 = [\"loadingTemplate\"];\r\nconst _c1$1 = [\"treeNodeTemplate\"];\r\nconst _c2 = [\"treeNodeWrapperTemplate\"];\r\nconst _c3 = [\"treeNodeFullTemplate\"];\r\nconst _c4 = [\"viewport\"];\r\nconst _c5 = function (a0, a1, a2, a3) { return { loadingTemplate: a0, treeNodeTemplate: a1, treeNodeWrapperTemplate: a2, treeNodeFullTemplate: a3 }; };\r\nfunction TreeComponent_tree_node_collection_3_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelement(0, \"tree-node-collection\", 4);\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r1 = i0.ɵɵnextContext();\r\n        i0.ɵɵproperty(\"nodes\", ctx_r1.treeModel.roots)(\"treeModel\", ctx_r1.treeModel)(\"templates\", i0.ɵɵpureFunction4(3, _c5, ctx_r1.loadingTemplate, ctx_r1.treeNodeTemplate, ctx_r1.treeNodeWrapperTemplate, ctx_r1.treeNodeFullTemplate));\r\n    }\r\n}\r\nfunction TreeComponent_tree_node_drop_slot_4_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelement(0, \"tree-node-drop-slot\", 5);\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r2 = i0.ɵɵnextContext();\r\n        i0.ɵɵproperty(\"dropIndex\", 0)(\"node\", ctx_r2.treeModel.virtualRoot);\r\n    }\r\n}\r\nclass TreeComponent {\r\n    constructor(treeModel, treeDraggedElement) {\r\n        this.treeModel = treeModel;\r\n        this.treeDraggedElement = treeDraggedElement;\r\n        treeModel.eventNames.forEach((name) => this[name] = new EventEmitter());\r\n        treeModel.subscribeToState((state) => this.stateChange.emit(state));\r\n    }\r\n    // Will be handled in ngOnChanges\r\n    set nodes(nodes) {\r\n    }\r\n    ;\r\n    set options(options) {\r\n    }\r\n    ;\r\n    set focused(value) {\r\n        this.treeModel.setFocus(value);\r\n    }\r\n    set state(state) {\r\n        this.treeModel.setState(state);\r\n    }\r\n    onKeydown($event) {\r\n        if (!this.treeModel.isFocused)\r\n            return;\r\n        if (['input', 'textarea'].includes(document.activeElement.tagName.toLowerCase()))\r\n            return;\r\n        const focusedNode = this.treeModel.getFocusedNode();\r\n        this.treeModel.performKeyAction(focusedNode, $event);\r\n    }\r\n    onMousedown($event) {\r\n        function isOutsideClick(startElement, nodeName) {\r\n            return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);\r\n        }\r\n        if (isOutsideClick($event.target, 'tree-root')) {\r\n            this.treeModel.setFocus(false);\r\n        }\r\n    }\r\n    ngOnChanges(changes) {\r\n        if (changes.options || changes.nodes) {\r\n            this.treeModel.setData({\r\n                options: changes.options && changes.options.currentValue,\r\n                nodes: changes.nodes && changes.nodes.currentValue,\r\n                events: this.pick(this, this.treeModel.eventNames)\r\n            });\r\n        }\r\n    }\r\n    sizeChanged() {\r\n        this.viewportComponent.setViewport();\r\n    }\r\n    pick(object, keys) {\r\n        return keys.reduce((obj, key) => {\r\n            if (object && object.hasOwnProperty(key)) {\r\n                obj[key] = object[key];\r\n            }\r\n            return obj;\r\n        }, {});\r\n    }\r\n}\r\n/** @nocollapse */ TreeComponent.ɵfac = function TreeComponent_Factory(t) { return new (t || TreeComponent)(i0.ɵɵdirectiveInject(TreeModel), i0.ɵɵdirectiveInject(TreeDraggedElement)); };\r\n/** @nocollapse */ TreeComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeComponent, selectors: [[\"Tree\"], [\"tree-root\"]], contentQueries: function TreeComponent_ContentQueries(rf, ctx, dirIndex) {\r\n        if (rf & 1) {\r\n            i0.ɵɵcontentQuery(dirIndex, _c0$6, 5);\r\n            i0.ɵɵcontentQuery(dirIndex, _c1$1, 5);\r\n            i0.ɵɵcontentQuery(dirIndex, _c2, 5);\r\n            i0.ɵɵcontentQuery(dirIndex, _c3, 5);\r\n        }\r\n        if (rf & 2) {\r\n            let _t;\r\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.loadingTemplate = _t.first);\r\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeNodeTemplate = _t.first);\r\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeNodeWrapperTemplate = _t.first);\r\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.treeNodeFullTemplate = _t.first);\r\n        }\r\n    }, viewQuery: function TreeComponent_Query(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵviewQuery(_c4, 5);\r\n        }\r\n        if (rf & 2) {\r\n            let _t;\r\n            i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.viewportComponent = _t.first);\r\n        }\r\n    }, hostBindings: function TreeComponent_HostBindings(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵlistener(\"keydown\", function TreeComponent_keydown_HostBindingHandler($event) { return ctx.onKeydown($event); }, false, i0.ɵɵresolveBody)(\"mousedown\", function TreeComponent_mousedown_HostBindingHandler($event) { return ctx.onMousedown($event); }, false, i0.ɵɵresolveBody);\r\n        }\r\n    }, inputs: { nodes: \"nodes\", options: \"options\", focused: \"focused\", state: \"state\" }, outputs: { toggleExpanded: \"toggleExpanded\", activate: \"activate\", deactivate: \"deactivate\", nodeActivate: \"nodeActivate\", nodeDeactivate: \"nodeDeactivate\", select: \"select\", deselect: \"deselect\", focus: \"focus\", blur: \"blur\", updateData: \"updateData\", initialized: \"initialized\", moveNode: \"moveNode\", copyNode: \"copyNode\", loadNodeChildren: \"loadNodeChildren\", changeFilter: \"changeFilter\", event: \"event\", stateChange: \"stateChange\" }, features: [i0.ɵɵProvidersFeature([TreeModel]), i0.ɵɵNgOnChangesFeature], decls: 5, vars: 6, consts: [[\"viewport\", \"\"], [1, \"angular-tree-component\"], [3, \"nodes\", \"treeModel\", \"templates\", 4, \"ngIf\"], [\"class\", \"empty-tree-drop-slot\", 3, \"dropIndex\", \"node\", 4, \"ngIf\"], [3, \"nodes\", \"treeModel\", \"templates\"], [1, \"empty-tree-drop-slot\", 3, \"dropIndex\", \"node\"]], template: function TreeComponent_Template(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵelementStart(0, \"tree-viewport\", null, 0)(2, \"div\", 1);\r\n            i0.ɵɵtemplate(3, TreeComponent_tree_node_collection_3_Template, 1, 8, \"tree-node-collection\", 2);\r\n            i0.ɵɵtemplate(4, TreeComponent_tree_node_drop_slot_4_Template, 1, 2, \"tree-node-drop-slot\", 3);\r\n            i0.ɵɵelementEnd()();\r\n        }\r\n        if (rf & 2) {\r\n            i0.ɵɵadvance(2);\r\n            i0.ɵɵclassProp(\"node-dragging\", ctx.treeDraggedElement.isDragging())(\"angular-tree-component-rtl\", ctx.treeModel.options.rtl);\r\n            i0.ɵɵadvance(1);\r\n            i0.ɵɵproperty(\"ngIf\", ctx.treeModel.roots);\r\n            i0.ɵɵadvance(1);\r\n            i0.ɵɵproperty(\"ngIf\", ctx.treeModel.isEmptyTree());\r\n        }\r\n    }, dependencies: [i1.NgIf, TreeNodeDropSlot, TreeNodeCollectionComponent, TreeViewportComponent], encapsulation: 2 });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeComponent, [{\r\n            type: Component,\r\n            args: [{ selector: 'Tree, tree-root', providers: [TreeModel], template: `\r\n      <tree-viewport #viewport>\r\n          <div\r\n                  class=\"angular-tree-component\"\r\n                  [class.node-dragging]=\"treeDraggedElement.isDragging()\"\r\n                  [class.angular-tree-component-rtl]=\"treeModel.options.rtl\">\r\n              <tree-node-collection\r\n                      *ngIf=\"treeModel.roots\"\r\n                      [nodes]=\"treeModel.roots\"\r\n                      [treeModel]=\"treeModel\"\r\n                      [templates]=\"{\r\n            loadingTemplate: loadingTemplate,\r\n            treeNodeTemplate: treeNodeTemplate,\r\n            treeNodeWrapperTemplate: treeNodeWrapperTemplate,\r\n            treeNodeFullTemplate: treeNodeFullTemplate\r\n          }\">\r\n              </tree-node-collection>\r\n              <tree-node-drop-slot\r\n                      class=\"empty-tree-drop-slot\"\r\n                      *ngIf=\"treeModel.isEmptyTree()\"\r\n                      [dropIndex]=\"0\"\r\n                      [node]=\"treeModel.virtualRoot\">\r\n              </tree-node-drop-slot>\r\n          </div>\r\n      </tree-viewport>\r\n  ` }]\r\n        }], function () { return [{ type: TreeModel }, { type: TreeDraggedElement }]; }, { loadingTemplate: [{\r\n                type: ContentChild,\r\n                args: ['loadingTemplate', { static: false }]\r\n            }], treeNodeTemplate: [{\r\n                type: ContentChild,\r\n                args: ['treeNodeTemplate', { static: false }]\r\n            }], treeNodeWrapperTemplate: [{\r\n                type: ContentChild,\r\n                args: ['treeNodeWrapperTemplate', { static: false }]\r\n            }], treeNodeFullTemplate: [{\r\n                type: ContentChild,\r\n                args: ['treeNodeFullTemplate', { static: false }]\r\n            }], viewportComponent: [{\r\n                type: ViewChild,\r\n                args: ['viewport', { static: false }]\r\n            }], nodes: [{\r\n                type: Input\r\n            }], options: [{\r\n                type: Input\r\n            }], focused: [{\r\n                type: Input\r\n            }], state: [{\r\n                type: Input\r\n            }], toggleExpanded: [{\r\n                type: Output\r\n            }], activate: [{\r\n                type: Output\r\n            }], deactivate: [{\r\n                type: Output\r\n            }], nodeActivate: [{\r\n                type: Output\r\n            }], nodeDeactivate: [{\r\n                type: Output\r\n            }], select: [{\r\n                type: Output\r\n            }], deselect: [{\r\n                type: Output\r\n            }], focus: [{\r\n                type: Output\r\n            }], blur: [{\r\n                type: Output\r\n            }], updateData: [{\r\n                type: Output\r\n            }], initialized: [{\r\n                type: Output\r\n            }], moveNode: [{\r\n                type: Output\r\n            }], copyNode: [{\r\n                type: Output\r\n            }], loadNodeChildren: [{\r\n                type: Output\r\n            }], changeFilter: [{\r\n                type: Output\r\n            }], event: [{\r\n                type: Output\r\n            }], stateChange: [{\r\n                type: Output\r\n            }], onKeydown: [{\r\n                type: HostListener,\r\n                args: ['body: keydown', ['$event']]\r\n            }], onMousedown: [{\r\n                type: HostListener,\r\n                args: ['body: mousedown', ['$event']]\r\n            }] });\r\n})();\n\nconst EASE_ACCELERATION = 1.005;\r\nclass TreeAnimateOpenDirective {\r\n    constructor(renderer, templateRef, viewContainerRef) {\r\n        this.renderer = renderer;\r\n        this.templateRef = templateRef;\r\n        this.viewContainerRef = viewContainerRef;\r\n    }\r\n    set isOpen(value) {\r\n        if (value) {\r\n            this._show();\r\n            if (this.isEnabled && this._isOpen === false) {\r\n                this._animateOpen();\r\n            }\r\n        }\r\n        else {\r\n            this.isEnabled ? this._animateClose() : this._hide();\r\n        }\r\n        this._isOpen = !!value;\r\n    }\r\n    ;\r\n    _show() {\r\n        if (this.innerElement)\r\n            return;\r\n        // create child view\r\n        this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];\r\n    }\r\n    _hide() {\r\n        this.viewContainerRef.clear();\r\n        this.innerElement = null;\r\n    }\r\n    _animateOpen() {\r\n        let delta = this.animateSpeed;\r\n        let ease = this.animateAcceleration;\r\n        let maxHeight = 0;\r\n        // set height to 0\r\n        this.renderer.setStyle(this.innerElement, 'max-height', `0`);\r\n        // increase maxHeight until height doesn't change\r\n        setTimeout(() => {\r\n            const i = setInterval(() => {\r\n                if (!this._isOpen || !this.innerElement)\r\n                    return clearInterval(i);\r\n                maxHeight += delta;\r\n                const roundedMaxHeight = Math.round(maxHeight);\r\n                this.renderer.setStyle(this.innerElement, 'max-height', `${roundedMaxHeight}px`);\r\n                const height = this.innerElement.getBoundingClientRect ? this.innerElement.getBoundingClientRect().height : 0; // TBD use renderer\r\n                delta *= ease;\r\n                ease *= EASE_ACCELERATION;\r\n                if (height < roundedMaxHeight) {\r\n                    // Make maxHeight auto because animation finished and container might change height later on\r\n                    this.renderer.setStyle(this.innerElement, 'max-height', null);\r\n                    clearInterval(i);\r\n                }\r\n            }, 17);\r\n        });\r\n    }\r\n    _animateClose() {\r\n        if (!this.innerElement)\r\n            return;\r\n        let delta = this.animateSpeed;\r\n        let ease = this.animateAcceleration;\r\n        let height = this.innerElement.getBoundingClientRect().height; // TBD use renderer\r\n        // slowly decrease maxHeight to 0, starting from current height\r\n        const i = setInterval(() => {\r\n            if (this._isOpen || !this.innerElement)\r\n                return clearInterval(i);\r\n            height -= delta;\r\n            this.renderer.setStyle(this.innerElement, 'max-height', `${height}px`);\r\n            delta *= ease;\r\n            ease *= EASE_ACCELERATION;\r\n            if (height <= 0) {\r\n                // after animation complete - remove child element\r\n                this.viewContainerRef.clear();\r\n                this.innerElement = null;\r\n                clearInterval(i);\r\n            }\r\n        }, 17);\r\n    }\r\n}\r\n/** @nocollapse */ TreeAnimateOpenDirective.ɵfac = function TreeAnimateOpenDirective_Factory(t) { return new (t || TreeAnimateOpenDirective)(i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(i0.TemplateRef), i0.ɵɵdirectiveInject(i0.ViewContainerRef)); };\r\n/** @nocollapse */ TreeAnimateOpenDirective.ɵdir = /** @pureOrBreakMyCode */ i0.ɵɵdefineDirective({ type: TreeAnimateOpenDirective, selectors: [[\"\", \"treeAnimateOpen\", \"\"]], inputs: { animateSpeed: [\"treeAnimateOpenSpeed\", \"animateSpeed\"], animateAcceleration: [\"treeAnimateOpenAcceleration\", \"animateAcceleration\"], isEnabled: [\"treeAnimateOpenEnabled\", \"isEnabled\"], isOpen: [\"treeAnimateOpen\", \"isOpen\"] } });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeAnimateOpenDirective, [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[treeAnimateOpen]'\r\n                }]\r\n        }], function () { return [{ type: i0.Renderer2 }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; }, { animateSpeed: [{\r\n                type: Input,\r\n                args: ['treeAnimateOpenSpeed']\r\n            }], animateAcceleration: [{\r\n                type: Input,\r\n                args: ['treeAnimateOpenAcceleration']\r\n            }], isEnabled: [{\r\n                type: Input,\r\n                args: ['treeAnimateOpenEnabled']\r\n            }], isOpen: [{\r\n                type: Input,\r\n                args: ['treeAnimateOpen']\r\n            }] });\r\n})();\n\nfunction TreeNodeChildrenComponent_ng_container_0_div_1_tree_node_collection_1_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelement(0, \"tree-node-collection\", 4);\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r2 = i0.ɵɵnextContext(3);\r\n        i0.ɵɵproperty(\"nodes\", ctx_r2.node.children)(\"templates\", ctx_r2.templates)(\"treeModel\", ctx_r2.node.treeModel);\r\n    }\r\n}\r\nfunction TreeNodeChildrenComponent_ng_container_0_div_1_tree_loading_component_2_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelement(0, \"tree-loading-component\", 5);\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r3 = i0.ɵɵnextContext(3);\r\n        i0.ɵɵstyleProp(\"padding-left\", ctx_r3.node.getNodePadding());\r\n        i0.ɵɵproperty(\"template\", ctx_r3.templates.loadingTemplate)(\"node\", ctx_r3.node);\r\n    }\r\n}\r\nfunction TreeNodeChildrenComponent_ng_container_0_div_1_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"div\");\r\n        i0.ɵɵtemplate(1, TreeNodeChildrenComponent_ng_container_0_div_1_tree_node_collection_1_Template, 1, 3, \"tree-node-collection\", 2);\r\n        i0.ɵɵtemplate(2, TreeNodeChildrenComponent_ng_container_0_div_1_tree_loading_component_2_Template, 1, 4, \"tree-loading-component\", 3);\r\n        i0.ɵɵelementEnd();\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r1 = i0.ɵɵnextContext(2);\r\n        i0.ɵɵclassProp(\"tree-children\", true)(\"tree-children-no-padding\", ctx_r1.node.options.levelPadding);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngIf\", ctx_r1.node.children);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngIf\", !ctx_r1.node.children);\r\n    }\r\n}\r\nfunction TreeNodeChildrenComponent_ng_container_0_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelementContainerStart(0);\r\n        i0.ɵɵtemplate(1, TreeNodeChildrenComponent_ng_container_0_div_1_Template, 3, 6, \"div\", 1);\r\n        i0.ɵɵelementContainerEnd();\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r0 = i0.ɵɵnextContext();\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"treeAnimateOpen\", ctx_r0.node.isExpanded)(\"treeAnimateOpenSpeed\", ctx_r0.node.options.animateSpeed)(\"treeAnimateOpenAcceleration\", ctx_r0.node.options.animateAcceleration)(\"treeAnimateOpenEnabled\", ctx_r0.node.options.animateExpand);\r\n    }\r\n}\r\nconst _c0$5 = function () { return { dontDetach: true }; };\r\nclass TreeNodeChildrenComponent {\r\n}\r\n/** @nocollapse */ TreeNodeChildrenComponent.ɵfac = function TreeNodeChildrenComponent_Factory(t) { return new (t || TreeNodeChildrenComponent)(); };\r\n/** @nocollapse */ TreeNodeChildrenComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeChildrenComponent, selectors: [[\"tree-node-children\"]], inputs: { node: \"node\", templates: \"templates\" }, decls: 1, vars: 2, consts: [[4, \"treeMobxAutorun\"], [3, \"tree-children\", \"tree-children-no-padding\", 4, \"treeAnimateOpen\", \"treeAnimateOpenSpeed\", \"treeAnimateOpenAcceleration\", \"treeAnimateOpenEnabled\"], [3, \"nodes\", \"templates\", \"treeModel\", 4, \"ngIf\"], [\"class\", \"tree-node-loading\", 3, \"padding-left\", \"template\", \"node\", 4, \"ngIf\"], [3, \"nodes\", \"templates\", \"treeModel\"], [1, \"tree-node-loading\", 3, \"template\", \"node\"]], template: function TreeNodeChildrenComponent_Template(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵtemplate(0, TreeNodeChildrenComponent_ng_container_0_Template, 2, 4, \"ng-container\", 0);\r\n        }\r\n        if (rf & 2) {\r\n            i0.ɵɵproperty(\"treeMobxAutorun\", i0.ɵɵpureFunction0(1, _c0$5));\r\n        }\r\n    }, dependencies: [i1.NgIf, LoadingComponent, TreeNodeCollectionComponent, TreeAnimateOpenDirective, TreeMobxAutorunDirective], encapsulation: 2 });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeChildrenComponent, [{\r\n            type: Component,\r\n            args: [{ selector: 'tree-node-children', encapsulation: ViewEncapsulation.None, template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        [class.tree-children]=\"true\"\r\n        [class.tree-children-no-padding]=\"node.options.levelPadding\"\r\n        *treeAnimateOpen=\"\r\n          node.isExpanded;\r\n          speed: node.options.animateSpeed;\r\n          acceleration: node.options.animateAcceleration;\r\n          enabled: node.options.animateExpand\r\n        \"\r\n      >\r\n        <tree-node-collection\r\n          *ngIf=\"node.children\"\r\n          [nodes]=\"node.children\"\r\n          [templates]=\"templates\"\r\n          [treeModel]=\"node.treeModel\"\r\n        >\r\n        </tree-node-collection>\r\n        <tree-loading-component\r\n          [style.padding-left]=\"node.getNodePadding()\"\r\n          class=\"tree-node-loading\"\r\n          *ngIf=\"!node.children\"\r\n          [template]=\"templates.loadingTemplate\"\r\n          [node]=\"node\"\r\n        ></tree-loading-component>\r\n      </div>\r\n    </ng-container>\r\n  ` }]\r\n        }], null, { node: [{\r\n                type: Input\r\n            }], templates: [{\r\n                type: Input\r\n            }] });\r\n})();\n\nfunction TreeNodeContent_span_0_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"span\");\r\n        i0.ɵɵtext(1);\r\n        i0.ɵɵelementEnd();\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r0 = i0.ɵɵnextContext();\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵtextInterpolate(ctx_r0.node.displayField);\r\n    }\r\n}\r\nconst _c0$4 = function (a0, a1, a2) { return { $implicit: a0, node: a1, index: a2 }; };\r\nclass TreeNodeContent {\r\n}\r\n/** @nocollapse */ TreeNodeContent.ɵfac = function TreeNodeContent_Factory(t) { return new (t || TreeNodeContent)(); };\r\n/** @nocollapse */ TreeNodeContent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeContent, selectors: [[\"tree-node-content\"]], inputs: { node: \"node\", index: \"index\", template: \"template\" }, decls: 2, vars: 7, consts: [[4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]], template: function TreeNodeContent_Template(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵtemplate(0, TreeNodeContent_span_0_Template, 2, 1, \"span\", 0);\r\n            i0.ɵɵelementContainer(1, 1);\r\n        }\r\n        if (rf & 2) {\r\n            i0.ɵɵproperty(\"ngIf\", !ctx.template);\r\n            i0.ɵɵadvance(1);\r\n            i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.template)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction3(3, _c0$4, ctx.node, ctx.node, ctx.index));\r\n        }\r\n    }, dependencies: [i1.NgIf, i1.NgTemplateOutlet], encapsulation: 2 });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeContent, [{\r\n            type: Component,\r\n            args: [{\r\n                    selector: 'tree-node-content',\r\n                    encapsulation: ViewEncapsulation.None,\r\n                    template: `\r\n  <span *ngIf=\"!template\">{{ node.displayField }}</span>\r\n  <ng-container\r\n    [ngTemplateOutlet]=\"template\"\r\n    [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index }\">\r\n  </ng-container>`,\r\n                }]\r\n        }], null, { node: [{\r\n                type: Input\r\n            }], index: [{\r\n                type: Input\r\n            }], template: [{\r\n                type: Input\r\n            }] });\r\n})();\n\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\nclass TreeDragDirective {\r\n    constructor(el, renderer, treeDraggedElement, ngZone) {\r\n        this.el = el;\r\n        this.renderer = renderer;\r\n        this.treeDraggedElement = treeDraggedElement;\r\n        this.ngZone = ngZone;\r\n        this.dragEventHandler = this.onDrag.bind(this);\r\n    }\r\n    ngAfterViewInit() {\r\n        let el = this.el.nativeElement;\r\n        this.ngZone.runOutsideAngular(() => {\r\n            el.addEventListener('drag', this.dragEventHandler);\r\n        });\r\n    }\r\n    ngDoCheck() {\r\n        this.renderer.setAttribute(this.el.nativeElement, 'draggable', this.treeDragEnabled ? 'true' : 'false');\r\n    }\r\n    ngOnDestroy() {\r\n        let el = this.el.nativeElement;\r\n        el.removeEventListener('drag', this.dragEventHandler);\r\n    }\r\n    onDragStart(ev) {\r\n        // setting the data is required by firefox\r\n        ev.dataTransfer.setData('text', ev.target.id);\r\n        this.treeDraggedElement.set(this.draggedElement);\r\n        if (this.draggedElement.mouseAction) {\r\n            this.draggedElement.mouseAction('dragStart', ev);\r\n        }\r\n    }\r\n    onDrag(ev) {\r\n        if (this.draggedElement.mouseAction) {\r\n            this.draggedElement.mouseAction('drag', ev);\r\n        }\r\n    }\r\n    onDragEnd() {\r\n        if (this.draggedElement.mouseAction) {\r\n            this.draggedElement.mouseAction('dragEnd');\r\n        }\r\n        this.treeDraggedElement.set(null);\r\n    }\r\n}\r\n/** @nocollapse */ TreeDragDirective.ɵfac = function TreeDragDirective_Factory(t) { return new (t || TreeDragDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.Renderer2), i0.ɵɵdirectiveInject(TreeDraggedElement), i0.ɵɵdirectiveInject(i0.NgZone)); };\r\n/** @nocollapse */ TreeDragDirective.ɵdir = /** @pureOrBreakMyCode */ i0.ɵɵdefineDirective({ type: TreeDragDirective, selectors: [[\"\", \"treeDrag\", \"\"]], hostBindings: function TreeDragDirective_HostBindings(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵlistener(\"dragstart\", function TreeDragDirective_dragstart_HostBindingHandler($event) { return ctx.onDragStart($event); })(\"dragend\", function TreeDragDirective_dragend_HostBindingHandler() { return ctx.onDragEnd(); });\r\n        }\r\n    }, inputs: { draggedElement: [\"treeDrag\", \"draggedElement\"], treeDragEnabled: \"treeDragEnabled\" } });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeDragDirective, [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[treeDrag]'\r\n                }]\r\n        }], function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }, { type: TreeDraggedElement }, { type: i0.NgZone }]; }, { draggedElement: [{\r\n                type: Input,\r\n                args: ['treeDrag']\r\n            }], treeDragEnabled: [{\r\n                type: Input\r\n            }], onDragStart: [{\r\n                type: HostListener,\r\n                args: ['dragstart', ['$event']]\r\n            }], onDragEnd: [{\r\n                type: HostListener,\r\n                args: ['dragend']\r\n            }] });\r\n})();\n\nfunction TreeNodeExpanderComponent_ng_container_0_span_1_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        const _r4 = i0.ɵɵgetCurrentView();\r\n        i0.ɵɵelementStart(0, \"span\", 3);\r\n        i0.ɵɵlistener(\"click\", function TreeNodeExpanderComponent_ng_container_0_span_1_Template_span_click_0_listener($event) { i0.ɵɵrestoreView(_r4); const ctx_r3 = i0.ɵɵnextContext(2); return i0.ɵɵresetView(ctx_r3.node.mouseAction(\"expanderClick\", $event)); });\r\n        i0.ɵɵelement(1, \"span\", 4);\r\n        i0.ɵɵelementEnd();\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r1 = i0.ɵɵnextContext(2);\r\n        i0.ɵɵclassProp(\"toggle-children-wrapper-expanded\", ctx_r1.node.isExpanded)(\"toggle-children-wrapper-collapsed\", ctx_r1.node.isCollapsed);\r\n    }\r\n}\r\nfunction TreeNodeExpanderComponent_ng_container_0_span_2_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelement(0, \"span\", 5);\r\n    }\r\n}\r\nfunction TreeNodeExpanderComponent_ng_container_0_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelementContainerStart(0);\r\n        i0.ɵɵtemplate(1, TreeNodeExpanderComponent_ng_container_0_span_1_Template, 2, 4, \"span\", 1);\r\n        i0.ɵɵtemplate(2, TreeNodeExpanderComponent_ng_container_0_span_2_Template, 1, 0, \"span\", 2);\r\n        i0.ɵɵelementContainerEnd();\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r0 = i0.ɵɵnextContext();\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngIf\", ctx_r0.node.hasChildren);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngIf\", !ctx_r0.node.hasChildren);\r\n    }\r\n}\r\nconst _c0$3 = function () { return { dontDetach: true }; };\r\nclass TreeNodeExpanderComponent {\r\n}\r\n/** @nocollapse */ TreeNodeExpanderComponent.ɵfac = function TreeNodeExpanderComponent_Factory(t) { return new (t || TreeNodeExpanderComponent)(); };\r\n/** @nocollapse */ TreeNodeExpanderComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeExpanderComponent, selectors: [[\"tree-node-expander\"]], inputs: { node: \"node\" }, decls: 1, vars: 2, consts: [[4, \"treeMobxAutorun\"], [\"class\", \"toggle-children-wrapper\", 3, \"toggle-children-wrapper-expanded\", \"toggle-children-wrapper-collapsed\", \"click\", 4, \"ngIf\"], [\"class\", \"toggle-children-placeholder\", 4, \"ngIf\"], [1, \"toggle-children-wrapper\", 3, \"click\"], [1, \"toggle-children\"], [1, \"toggle-children-placeholder\"]], template: function TreeNodeExpanderComponent_Template(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵtemplate(0, TreeNodeExpanderComponent_ng_container_0_Template, 3, 2, \"ng-container\", 0);\r\n        }\r\n        if (rf & 2) {\r\n            i0.ɵɵproperty(\"treeMobxAutorun\", i0.ɵɵpureFunction0(1, _c0$3));\r\n        }\r\n    }, dependencies: [i1.NgIf, TreeMobxAutorunDirective], encapsulation: 2 });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeExpanderComponent, [{\r\n            type: Component,\r\n            args: [{ selector: 'tree-node-expander', encapsulation: ViewEncapsulation.None, template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <span\r\n        *ngIf=\"node.hasChildren\"\r\n        [class.toggle-children-wrapper-expanded]=\"node.isExpanded\"\r\n        [class.toggle-children-wrapper-collapsed]=\"node.isCollapsed\"\r\n        class=\"toggle-children-wrapper\"\r\n        (click)=\"node.mouseAction('expanderClick', $event)\"\r\n      >\r\n        <span class=\"toggle-children\"></span>\r\n      </span>\r\n      <span *ngIf=\"!node.hasChildren\" class=\"toggle-children-placeholder\">\r\n      </span>\r\n    </ng-container>\r\n  ` }]\r\n        }], null, { node: [{\r\n                type: Input\r\n            }] });\r\n})();\n\nfunction TreeNodeCheckboxComponent_ng_container_0_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        const _r2 = i0.ɵɵgetCurrentView();\r\n        i0.ɵɵelementContainerStart(0);\r\n        i0.ɵɵelementStart(1, \"input\", 1);\r\n        i0.ɵɵlistener(\"click\", function TreeNodeCheckboxComponent_ng_container_0_Template_input_click_1_listener($event) { i0.ɵɵrestoreView(_r2); const ctx_r1 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r1.node.mouseAction(\"checkboxClick\", $event)); });\r\n        i0.ɵɵelementEnd();\r\n        i0.ɵɵelementContainerEnd();\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r0 = i0.ɵɵnextContext();\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"checked\", ctx_r0.node.isSelected)(\"indeterminate\", ctx_r0.node.isPartiallySelected);\r\n    }\r\n}\r\nconst _c0$2 = function () { return { dontDetach: true }; };\r\nclass TreeNodeCheckboxComponent {\r\n}\r\n/** @nocollapse */ TreeNodeCheckboxComponent.ɵfac = function TreeNodeCheckboxComponent_Factory(t) { return new (t || TreeNodeCheckboxComponent)(); };\r\n/** @nocollapse */ TreeNodeCheckboxComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeCheckboxComponent, selectors: [[\"tree-node-checkbox\"]], inputs: { node: \"node\" }, decls: 1, vars: 2, consts: [[4, \"treeMobxAutorun\"], [\"type\", \"checkbox\", 1, \"tree-node-checkbox\", 3, \"checked\", \"indeterminate\", \"click\"]], template: function TreeNodeCheckboxComponent_Template(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵtemplate(0, TreeNodeCheckboxComponent_ng_container_0_Template, 2, 2, \"ng-container\", 0);\r\n        }\r\n        if (rf & 2) {\r\n            i0.ɵɵproperty(\"treeMobxAutorun\", i0.ɵɵpureFunction0(1, _c0$2));\r\n        }\r\n    }, dependencies: [TreeMobxAutorunDirective], encapsulation: 2 });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeCheckboxComponent, [{\r\n            type: Component,\r\n            args: [{ selector: 'tree-node-checkbox', encapsulation: ViewEncapsulation.None, template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <input\r\n        class=\"tree-node-checkbox\"\r\n        type=\"checkbox\"\r\n        (click)=\"node.mouseAction('checkboxClick', $event)\"\r\n        [checked]=\"node.isSelected\"\r\n        [indeterminate]=\"node.isPartiallySelected\"\r\n      />\r\n    </ng-container>\r\n  ` }]\r\n        }], null, { node: [{\r\n                type: Input\r\n            }] });\r\n})();\n\nfunction TreeNodeWrapperComponent_div_0_tree_node_checkbox_1_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelement(0, \"tree-node-checkbox\", 4);\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r1 = i0.ɵɵnextContext(2);\r\n        i0.ɵɵproperty(\"node\", ctx_r1.node);\r\n    }\r\n}\r\nfunction TreeNodeWrapperComponent_div_0_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        const _r3 = i0.ɵɵgetCurrentView();\r\n        i0.ɵɵelementStart(0, \"div\", 2);\r\n        i0.ɵɵtemplate(1, TreeNodeWrapperComponent_div_0_tree_node_checkbox_1_Template, 1, 1, \"tree-node-checkbox\", 3);\r\n        i0.ɵɵelement(2, \"tree-node-expander\", 4);\r\n        i0.ɵɵelementStart(3, \"div\", 5);\r\n        i0.ɵɵlistener(\"click\", function TreeNodeWrapperComponent_div_0_Template_div_click_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r2 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r2.node.mouseAction(\"click\", $event)); })(\"dblclick\", function TreeNodeWrapperComponent_div_0_Template_div_dblclick_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r4 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r4.node.mouseAction(\"dblClick\", $event)); })(\"mouseover\", function TreeNodeWrapperComponent_div_0_Template_div_mouseover_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r5 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r5.node.mouseAction(\"mouseOver\", $event)); })(\"mouseout\", function TreeNodeWrapperComponent_div_0_Template_div_mouseout_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r6 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r6.node.mouseAction(\"mouseOut\", $event)); })(\"contextmenu\", function TreeNodeWrapperComponent_div_0_Template_div_contextmenu_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r7 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r7.node.mouseAction(\"contextMenu\", $event)); })(\"treeDrop\", function TreeNodeWrapperComponent_div_0_Template_div_treeDrop_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r8 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r8.node.onDrop($event)); })(\"treeDropDragOver\", function TreeNodeWrapperComponent_div_0_Template_div_treeDropDragOver_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r9 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r9.node.mouseAction(\"dragOver\", $event)); })(\"treeDropDragLeave\", function TreeNodeWrapperComponent_div_0_Template_div_treeDropDragLeave_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r10 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r10.node.mouseAction(\"dragLeave\", $event)); })(\"treeDropDragEnter\", function TreeNodeWrapperComponent_div_0_Template_div_treeDropDragEnter_3_listener($event) { i0.ɵɵrestoreView(_r3); const ctx_r11 = i0.ɵɵnextContext(); return i0.ɵɵresetView(ctx_r11.node.mouseAction(\"dragEnter\", $event)); });\r\n        i0.ɵɵelement(4, \"tree-node-content\", 6);\r\n        i0.ɵɵelementEnd()();\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r0 = i0.ɵɵnextContext();\r\n        i0.ɵɵstyleProp(\"padding-left\", ctx_r0.node.getNodePadding());\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngIf\", ctx_r0.node.options.useCheckbox);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"node\", ctx_r0.node);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵclassProp(\"node-content-wrapper-active\", ctx_r0.node.isActive)(\"node-content-wrapper-focused\", ctx_r0.node.isFocused);\r\n        i0.ɵɵproperty(\"treeAllowDrop\", ctx_r0.node.allowDrop)(\"allowDragoverStyling\", ctx_r0.node.allowDragoverStyling())(\"treeDrag\", ctx_r0.node)(\"treeDragEnabled\", ctx_r0.node.allowDrag());\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"node\", ctx_r0.node)(\"index\", ctx_r0.index)(\"template\", ctx_r0.templates.treeNodeTemplate);\r\n    }\r\n}\r\nconst _c0$1 = function (a0, a1, a2, a3) { return { $implicit: a0, node: a1, index: a2, templates: a3 }; };\r\nclass TreeNodeWrapperComponent {\r\n}\r\n/** @nocollapse */ TreeNodeWrapperComponent.ɵfac = function TreeNodeWrapperComponent_Factory(t) { return new (t || TreeNodeWrapperComponent)(); };\r\n/** @nocollapse */ TreeNodeWrapperComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeWrapperComponent, selectors: [[\"tree-node-wrapper\"]], inputs: { node: \"node\", index: \"index\", templates: \"templates\" }, decls: 2, vars: 8, consts: [[\"class\", \"node-wrapper\", 3, \"padding-left\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [1, \"node-wrapper\"], [3, \"node\", 4, \"ngIf\"], [3, \"node\"], [1, \"node-content-wrapper\", 3, \"treeAllowDrop\", \"allowDragoverStyling\", \"treeDrag\", \"treeDragEnabled\", \"click\", \"dblclick\", \"mouseover\", \"mouseout\", \"contextmenu\", \"treeDrop\", \"treeDropDragOver\", \"treeDropDragLeave\", \"treeDropDragEnter\"], [3, \"node\", \"index\", \"template\"]], template: function TreeNodeWrapperComponent_Template(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵtemplate(0, TreeNodeWrapperComponent_div_0_Template, 5, 15, \"div\", 0);\r\n            i0.ɵɵelementContainer(1, 1);\r\n        }\r\n        if (rf & 2) {\r\n            i0.ɵɵproperty(\"ngIf\", !ctx.templates.treeNodeWrapperTemplate);\r\n            i0.ɵɵadvance(1);\r\n            i0.ɵɵproperty(\"ngTemplateOutlet\", ctx.templates.treeNodeWrapperTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction4(3, _c0$1, ctx.node, ctx.node, ctx.index, ctx.templates));\r\n        }\r\n    }, dependencies: [i1.NgIf, i1.NgTemplateOutlet, TreeNodeContent, TreeDropDirective, TreeDragDirective, TreeNodeExpanderComponent, TreeNodeCheckboxComponent], encapsulation: 2 });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeWrapperComponent, [{\r\n            type: Component,\r\n            args: [{ selector: 'tree-node-wrapper', encapsulation: ViewEncapsulation.None, template: `\r\n      <div *ngIf=\"!templates.treeNodeWrapperTemplate\" class=\"node-wrapper\" [style.padding-left]=\"node.getNodePadding()\">\r\n          <tree-node-checkbox *ngIf=\"node.options.useCheckbox\" [node]=\"node\"></tree-node-checkbox>\r\n          <tree-node-expander [node]=\"node\"></tree-node-expander>\r\n          <div class=\"node-content-wrapper\"\r\n               [class.node-content-wrapper-active]=\"node.isActive\"\r\n               [class.node-content-wrapper-focused]=\"node.isFocused\"\r\n               (click)=\"node.mouseAction('click', $event)\"\r\n               (dblclick)=\"node.mouseAction('dblClick', $event)\"\r\n               (mouseover)=\"node.mouseAction('mouseOver', $event)\"\r\n               (mouseout)=\"node.mouseAction('mouseOut', $event)\"\r\n               (contextmenu)=\"node.mouseAction('contextMenu', $event)\"\r\n               (treeDrop)=\"node.onDrop($event)\"\r\n               (treeDropDragOver)=\"node.mouseAction('dragOver', $event)\"\r\n               (treeDropDragLeave)=\"node.mouseAction('dragLeave', $event)\"\r\n               (treeDropDragEnter)=\"node.mouseAction('dragEnter', $event)\"\r\n               [treeAllowDrop]=\"node.allowDrop\"\r\n               [allowDragoverStyling]=\"node.allowDragoverStyling()\"\r\n               [treeDrag]=\"node\"\r\n               [treeDragEnabled]=\"node.allowDrag()\">\r\n\r\n              <tree-node-content [node]=\"node\" [index]=\"index\" [template]=\"templates.treeNodeTemplate\">\r\n              </tree-node-content>\r\n          </div>\r\n      </div>\r\n      <ng-container\r\n              [ngTemplateOutlet]=\"templates.treeNodeWrapperTemplate\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index, templates: templates }\">\r\n      </ng-container>\r\n  ` }]\r\n        }], null, { node: [{\r\n                type: Input\r\n            }], index: [{\r\n                type: Input\r\n            }], templates: [{\r\n                type: Input\r\n            }] });\r\n})();\n\nfunction TreeNodeComponent_ng_container_0_div_1_tree_node_drop_slot_1_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelement(0, \"tree-node-drop-slot\", 6);\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r2 = i0.ɵɵnextContext(3);\r\n        i0.ɵɵproperty(\"dropIndex\", ctx_r2.node.index)(\"node\", ctx_r2.node.parent);\r\n    }\r\n}\r\nfunction TreeNodeComponent_ng_container_0_div_1_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelementStart(0, \"div\");\r\n        i0.ɵɵtemplate(1, TreeNodeComponent_ng_container_0_div_1_tree_node_drop_slot_1_Template, 1, 2, \"tree-node-drop-slot\", 3);\r\n        i0.ɵɵelement(2, \"tree-node-wrapper\", 4)(3, \"tree-node-children\", 5)(4, \"tree-node-drop-slot\", 6);\r\n        i0.ɵɵelementEnd();\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r1 = i0.ɵɵnextContext(2);\r\n        i0.ɵɵclassMap(ctx_r1.node.getClass());\r\n        i0.ɵɵclassProp(\"tree-node\", true)(\"tree-node-expanded\", ctx_r1.node.isExpanded && ctx_r1.node.hasChildren)(\"tree-node-collapsed\", ctx_r1.node.isCollapsed && ctx_r1.node.hasChildren)(\"tree-node-leaf\", ctx_r1.node.isLeaf)(\"tree-node-active\", ctx_r1.node.isActive)(\"tree-node-focused\", ctx_r1.node.isFocused);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngIf\", ctx_r1.index === 0);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"node\", ctx_r1.node)(\"index\", ctx_r1.index)(\"templates\", ctx_r1.templates);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"node\", ctx_r1.node)(\"templates\", ctx_r1.templates);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"dropIndex\", ctx_r1.node.index + 1)(\"node\", ctx_r1.node.parent);\r\n    }\r\n}\r\nconst _c0 = function (a0, a1, a2, a3) { return { $implicit: a0, node: a1, index: a2, templates: a3 }; };\r\nfunction TreeNodeComponent_ng_container_0_Template(rf, ctx) {\r\n    if (rf & 1) {\r\n        i0.ɵɵelementContainerStart(0);\r\n        i0.ɵɵtemplate(1, TreeNodeComponent_ng_container_0_div_1_Template, 5, 22, \"div\", 1);\r\n        i0.ɵɵelementContainer(2, 2);\r\n        i0.ɵɵelementContainerEnd();\r\n    }\r\n    if (rf & 2) {\r\n        const ctx_r0 = i0.ɵɵnextContext();\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngIf\", !ctx_r0.templates.treeNodeFullTemplate);\r\n        i0.ɵɵadvance(1);\r\n        i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r0.templates.treeNodeFullTemplate)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction4(3, _c0, ctx_r0.node, ctx_r0.node, ctx_r0.index, ctx_r0.templates));\r\n    }\r\n}\r\nconst _c1 = function () { return { dontDetach: true }; };\r\nclass TreeNodeComponent {\r\n}\r\n/** @nocollapse */ TreeNodeComponent.ɵfac = function TreeNodeComponent_Factory(t) { return new (t || TreeNodeComponent)(); };\r\n/** @nocollapse */ TreeNodeComponent.ɵcmp = /** @pureOrBreakMyCode */ i0.ɵɵdefineComponent({ type: TreeNodeComponent, selectors: [[\"TreeNode\"], [\"tree-node\"]], inputs: { node: \"node\", index: \"index\", templates: \"templates\" }, decls: 1, vars: 2, consts: [[4, \"treeMobxAutorun\"], [3, \"class\", \"tree-node\", \"tree-node-expanded\", \"tree-node-collapsed\", \"tree-node-leaf\", \"tree-node-active\", \"tree-node-focused\", 4, \"ngIf\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"], [3, \"dropIndex\", \"node\", 4, \"ngIf\"], [3, \"node\", \"index\", \"templates\"], [3, \"node\", \"templates\"], [3, \"dropIndex\", \"node\"]], template: function TreeNodeComponent_Template(rf, ctx) {\r\n        if (rf & 1) {\r\n            i0.ɵɵtemplate(0, TreeNodeComponent_ng_container_0_Template, 3, 8, \"ng-container\", 0);\r\n        }\r\n        if (rf & 2) {\r\n            i0.ɵɵproperty(\"treeMobxAutorun\", i0.ɵɵpureFunction0(1, _c1));\r\n        }\r\n    }, dependencies: [i1.NgIf, i1.NgTemplateOutlet, TreeNodeChildrenComponent, TreeNodeDropSlot, TreeNodeWrapperComponent, TreeMobxAutorunDirective], encapsulation: 2 });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeNodeComponent, [{\r\n            type: Component,\r\n            args: [{ selector: 'TreeNode, tree-node', encapsulation: ViewEncapsulation.None, template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        *ngIf=\"!templates.treeNodeFullTemplate\"\r\n        [class]=\"node.getClass()\"\r\n        [class.tree-node]=\"true\"\r\n        [class.tree-node-expanded]=\"node.isExpanded && node.hasChildren\"\r\n        [class.tree-node-collapsed]=\"node.isCollapsed && node.hasChildren\"\r\n        [class.tree-node-leaf]=\"node.isLeaf\"\r\n        [class.tree-node-active]=\"node.isActive\"\r\n        [class.tree-node-focused]=\"node.isFocused\"\r\n      >\r\n        <tree-node-drop-slot\r\n          *ngIf=\"index === 0\"\r\n          [dropIndex]=\"node.index\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n\r\n        <tree-node-wrapper\r\n          [node]=\"node\"\r\n          [index]=\"index\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-wrapper>\r\n\r\n        <tree-node-children\r\n          [node]=\"node\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-children>\r\n        <tree-node-drop-slot\r\n          [dropIndex]=\"node.index + 1\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n      </div>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"templates.treeNodeFullTemplate\"\r\n        [ngTemplateOutletContext]=\"{\r\n          $implicit: node,\r\n          node: node,\r\n          index: index,\r\n          templates: templates\r\n        }\"\r\n      >\r\n      </ng-container>\r\n    </ng-container>\r\n  ` }]\r\n        }], null, { node: [{\r\n                type: Input\r\n            }], index: [{\r\n                type: Input\r\n            }], templates: [{\r\n                type: Input\r\n            }] });\r\n})();\n\nclass TreeModule {\r\n}\r\n/** @nocollapse */ TreeModule.ɵfac = function TreeModule_Factory(t) { return new (t || TreeModule)(); };\r\n/** @nocollapse */ TreeModule.ɵmod = /** @pureOrBreakMyCode */ i0.ɵɵdefineNgModule({ type: TreeModule });\r\n/** @nocollapse */ TreeModule.ɵinj = /** @pureOrBreakMyCode */ i0.ɵɵdefineInjector({ imports: [CommonModule] });\r\n(function () {\r\n    (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TreeModule, [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        TreeComponent,\r\n                        TreeNodeComponent,\r\n                        TreeNodeContent,\r\n                        LoadingComponent,\r\n                        TreeDropDirective,\r\n                        TreeDragDirective,\r\n                        TreeNodeExpanderComponent,\r\n                        TreeNodeChildrenComponent,\r\n                        TreeNodeDropSlot,\r\n                        TreeNodeCollectionComponent,\r\n                        TreeViewportComponent,\r\n                        TreeNodeWrapperComponent,\r\n                        TreeNodeCheckboxComponent,\r\n                        TreeAnimateOpenDirective,\r\n                        TreeMobxAutorunDirective\r\n                    ],\r\n                    exports: [\r\n                        TreeComponent,\r\n                        TreeNodeComponent,\r\n                        TreeNodeContent,\r\n                        LoadingComponent,\r\n                        TreeDropDirective,\r\n                        TreeDragDirective,\r\n                        TreeNodeExpanderComponent,\r\n                        TreeNodeChildrenComponent,\r\n                        TreeNodeDropSlot,\r\n                        TreeNodeCollectionComponent,\r\n                        TreeViewportComponent,\r\n                        TreeNodeWrapperComponent,\r\n                        TreeNodeCheckboxComponent,\r\n                        TreeAnimateOpenDirective,\r\n                        TreeMobxAutorunDirective\r\n                    ],\r\n                    imports: [CommonModule],\r\n                    providers: []\r\n                }]\r\n        }], null, null);\r\n})();\r\n(function () {\r\n    (typeof ngJitMode === \"undefined\" || ngJitMode) && i0.ɵɵsetNgModuleScope(TreeModule, { declarations: [TreeComponent,\r\n            TreeNodeComponent,\r\n            TreeNodeContent,\r\n            LoadingComponent,\r\n            TreeDropDirective,\r\n            TreeDragDirective,\r\n            TreeNodeExpanderComponent,\r\n            TreeNodeChildrenComponent,\r\n            TreeNodeDropSlot,\r\n            TreeNodeCollectionComponent,\r\n            TreeViewportComponent,\r\n            TreeNodeWrapperComponent,\r\n            TreeNodeCheckboxComponent,\r\n            TreeAnimateOpenDirective,\r\n            TreeMobxAutorunDirective], imports: [CommonModule], exports: [TreeComponent,\r\n            TreeNodeComponent,\r\n            TreeNodeContent,\r\n            LoadingComponent,\r\n            TreeDropDirective,\r\n            TreeDragDirective,\r\n            TreeNodeExpanderComponent,\r\n            TreeNodeChildrenComponent,\r\n            TreeNodeDropSlot,\r\n            TreeNodeCollectionComponent,\r\n            TreeViewportComponent,\r\n            TreeNodeWrapperComponent,\r\n            TreeNodeCheckboxComponent,\r\n            TreeAnimateOpenDirective,\r\n            TreeMobxAutorunDirective] });\r\n})();\r\ni0.ɵɵsetComponentScope(TreeNodeCollectionComponent, [i1.NgForOf, TreeNodeComponent,\r\n    TreeMobxAutorunDirective], []);\n\n/*\r\n * Public API Surface of angular-tree-component\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { KEYS, LoadingComponent, TREE_ACTIONS, TreeAnimateOpenDirective, TreeComponent, TreeDragDirective, TreeDraggedElement, TreeDropDirective, TreeMobxAutorunDirective, TreeModel, TreeModule, TreeNode, TreeNodeCheckboxComponent, TreeNodeChildrenComponent, TreeNodeCollectionComponent, TreeNodeComponent, TreeNodeContent, TreeNodeDropSlot, TreeNodeExpanderComponent, TreeNodeWrapperComponent, TreeViewportComponent, TreeVirtualScroll };\n//# sourceMappingURL=circlon-angular-tree-component.mjs.map\n","map":{"version":3,"file":"circlon-angular-tree-component.mjs","sources":["../../../projects/angular-tree-component/src/lib/mobx-angular/tree-mobx-autorun.directive.ts","../../../projects/angular-tree-component/src/lib/constants/keys.ts","../../../projects/angular-tree-component/src/lib/models/tree-options.model.ts","../../../projects/angular-tree-component/src/lib/constants/events.ts","../../../projects/angular-tree-component/src/lib/models/tree-node.model.ts","../../../projects/angular-tree-component/src/lib/models/tree.model.ts","../../../projects/angular-tree-component/src/lib/models/tree-dragged-element.model.ts","../../../projects/angular-tree-component/src/lib/models/tree-virtual-scroll.model.ts","../../../projects/angular-tree-component/src/lib/components/loading.component.ts","../../../projects/angular-tree-component/src/lib/directives/tree-drop.directive.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-drop-slot.component.ts","../../../projects/angular-tree-component/src/lib/mobx-angular/mobx-proxy.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-collection.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-viewport.component.ts","../../../projects/angular-tree-component/src/lib/components/tree.component.ts","../../../projects/angular-tree-component/src/lib/directives/tree-animate-open.directive.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-children.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-content.component.ts","../../../projects/angular-tree-component/src/lib/directives/tree-drag.directive.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-expander.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-checkbox.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node-wrapper.component.ts","../../../projects/angular-tree-component/src/lib/components/tree-node.component.ts","../../../projects/angular-tree-component/src/lib/angular-tree-component.module.ts","../../../projects/angular-tree-component/src/public-api.ts","../../../projects/angular-tree-component/src/circlon-angular-tree-component.ts"],"sourcesContent":["import {\r\n  Directive,\r\n  ViewContainerRef,\r\n  TemplateRef,\r\n  OnInit,\r\n  OnDestroy,\r\n  Input,\r\n  EmbeddedViewRef\r\n} from '@angular/core';\r\nimport { autorun } from 'mobx';\r\n\r\n@Directive({ selector: '[treeMobxAutorun]' })\r\nexport class TreeMobxAutorunDirective implements OnInit, OnDestroy {\r\n  protected templateBindings = {};\r\n  protected dispose: any;\r\n  protected view: EmbeddedViewRef<any>;\r\n  @Input() treeMobxAutorun;\r\n\r\n  constructor(\r\n    protected templateRef: TemplateRef<any>,\r\n    protected viewContainer: ViewContainerRef\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.view = this.viewContainer.createEmbeddedView(this.templateRef);\r\n\r\n    if (this.dispose) {\r\n      this.dispose();\r\n    }\r\n\r\n    if (this.shouldDetach()) {\r\n      this.view.detach();\r\n    }\r\n    this.autoDetect(this.view);\r\n  }\r\n\r\n  shouldDetach() {\r\n    return this.treeMobxAutorun && this.treeMobxAutorun.detach;\r\n  }\r\n\r\n  autoDetect(view: EmbeddedViewRef<any>) {\r\n    this.dispose = autorun(() => view.detectChanges());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.dispose) {\r\n      this.dispose();\r\n    }\r\n  }\r\n}\r\n","export const KEYS = {\r\n  LEFT: 37,\r\n  UP: 38,\r\n  RIGHT: 39,\r\n  DOWN: 40,\r\n  ENTER: 13,\r\n  SPACE: 32,\r\n  CONTEXT_MENU: 32\r\n};\r\n","import { TreeNode } from './tree-node.model';\r\nimport { TreeModel } from './tree.model';\r\nimport { KEYS } from '../constants/keys';\r\nimport { ITreeOptions } from '../defs/api';\r\n\r\nexport interface IActionHandler {\r\n  (tree: TreeModel, node: TreeNode, $event: any, ...rest);\r\n}\r\n\r\nexport const TREE_ACTIONS = {\r\n  TOGGLE_ACTIVE: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(),\r\n  TOGGLE_ACTIVE_MULTI: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleActivated(true),\r\n  TOGGLE_SELECTED: (tree: TreeModel, node: TreeNode, $event: any) => node && node.toggleSelected(),\r\n  ACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(true),\r\n  DEACTIVATE: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsActive(false),\r\n  SELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(true),\r\n  DESELECT: (tree: TreeModel, node: TreeNode, $event: any) => node.setIsSelected(false),\r\n  FOCUS: (tree: TreeModel, node: TreeNode, $event: any) => node.focus(),\r\n  TOGGLE_EXPANDED: (tree: TreeModel, node: TreeNode, $event: any) => node.hasChildren && node.toggleExpanded(),\r\n  EXPAND: (tree: TreeModel, node: TreeNode, $event: any) => node.expand(),\r\n  COLLAPSE: (tree: TreeModel, node: TreeNode, $event: any) => node.collapse(),\r\n  DRILL_DOWN: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillDown(),\r\n  DRILL_UP: (tree: TreeModel, node: TreeNode, $event: any) => tree.focusDrillUp(),\r\n  NEXT_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusNextNode(),\r\n  PREVIOUS_NODE: (tree: TreeModel, node: TreeNode, $event: any) =>  tree.focusPreviousNode(),\r\n  MOVE_NODE: (tree: TreeModel, node: TreeNode, $event: any, {from , to}: {from: any, to: any}) => {\r\n    // default action assumes from = node, to = {parent, index}\r\n    if ($event.ctrlKey) {\r\n      tree.copyNode(from, to);\r\n    } else {\r\n      tree.moveNode(from, to);\r\n    }\r\n  }\r\n};\r\n\r\nconst defaultActionMapping: IActionMapping = {\r\n  mouse: {\r\n    click: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n    dblClick: null,\r\n    contextMenu: null,\r\n    expanderClick: TREE_ACTIONS.TOGGLE_EXPANDED,\r\n    checkboxClick: TREE_ACTIONS.TOGGLE_SELECTED,\r\n    drop: TREE_ACTIONS.MOVE_NODE\r\n  },\r\n  keys: {\r\n    [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n    [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n    [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n    [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n    [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n    [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n  }\r\n};\r\n\r\nexport interface IActionMapping {\r\n  mouse?: {\r\n    click?: IActionHandler,\r\n    dblClick?: IActionHandler,\r\n    contextMenu?: IActionHandler,\r\n    expanderClick?: IActionHandler,\r\n    checkboxClick?: IActionHandler,\r\n    dragStart?: IActionHandler,\r\n    drag?: IActionHandler,\r\n    dragEnd?: IActionHandler,\r\n    dragOver?: IActionHandler,\r\n    dragLeave?: IActionHandler,\r\n    dragEnter?: IActionHandler,\r\n    drop?: IActionHandler,\r\n    mouseOver?: IActionHandler,\r\n    mouseOut?: IActionHandler\r\n  };\r\n  keys?: {\r\n    [key: number]: IActionHandler\r\n  };\r\n}\r\n\r\nexport class TreeOptions {\r\n  get hasChildrenField(): string { return this.options.hasChildrenField || 'hasChildren'; }\r\n  get childrenField(): string { return this.options.childrenField || 'children'; }\r\n  get displayField(): string { return this.options.displayField || 'name'; }\r\n  get idField(): string { return this.options.idField || 'id'; }\r\n  get isExpandedField(): string { return this.options.isExpandedField || 'isExpanded'; }\r\n  get getChildren(): any { return this.options.getChildren; }\r\n  get levelPadding(): number { return this.options.levelPadding || 0; }\r\n  get useVirtualScroll(): boolean { return this.options.useVirtualScroll; }\r\n  get animateExpand(): boolean { return this.options.animateExpand; }\r\n  get animateSpeed(): number { return this.options.animateSpeed || 1; }\r\n  get animateAcceleration(): number { return this.options.animateAcceleration || 1.2; }\r\n  get scrollOnActivate(): boolean { return this.options.scrollOnActivate === undefined ? true : this.options.scrollOnActivate; }\r\n  get rtl(): boolean { return !!this.options.rtl; }\r\n  get rootId(): any {return this.options.rootId; }\r\n  get useCheckbox(): boolean { return this.options.useCheckbox; }\r\n  get useTriState(): boolean { return this.options.useTriState === undefined ? true : this.options.useTriState; }\r\n  get scrollContainer(): HTMLElement { return this.options.scrollContainer; }\r\n  get allowDragoverStyling(): boolean { return this.options.allowDragoverStyling === undefined ? true : this.options.allowDragoverStyling; }\r\n  actionMapping: IActionMapping;\r\n\r\n  constructor(private options: ITreeOptions = {}) {\r\n    this.actionMapping = {\r\n      mouse: {\r\n        click: this.options?.actionMapping?.mouse?.click ?? defaultActionMapping.mouse.click,\r\n        dblClick: this.options?.actionMapping?.mouse?.dblClick ?? defaultActionMapping.mouse.dblClick,\r\n        contextMenu: this.options?.actionMapping?.mouse?.contextMenu ?? defaultActionMapping.mouse.contextMenu,\r\n        expanderClick: this.options?.actionMapping?.mouse?.expanderClick ?? defaultActionMapping.mouse.expanderClick,\r\n        checkboxClick: this.options?.actionMapping?.mouse?.checkboxClick ?? defaultActionMapping.mouse.checkboxClick,\r\n        drop: this.options?.actionMapping?.mouse?.drop ?? defaultActionMapping.mouse.drop,\r\n        dragStart: this.options?.actionMapping?.mouse?.dragStart ?? undefined,\r\n        drag: this.options?.actionMapping?.mouse?.drag ?? undefined,\r\n        dragEnd: this.options?.actionMapping?.mouse?.dragEnd ?? undefined,\r\n        dragOver: this.options?.actionMapping?.mouse?.dragOver ?? undefined,\r\n        dragLeave: this.options?.actionMapping?.mouse?.dragLeave ?? undefined,\r\n        dragEnter: this.options?.actionMapping?.mouse?.dragEnter ?? undefined,\r\n        mouseOver: this.options?.actionMapping?.mouse?.mouseOver ?? undefined,\r\n        mouseOut: this.options?.actionMapping?.mouse?.mouseOut ?? undefined,\r\n      },\r\n      keys: {\r\n        [KEYS.RIGHT]: TREE_ACTIONS.DRILL_DOWN,\r\n        [KEYS.LEFT]: TREE_ACTIONS.DRILL_UP,\r\n        [KEYS.DOWN]: TREE_ACTIONS.NEXT_NODE,\r\n        [KEYS.UP]: TREE_ACTIONS.PREVIOUS_NODE,\r\n        [KEYS.SPACE]: TREE_ACTIONS.TOGGLE_ACTIVE,\r\n        [KEYS.ENTER]: TREE_ACTIONS.TOGGLE_ACTIVE\r\n      }\r\n    }\r\n\r\n    if (this.options?.actionMapping?.keys) {\r\n      this.actionMapping.keys = {\r\n        ...this.actionMapping.keys,\r\n        ...this.options.actionMapping.keys\r\n      }\r\n    }\r\n\r\n    if (options.rtl) {\r\n      this.actionMapping.keys[KEYS.RIGHT] = <IActionHandler>options.actionMapping?.keys[KEYS.RIGHT] || TREE_ACTIONS.DRILL_UP;\r\n      this.actionMapping.keys[KEYS.LEFT] = <IActionHandler>options.actionMapping?.keys[KEYS.LEFT] || TREE_ACTIONS.DRILL_DOWN;\r\n    }\r\n  }\r\n\r\n  getNodeClone(node: TreeNode): any {\r\n    if (this.options.getNodeClone) {\r\n      return this.options.getNodeClone(node);\r\n    }\r\n\r\n    // remove id from clone\r\n    // keeping ie11 compatibility\r\n    const nodeClone = Object.assign({}, node.data);\r\n    if (nodeClone.id) {\r\n      delete nodeClone.id;\r\n    }\r\n    return nodeClone;\r\n  }\r\n\r\n  allowDrop(element, to, $event?): boolean {\r\n    if (this.options.allowDrop instanceof Function) {\r\n      return this.options.allowDrop(element, to, $event);\r\n    }\r\n    else {\r\n      return this.options.allowDrop === undefined ? true : this.options.allowDrop;\r\n    }\r\n  }\r\n\r\n  allowDrag(node: TreeNode): boolean {\r\n    if (this.options.allowDrag instanceof Function) {\r\n      return this.options.allowDrag(node);\r\n    } else {\r\n      return this.options.allowDrag;\r\n    }\r\n  }\r\n\r\n  nodeClass(node: TreeNode): string {\r\n    return this.options.nodeClass ? this.options.nodeClass(node) : '';\r\n  }\r\n\r\n  nodeHeight(node: TreeNode): number {\r\n    if (node.data.virtual) {\r\n      return 0;\r\n    }\r\n\r\n    let nodeHeight = this.options.nodeHeight || 22;\r\n\r\n    if (typeof nodeHeight === 'function') {\r\n      nodeHeight = nodeHeight(node);\r\n    }\r\n\r\n    // account for drop slots:\r\n    return nodeHeight + (node.index === 0 ?  2 : 1) * this.dropSlotHeight;\r\n  }\r\n\r\n  get dropSlotHeight(): number {\r\n    return typeof this.options.dropSlotHeight === 'number' ? this.options.dropSlotHeight : 2;\r\n  }\r\n}\r\n","export const TREE_EVENTS = {\r\n  toggleExpanded: 'toggleExpanded',\r\n  activate: 'activate',\r\n  deactivate: 'deactivate',\r\n  nodeActivate: 'nodeActivate',\r\n  nodeDeactivate: 'nodeDeactivate',\r\n  select: 'select',\r\n  deselect: 'deselect',\r\n  focus: 'focus',\r\n  blur: 'blur',\r\n  initialized: 'initialized',\r\n  updateData: 'updateData',\r\n  moveNode: 'moveNode',\r\n  copyNode: 'copyNode',\r\n  event: 'event',\r\n  loadNodeChildren: 'loadNodeChildren',\r\n  changeFilter: 'changeFilter',\r\n  stateChange: 'stateChange'\r\n};\r\n","import { observable, computed, reaction, autorun, action, IReactionDisposer } from 'mobx';\r\nimport { TreeModel } from './tree.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { ITreeNode } from '../defs/api';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nexport class TreeNode implements ITreeNode {\r\n  private handler: IReactionDisposer;\r\n  @computed get isHidden() { return this.treeModel.isHidden(this); };\r\n  @computed get isExpanded() { return this.treeModel.isExpanded(this); };\r\n  @computed get isActive() { return this.treeModel.isActive(this); };\r\n  @computed get isFocused() { return this.treeModel.isNodeFocused(this); };\r\n  @computed get isSelected() {\r\n    if (this.isSelectable()) {\r\n        return this.treeModel.isSelected(this);\r\n    } else {\r\n      return this.children.some((node: TreeNode) => node.isSelected);\r\n    }\r\n  };\r\n  @computed get isAllSelected() {\r\n    if (this.isSelectable()) {\r\n      return this.treeModel.isSelected(this);\r\n    } else {\r\n      return this.children.every((node: TreeNode) => node.isAllSelected);\r\n    }\r\n  };\r\n  @computed get isPartiallySelected() {\r\n    return this.isSelected && !this.isAllSelected;\r\n  }\r\n\r\n  @observable children: TreeNode[];\r\n  @observable index: number;\r\n  @observable position = 0;\r\n  @observable height: number;\r\n  @computed get level(): number {\r\n    return this.parent ? this.parent.level + 1 : 0;\r\n  }\r\n  @computed get path(): string[] {\r\n    return this.parent ? [...this.parent.path, this.id] : [];\r\n  }\r\n\r\n  get elementRef(): any {\r\n    throw `Element Ref is no longer supported since introducing virtual scroll\\n\r\n      You may use a template to obtain a reference to the element`;\r\n  }\r\n\r\n  private _originalNode: any;\r\n  get originalNode() { return this._originalNode; };\r\n\r\n  constructor(public data: any, public parent: TreeNode, public treeModel: TreeModel, index: number) {\r\n    if (this.id === undefined || this.id === null) {\r\n      this.id = uuid();\r\n    } // Make sure there's a unique id without overriding existing ids to work with immutable data structures\r\n    this.index = index;\r\n\r\n    if (this.getField('children')) {\r\n      this._initChildren();\r\n    }\r\n    this.autoLoadChildren();\r\n  }\r\n\r\n  // helper get functions:\r\n  get hasChildren(): boolean {\r\n    return !!(this.getField('hasChildren') || (this.children && this.children.length > 0));\r\n  }\r\n  get isCollapsed(): boolean { return !this.isExpanded; }\r\n  get isLeaf(): boolean { return !this.hasChildren; }\r\n  get isRoot(): boolean { return this.parent.data.virtual; }\r\n  get realParent(): TreeNode { return this.isRoot ? null : this.parent; }\r\n\r\n  // proxy functions:\r\n  get options(): TreeOptions { return this.treeModel.options; }\r\n  fireEvent(event) { this.treeModel.fireEvent(event); }\r\n\r\n  // field accessors:\r\n  get displayField() {\r\n    return this.getField('display');\r\n  }\r\n\r\n  get id() {\r\n    return this.getField('id');\r\n  }\r\n\r\n  set id(value) {\r\n    this.setField('id', value);\r\n  }\r\n\r\n  getField(key) {\r\n    return this.data[this.options[`${key}Field`]];\r\n  }\r\n\r\n  setField(key, value) {\r\n    this.data[this.options[`${key}Field`]] = value;\r\n  }\r\n\r\n  // traversing:\r\n  _findAdjacentSibling(steps, skipHidden = false) {\r\n    const siblings = this._getParentsChildren(skipHidden);\r\n    const index = siblings.indexOf(this);\r\n\r\n    return siblings.length > index + steps ? siblings[index + steps] : null;\r\n  }\r\n\r\n  findNextSibling(skipHidden = false) {\r\n    return this._findAdjacentSibling(+1, skipHidden);\r\n  }\r\n\r\n  findPreviousSibling(skipHidden = false) {\r\n    return this._findAdjacentSibling(-1, skipHidden);\r\n  }\r\n\r\n  getVisibleChildren() {\r\n    return this.visibleChildren;\r\n  }\r\n\r\n  @computed get visibleChildren() {\r\n    return (this.children || []).filter((node) => !node.isHidden);\r\n  }\r\n\r\n  getFirstChild(skipHidden = false) {\r\n    let children = skipHidden ? this.visibleChildren : this.children;\r\n\r\n    return children != null && children.length ? children[0] : null;\r\n  }\r\n\r\n  getLastChild(skipHidden = false) {\r\n    let children = skipHidden ? this.visibleChildren : this.children;\r\n\r\n    return children != null && children.length ? children[children.length - 1] : null;\r\n  }\r\n\r\n  findNextNode(goInside = true, skipHidden = false) {\r\n    return goInside && this.isExpanded && this.getFirstChild(skipHidden) ||\r\n           this.findNextSibling(skipHidden) ||\r\n           this.parent && this.parent.findNextNode(false, skipHidden);\r\n  }\r\n\r\n  findPreviousNode(skipHidden = false) {\r\n    let previousSibling = this.findPreviousSibling(skipHidden);\r\n    if (!previousSibling) {\r\n      return this.realParent;\r\n    }\r\n    return previousSibling._getLastOpenDescendant(skipHidden);\r\n  }\r\n\r\n  _getLastOpenDescendant(skipHidden = false) {\r\n    const lastChild = this.getLastChild(skipHidden);\r\n    return (this.isCollapsed || !lastChild)\r\n      ? this\r\n      : lastChild._getLastOpenDescendant(skipHidden);\r\n  }\r\n\r\n  private _getParentsChildren(skipHidden = false): any[] {\r\n    const children = this.parent &&\r\n      (skipHidden ? this.parent.getVisibleChildren() : this.parent.children);\r\n\r\n    return children || [];\r\n  }\r\n\r\n  private getIndexInParent(skipHidden = false) {\r\n    return this._getParentsChildren(skipHidden).indexOf(this);\r\n  }\r\n\r\n  isDescendantOf(node: TreeNode) {\r\n    if (this === node) return true;\r\n    else return this.parent && this.parent.isDescendantOf(node);\r\n  }\r\n\r\n  getNodePadding(): string {\r\n    return this.options.levelPadding * (this.level - 1) + 'px';\r\n  }\r\n\r\n  getClass(): string {\r\n    return [this.options.nodeClass(this), `tree-node-level-${ this.level }`].join(' ');\r\n  }\r\n\r\n  onDrop($event) {\r\n    this.mouseAction('drop', $event.event, {\r\n      from: $event.element,\r\n      to: { parent: this, index: 0, dropOnNode: true }\r\n    });\r\n  }\r\n\r\n  allowDrop = (element, $event?) => {\r\n    return this.options.allowDrop(element, { parent: this, index: 0 }, $event);\r\n  }\r\n\r\n  allowDragoverStyling = () => {\r\n    return this.options.allowDragoverStyling;\r\n  }\r\n\r\n  allowDrag() {\r\n    return this.options.allowDrag(this);\r\n  }\r\n\r\n\r\n  // helper methods:\r\n  loadNodeChildren() {\r\n    if (!this.options.getChildren) {\r\n      return Promise.resolve(); // Not getChildren method - for using redux\r\n    }\r\n    return Promise.resolve(this.options.getChildren(this))\r\n      .then((children) => {\r\n        if (children) {\r\n          this.setField('children', children);\r\n          this._initChildren();\r\n          if (this.options.useTriState && this.treeModel.isSelected(this)) {\r\n            this.setIsSelected(true);\r\n          }\r\n          this.children.forEach((child) => {\r\n            if (child.getField('isExpanded') && child.hasChildren) {\r\n              child.expand();\r\n            }\r\n          });\r\n      }}).then(() => {\r\n        this.fireEvent({\r\n          eventName: TREE_EVENTS.loadNodeChildren,\r\n          node: this\r\n        });\r\n      });\r\n  }\r\n\r\n  expand() {\r\n    if (!this.isExpanded) {\r\n      this.toggleExpanded();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  collapse() {\r\n    if (this.isExpanded) {\r\n      this.toggleExpanded();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  doForAll(fn: (node: ITreeNode) => any) {\r\n    Promise.resolve(fn(this)).then(() => {\r\n      if (this.children) {\r\n        this.children.forEach((child) => child.doForAll(fn));\r\n      }\r\n    });\r\n  }\r\n\r\n  expandAll() {\r\n    this.doForAll((node) => node.expand());\r\n  }\r\n\r\n  collapseAll() {\r\n    this.doForAll((node) => node.collapse());\r\n  }\r\n\r\n  ensureVisible() {\r\n    if (this.realParent) {\r\n      this.realParent.expand();\r\n      this.realParent.ensureVisible();\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleExpanded() {\r\n    this.setIsExpanded(!this.isExpanded);\r\n\r\n    return this;\r\n  }\r\n\r\n  setIsExpanded(value) {\r\n    if (this.hasChildren) {\r\n      this.treeModel.setExpandedNode(this, value);\r\n    }\r\n\r\n    return this;\r\n  };\r\n\r\n  autoLoadChildren() {\r\n    this.handler =\r\n      reaction(\r\n        () => this.isExpanded,\r\n        (isExpanded) => {\r\n          if (!this.children && this.hasChildren && isExpanded) {\r\n            this.loadNodeChildren();\r\n          }\r\n        },\r\n        { fireImmediately: true }\r\n      );\r\n  }\r\n\r\n  dispose() {\r\n    if (this.children) {\r\n      this.children.forEach((child) => child.dispose());\r\n    }\r\n    if (this.handler) {\r\n      this.handler();\r\n    }\r\n    this.parent = null;\r\n    this.children = null;\r\n  }\r\n\r\n  setIsActive(value, multi = false) {\r\n    this.treeModel.setActiveNode(this, value, multi);\r\n    if (value) {\r\n      this.focus(this.options.scrollOnActivate);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  isSelectable() {\r\n    return this.isLeaf || !this.children || !this.options.useTriState;\r\n  }\r\n\r\n  @action setIsSelected(value) {\r\n    if (this.isSelectable()) {\r\n      this.treeModel.setSelectedNode(this, value);\r\n    } else {\r\n      this.visibleChildren.forEach((child) => child.setIsSelected(value));\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleSelected() {\r\n    this.setIsSelected(!this.isSelected);\r\n\r\n    return this;\r\n  }\r\n\r\n  toggleActivated(multi = false) {\r\n    this.setIsActive(!this.isActive, multi);\r\n\r\n    return this;\r\n  }\r\n\r\n  setActiveAndVisible(multi = false) {\r\n    this.setIsActive(true, multi)\r\n      .ensureVisible();\r\n\r\n    setTimeout(this.scrollIntoView.bind(this));\r\n\r\n    return this;\r\n  }\r\n\r\n  scrollIntoView(force = false) {\r\n    this.treeModel.virtualScroll.scrollIntoView(this, force);\r\n  }\r\n\r\n  focus(scroll = true) {\r\n    let previousNode = this.treeModel.getFocusedNode();\r\n    this.treeModel.setFocusedNode(this);\r\n    if (scroll) {\r\n      this.scrollIntoView();\r\n    }\r\n    if (previousNode) {\r\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: previousNode });\r\n    }\r\n    this.fireEvent({ eventName: TREE_EVENTS.focus, node: this });\r\n\r\n    return this;\r\n  }\r\n\r\n  blur() {\r\n    let previousNode = this.treeModel.getFocusedNode();\r\n    this.treeModel.setFocusedNode(null);\r\n    if (previousNode) {\r\n      this.fireEvent({ eventName: TREE_EVENTS.blur, node: this });\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  setIsHidden(value) {\r\n    this.treeModel.setIsHidden(this, value);\r\n  }\r\n\r\n  hide() {\r\n    this.setIsHidden(true);\r\n  }\r\n\r\n  show() {\r\n    this.setIsHidden(false);\r\n  }\r\n\r\n  mouseAction(actionName: string, $event, data: any = null) {\r\n    this.treeModel.setFocus(true);\r\n\r\n    const actionMapping = this.options.actionMapping.mouse;\r\n    const mouseAction = actionMapping[actionName];\r\n\r\n    if (mouseAction) {\r\n      mouseAction(this.treeModel, this, $event, data);\r\n    }\r\n  }\r\n\r\n  getSelfHeight() {\r\n    return this.options.nodeHeight(this);\r\n  }\r\n\r\n  @action _initChildren() {\r\n    this.children = this.getField('children')\r\n      .map((c, index) => new TreeNode(c, this, this.treeModel, index));\r\n  }\r\n}\r\n\r\nfunction uuid() {\r\n  return Math.floor(Math.random() * 10000000000000);\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { observable, computed, action, autorun } from 'mobx';\r\nimport { Subscription } from 'rxjs';\r\nimport { TreeNode } from './tree-node.model';\r\nimport { TreeOptions } from './tree-options.model';\r\nimport { TreeVirtualScroll } from './tree-virtual-scroll.model';\r\nimport { ITreeModel, IDType, IDTypeDictionary } from '../defs/api';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\n@Injectable()\r\nexport class TreeModel implements ITreeModel, OnDestroy {\r\n  static focusedTree = null;\r\n\r\n  options: TreeOptions = new TreeOptions();\r\n  nodes: any[];\r\n  eventNames = Object.keys(TREE_EVENTS);\r\n  virtualScroll: TreeVirtualScroll;\r\n\r\n  @observable roots: TreeNode[];\r\n  @observable expandedNodeIds: IDTypeDictionary = {};\r\n  @observable selectedLeafNodeIds: IDTypeDictionary = {};\r\n  @observable activeNodeIds: IDTypeDictionary = {};\r\n  @observable hiddenNodeIds: IDTypeDictionary = {};\r\n  @observable focusedNodeId: IDType = null;\r\n  @observable virtualRoot: TreeNode;\r\n\r\n  private firstUpdate = true;\r\n  private events: any;\r\n  private subscriptions: Subscription[] = [];\r\n\r\n  // events\r\n  fireEvent(event) {\r\n    event.treeModel = this;\r\n    this.events[event.eventName].emit(event);\r\n    this.events.event.emit(event);\r\n  }\r\n\r\n  subscribe(eventName, fn) {\r\n    const subscription = this.events[eventName].subscribe(fn);\r\n    this.subscriptions.push(subscription);\r\n  }\r\n\r\n\r\n  // getters\r\n  getFocusedNode(): TreeNode {\r\n    return this.focusedNode;\r\n  }\r\n\r\n\r\n  getActiveNode(): TreeNode {\r\n    return this.activeNodes[0];\r\n  }\r\n\r\n  getActiveNodes(): TreeNode[] {\r\n    return this.activeNodes;\r\n  }\r\n\r\n  getVisibleRoots() {\r\n    return this.virtualRoot.visibleChildren;\r\n  }\r\n\r\n  getFirstRoot(skipHidden = false) {\r\n    const root = skipHidden ? this.getVisibleRoots() : this.roots;\r\n    return root != null && root.length ? root[0] : null;\r\n  }\r\n\r\n  getLastRoot(skipHidden = false) {\r\n    const root = skipHidden ? this.getVisibleRoots() : this.roots;\r\n    return root != null && root.length ? root[root.length - 1] : null;\r\n  }\r\n\r\n  get isFocused() {\r\n    return TreeModel.focusedTree === this;\r\n  }\r\n\r\n  isNodeFocused(node) {\r\n    return this.focusedNode === node;\r\n  }\r\n\r\n  isEmptyTree(): boolean {\r\n    return this.roots && this.roots.length === 0;\r\n  }\r\n\r\n  @computed get focusedNode() {\r\n    return this.focusedNodeId ? this.getNodeById(this.focusedNodeId) : null;\r\n  }\r\n\r\n  @computed get expandedNodes() {\r\n    const nodes = Object.keys(this.expandedNodeIds)\r\n      .filter((id) => this.expandedNodeIds[id])\r\n      .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get activeNodes() {\r\n    const nodes = Object.keys(this.activeNodeIds)\r\n      .filter((id) => this.activeNodeIds[id])\r\n      .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get hiddenNodes() {\r\n    const nodes = Object.keys(this.hiddenNodeIds)\r\n        .filter((id) => this.hiddenNodeIds[id])\r\n        .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  @computed get selectedLeafNodes() {\r\n    const nodes = Object.keys(this.selectedLeafNodeIds)\r\n        .filter((id) => this.selectedLeafNodeIds[id])\r\n        .map((id) => this.getNodeById(id));\r\n\r\n    return nodes.filter(Boolean);\r\n  }\r\n\r\n  // locating nodes\r\n  getNodeByPath(path: any[], startNode= null): TreeNode {\r\n    if (!path) return null;\r\n\r\n    startNode = startNode || this.virtualRoot;\r\n    if (path.length === 0) return startNode;\r\n\r\n    if (!startNode.children) return null;\r\n\r\n    const childId = path.shift();\r\n    const childNode = startNode.children.find(c => c.id === childId);\r\n\r\n    if (!childNode) return null;\r\n\r\n    return this.getNodeByPath(path, childNode);\r\n  }\r\n\r\n  getNodeById(id) {\r\n    const idStr = id.toString();\r\n\r\n    return this.getNodeBy((node) => node.id.toString() === idStr);\r\n  }\r\n\r\n  getNodeBy(predicate, startNode = null) {\r\n    startNode = startNode || this.virtualRoot;\r\n\r\n    if (!startNode.children) return null;\r\n\r\n    const found = startNode.children.find(predicate);\r\n\r\n    if (found) { // found in children\r\n      return found;\r\n    } else { // look in children's children\r\n      for (let child of startNode.children) {\r\n        const foundInChildren = this.getNodeBy(predicate, child);\r\n        if (foundInChildren) return foundInChildren;\r\n      }\r\n    }\r\n  }\r\n\r\n  isExpanded(node) {\r\n    return this.expandedNodeIds[node.id];\r\n  }\r\n\r\n  isHidden(node) {\r\n    return this.hiddenNodeIds[node.id];\r\n  }\r\n\r\n  isActive(node) {\r\n    return this.activeNodeIds[node.id];\r\n  }\r\n\r\n  isSelected(node) {\r\n    return this.selectedLeafNodeIds[node.id];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.dispose();\r\n    this.unsubscribeAll();\r\n  }\r\n\r\n  dispose() {\r\n    // Dispose reactions of the replaced nodes\r\n    if (this.virtualRoot) {\r\n      this.virtualRoot.dispose();\r\n    }\r\n  }\r\n\r\n  unsubscribeAll() {\r\n    this.subscriptions.forEach(subscription => subscription.unsubscribe());\r\n    this.subscriptions = [];\r\n  }\r\n\r\n  // actions\r\n  @action setData({ nodes, options = null, events = null }: {nodes: any, options: any, events: any}) {\r\n    if (options) {\r\n      this.options = new TreeOptions(options);\r\n    }\r\n    if (events) {\r\n      this.events = events;\r\n    }\r\n    if (nodes) {\r\n      this.nodes = nodes;\r\n    }\r\n\r\n    this.update();\r\n  }\r\n\r\n  @action update() {\r\n    // Rebuild tree:\r\n    let virtualRootConfig = {\r\n      id: this.options.rootId,\r\n      virtual: true,\r\n      [this.options.childrenField]: this.nodes\r\n    };\r\n\r\n    this.dispose();\r\n\r\n    this.virtualRoot = new TreeNode(virtualRootConfig, null, this, 0);\r\n\r\n    this.roots = this.virtualRoot.children;\r\n\r\n    // Fire event:\r\n    if (this.firstUpdate) {\r\n      if (this.roots) {\r\n        this.firstUpdate = false;\r\n        this._calculateExpandedNodes();\r\n      }\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.updateData });\r\n    }\r\n  }\r\n\r\n\r\n  @action setFocusedNode(node) {\r\n    this.focusedNodeId = node ? node.id : null;\r\n  }\r\n\r\n  @action setFocus(value) {\r\n    TreeModel.focusedTree = value ? this : null;\r\n  }\r\n\r\n  @action doForAll(fn) {\r\n    this.roots.forEach((root) => root.doForAll(fn));\r\n  }\r\n\r\n  @action focusNextNode() {\r\n    let previousNode = this.getFocusedNode();\r\n    let nextNode = previousNode ? previousNode.findNextNode(true, true) : this.getFirstRoot(true);\r\n    if (nextNode) nextNode.focus();\r\n  }\r\n\r\n  @action focusPreviousNode() {\r\n    let previousNode = this.getFocusedNode();\r\n    let nextNode = previousNode ? previousNode.findPreviousNode(true) : this.getLastRoot(true);\r\n    if (nextNode) nextNode.focus();\r\n  }\r\n\r\n  @action focusDrillDown() {\r\n    let previousNode = this.getFocusedNode();\r\n    if (previousNode && previousNode.isCollapsed && previousNode.hasChildren) {\r\n      previousNode.toggleExpanded();\r\n    }\r\n    else {\r\n      let nextNode = previousNode ? previousNode.getFirstChild(true) : this.getFirstRoot(true);\r\n      if (nextNode) nextNode.focus();\r\n    }\r\n  }\r\n\r\n  @action focusDrillUp() {\r\n    let previousNode = this.getFocusedNode();\r\n    if (!previousNode) return;\r\n    if (previousNode.isExpanded) {\r\n      previousNode.toggleExpanded();\r\n    }\r\n    else {\r\n      let nextNode = previousNode.realParent;\r\n      if (nextNode) nextNode.focus();\r\n    }\r\n  }\r\n\r\n  @action setActiveNode(node, value, multi = false) {\r\n    if (multi) {\r\n      this._setActiveNodeMulti(node, value);\r\n    }\r\n    else {\r\n      this._setActiveNodeSingle(node, value);\r\n    }\r\n\r\n    if (value) {\r\n      node.focus(this.options.scrollOnActivate);\r\n      this.fireEvent({ eventName: TREE_EVENTS.activate, node });\r\n      this.fireEvent({ eventName: TREE_EVENTS.nodeActivate, node }); // For IE11\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.deactivate, node });\r\n      this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node }); // For IE11\r\n    }\r\n  }\r\n\r\n  @action setSelectedNode(node, value) {\r\n    this.selectedLeafNodeIds = Object.assign({}, this.selectedLeafNodeIds, {[node.id]: value});\r\n\r\n    if (value) {\r\n      node.focus();\r\n      this.fireEvent({ eventName: TREE_EVENTS.select, node });\r\n    } else {\r\n      this.fireEvent({ eventName: TREE_EVENTS.deselect, node });\r\n    }\r\n  }\r\n\r\n  @action setExpandedNode(node, value) {\r\n    this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[node.id]: value});\r\n    this.fireEvent({ eventName: TREE_EVENTS.toggleExpanded, node, isExpanded: value });\r\n  }\r\n\r\n  @action expandAll() {\r\n    this.roots.forEach((root) => root.expandAll());\r\n  }\r\n\r\n  @action collapseAll() {\r\n    this.roots.forEach((root) => root.collapseAll());\r\n  }\r\n\r\n  @action setIsHidden(node, value) {\r\n    this.hiddenNodeIds = Object.assign({}, this.hiddenNodeIds, {[node.id]: value});\r\n  }\r\n\r\n  @action setHiddenNodeIds(nodeIds) {\r\n    this.hiddenNodeIds = nodeIds.reduce((hiddenNodeIds, id) => Object.assign(hiddenNodeIds, {\r\n      [id]: true\r\n    }), {});\r\n  }\r\n\r\n  performKeyAction(node, $event) {\r\n    const keyAction = this.options.actionMapping.keys[$event.keyCode];\r\n    if (keyAction) {\r\n      $event.preventDefault();\r\n      keyAction(this, node, $event);\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  @action filterNodes(filter, autoShow = true) {\r\n    let filterFn;\r\n\r\n    if (!filter) {\r\n      return this.clearFilter();\r\n    }\r\n\r\n    // support function and string filter\r\n    if (filter && typeof filter.valueOf() === 'string') {\r\n      filterFn = (node) => node.displayField.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\r\n    }\r\n    else if (filter && typeof filter === 'function') {\r\n       filterFn = filter;\r\n    }\r\n    else {\r\n      console.error('Don\\'t know what to do with filter', filter);\r\n      console.error('Should be either a string or function');\r\n      return;\r\n    }\r\n\r\n    const ids = {};\r\n    this.roots.forEach((node) => this._filterNode(ids, node, filterFn, autoShow));\r\n    this.hiddenNodeIds = ids;\r\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n  }\r\n\r\n  @action clearFilter() {\r\n    this.hiddenNodeIds = {};\r\n    this.fireEvent({ eventName: TREE_EVENTS.changeFilter });\r\n  }\r\n\r\n  @action moveNode(node, to) {\r\n    const fromIndex = node.getIndexInParent();\r\n    const fromParent = node.parent;\r\n\r\n    if (!this.canMoveNode(node, to, fromIndex)) return;\r\n\r\n    const fromChildren = fromParent.getField('children');\r\n\r\n    // If node doesn't have children - create children array\r\n    if (!to.parent.getField('children')) {\r\n      to.parent.setField('children', []);\r\n    }\r\n    const toChildren = to.parent.getField('children');\r\n\r\n    const originalNode = fromChildren.splice(fromIndex, 1)[0];\r\n\r\n    // Compensate for index if already removed from parent:\r\n    let toIndex = (fromParent === to.parent && to.index > fromIndex) ? to.index - 1 : to.index;\r\n\r\n    toChildren.splice(toIndex, 0, originalNode);\r\n\r\n    fromParent.treeModel.update();\r\n    if (to.parent.treeModel !== fromParent.treeModel) {\r\n      to.parent.treeModel.update();\r\n    }\r\n\r\n    this.fireEvent({\r\n      eventName: TREE_EVENTS.moveNode,\r\n      node: originalNode,\r\n      to: { parent: to.parent.data, index: toIndex },\r\n      from: { parent: fromParent.data, index: fromIndex}\r\n    });\r\n  }\r\n\r\n  @action copyNode(node, to) {\r\n    const fromIndex = node.getIndexInParent();\r\n\r\n    if (!this.canMoveNode(node, to, fromIndex)) return;\r\n\r\n    // If node doesn't have children - create children array\r\n    if (!to.parent.getField('children')) {\r\n      to.parent.setField('children', []);\r\n    }\r\n    const toChildren = to.parent.getField('children');\r\n\r\n    const nodeCopy = this.options.getNodeClone(node);\r\n\r\n    toChildren.splice(to.index, 0, nodeCopy);\r\n\r\n    node.treeModel.update();\r\n    if (to.parent.treeModel !== node.treeModel) {\r\n      to.parent.treeModel.update();\r\n    }\r\n\r\n    this.fireEvent({ eventName: TREE_EVENTS.copyNode, node: nodeCopy, to: { parent: to.parent.data, index: to.index } });\r\n  }\r\n\r\n  getState() {\r\n    return {\r\n      expandedNodeIds: this.expandedNodeIds,\r\n      selectedLeafNodeIds: this.selectedLeafNodeIds,\r\n      activeNodeIds: this.activeNodeIds,\r\n      hiddenNodeIds: this.hiddenNodeIds,\r\n      focusedNodeId: this.focusedNodeId\r\n    };\r\n  }\r\n\r\n  @action setState(state) {\r\n    if (!state) return;\r\n\r\n    Object.assign(this, {\r\n      expandedNodeIds: state.expandedNodeIds || {},\r\n      selectedLeafNodeIds: state.selectedLeafNodeIds || {},\r\n      activeNodeIds: state.activeNodeIds || {},\r\n      hiddenNodeIds: state.hiddenNodeIds || {},\r\n      focusedNodeId: state.focusedNodeId\r\n    });\r\n  }\r\n\r\n  subscribeToState(fn) {\r\n    autorun(() => fn(this.getState()));\r\n  }\r\n\r\n  canMoveNode(node, to, fromIndex = undefined) {\r\n    const fromNodeIndex = fromIndex || node.getIndexInParent();\r\n\r\n    // same node:\r\n    if (node.parent === to.parent && fromIndex === to.index) {\r\n      return false;\r\n    }\r\n\r\n    return !to.parent.isDescendantOf(node);\r\n  }\r\n\r\n  calculateExpandedNodes() {\r\n      this._calculateExpandedNodes();\r\n  }\r\n\r\n  // private methods\r\n  private _filterNode(ids, node, filterFn, autoShow) {\r\n    // if node passes function then it's visible\r\n    let isVisible = filterFn(node);\r\n\r\n    if (node.children) {\r\n      // if one of node's children passes filter then this node is also visible\r\n      node.children.forEach((child) => {\r\n        if (this._filterNode(ids, child, filterFn, autoShow)) {\r\n          isVisible = true;\r\n        }\r\n      });\r\n    }\r\n\r\n    // mark node as hidden\r\n    if (!isVisible) {\r\n      ids[node.id] = true;\r\n    }\r\n    // auto expand parents to make sure the filtered nodes are visible\r\n    if (autoShow && isVisible) {\r\n      node.ensureVisible();\r\n    }\r\n    return isVisible;\r\n  }\r\n\r\n  private _calculateExpandedNodes(startNode = null) {\r\n    startNode = startNode || this.virtualRoot;\r\n\r\n    if (startNode.data[this.options.isExpandedField]) {\r\n      this.expandedNodeIds = Object.assign({}, this.expandedNodeIds, {[startNode.id]: true});\r\n    }\r\n    if (startNode.children) {\r\n      startNode.children.forEach((child) => this._calculateExpandedNodes(child));\r\n    }\r\n  }\r\n\r\n  private _setActiveNodeSingle(node, value) {\r\n    // Deactivate all other nodes:\r\n    this.activeNodes\r\n      .filter((activeNode) => activeNode !== node)\r\n      .forEach((activeNode) => {\r\n        this.fireEvent({ eventName: TREE_EVENTS.deactivate, node: activeNode });\r\n        this.fireEvent({ eventName: TREE_EVENTS.nodeDeactivate, node: activeNode }); // For IE11\r\n      });\r\n\r\n    if (value) {\r\n      this.activeNodeIds = {[node.id]: true};\r\n    }\r\n    else {\r\n      this.activeNodeIds = {};\r\n    }\r\n  }\r\n\r\n  private _setActiveNodeMulti(node, value) {\r\n    this.activeNodeIds = Object.assign({}, this.activeNodeIds, {[node.id]: value});\r\n  }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class TreeDraggedElement {\r\n  _draggedElement: any = null;\r\n\r\n  set(draggedElement: any) {\r\n    this._draggedElement = draggedElement;\r\n  }\r\n\r\n  get(): any {\r\n    return this._draggedElement;\r\n  }\r\n\r\n  isDragging() {\r\n    return !!this.get();\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { observable, computed, action, autorun, reaction } from 'mobx';\r\nimport { TreeModel } from './tree.model';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\nconst Y_OFFSET = 500; // Extra pixels outside the viewport, in each direction, to render nodes in\r\nconst Y_EPSILON = 150; // Minimum pixel change required to recalculate the rendered nodes\r\n\r\n@Injectable()\r\nexport class TreeVirtualScroll {\r\n  private _dispose: any;\r\n\r\n  @observable yBlocks = 0;\r\n  @observable x = 0;\r\n  @observable viewportHeight = null;\r\n  viewport = null;\r\n\r\n  @computed get y() {\r\n    return this.yBlocks * Y_EPSILON;\r\n  }\r\n\r\n  @computed get totalHeight() {\r\n    return this.treeModel.virtualRoot ? this.treeModel.virtualRoot.height : 0;\r\n  }\r\n\r\n  constructor(private treeModel: TreeModel) {\r\n    treeModel.virtualScroll = this;\r\n    this._dispose = [autorun(() => this.fixScroll())];\r\n  }\r\n\r\n  fireEvent(event) {\r\n    this.treeModel.fireEvent(event);\r\n  }\r\n\r\n  init() {\r\n    const fn = this.recalcPositions.bind(this);\r\n\r\n    fn();\r\n    this._dispose = [\r\n      ...this._dispose,\r\n      reaction(() => this.treeModel.roots, fn),\r\n      reaction(() => this.treeModel.expandedNodeIds, fn),\r\n      reaction(() => this.treeModel.hiddenNodeIds, fn)\r\n    ];\r\n    this.treeModel.subscribe(TREE_EVENTS.loadNodeChildren, fn);\r\n  }\r\n\r\n  isEnabled() {\r\n    return this.treeModel.options.useVirtualScroll;\r\n  }\r\n\r\n  @action private _setYBlocks(value) {\r\n    this.yBlocks = value;\r\n  }\r\n\r\n  @action recalcPositions() {\r\n    this.treeModel.virtualRoot.height = this._getPositionAfter(this.treeModel.getVisibleRoots(), 0);\r\n  }\r\n\r\n  private _getPositionAfter(nodes, startPos) {\r\n    let position = startPos;\r\n\r\n    nodes.forEach((node) => {\r\n      node.position = position;\r\n      position = this._getPositionAfterNode(node, position);\r\n    });\r\n    return position;\r\n  }\r\n\r\n  private _getPositionAfterNode(node, startPos) {\r\n    let position = node.getSelfHeight() + startPos;\r\n\r\n    if (node.children && node.isExpanded) { // TBD: consider loading component as well\r\n      position = this._getPositionAfter(node.visibleChildren, position);\r\n    }\r\n    node.height = position - startPos;\r\n    return position;\r\n  }\r\n\r\n\r\n  clear() {\r\n    this._dispose.forEach((d) => d());\r\n  }\r\n\r\n  @action setViewport(viewport) {\r\n    Object.assign(this, {\r\n      viewport,\r\n      x: viewport.scrollLeft,\r\n      yBlocks: Math.round(viewport.scrollTop / Y_EPSILON),\r\n      viewportHeight: viewport.getBoundingClientRect ? viewport.getBoundingClientRect().height : 0\r\n    });\r\n  }\r\n\r\n  @action scrollIntoView(node, force, scrollToMiddle = true) {\r\n    if (node.options.scrollContainer) {\r\n      const scrollContainer = node.options.scrollContainer;\r\n      const scrollContainerHeight = scrollContainer.getBoundingClientRect().height;\r\n      const scrollContainerTop = scrollContainer.getBoundingClientRect().top;\r\n      const nodeTop = this.viewport.getBoundingClientRect().top + node.position - scrollContainerTop;\r\n\r\n      if (force || // force scroll to node\r\n        nodeTop < scrollContainer.scrollTop || // node is above scroll container\r\n        nodeTop + node.getSelfHeight() > scrollContainer.scrollTop + scrollContainerHeight) { // node is below container\r\n        scrollContainer.scrollTop = scrollToMiddle ?\r\n          nodeTop - scrollContainerHeight / 2 : // scroll to middle\r\n          nodeTop; // scroll to start\r\n      }\r\n    } else {\r\n      if (force || // force scroll to node\r\n        node.position < this.y || // node is above viewport\r\n        node.position + node.getSelfHeight() > this.y + this.viewportHeight) { // node is below viewport\r\n        if (this.viewport) {\r\n          this.viewport.scrollTop = scrollToMiddle ?\r\n          node.position - this.viewportHeight / 2 : // scroll to middle\r\n          node.position; // scroll to start\r\n\r\n          this._setYBlocks(Math.floor(this.viewport.scrollTop / Y_EPSILON));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  getViewportNodes(nodes) {\r\n    if (!nodes) return [];\r\n\r\n    const visibleNodes = nodes.filter((node) => !node.isHidden);\r\n\r\n    if (!this.isEnabled()) return visibleNodes;\r\n\r\n    if (!this.viewportHeight || !visibleNodes.length) return [];\r\n\r\n    // When loading children async this method is called before their height and position is calculated.\r\n    // In that case firstIndex === 0 and lastIndex === visibleNodes.length - 1 (e.g. 1000),\r\n    // which means that it loops through every visibleNodes item and push them into viewportNodes array.\r\n    // We can prevent nodes from being pushed to the array and wait for the appropriate calculations to take place\r\n    const lastVisibleNode = visibleNodes.slice(-1)[0]\r\n    if (!lastVisibleNode.height && lastVisibleNode.position === 0) return [];\r\n\r\n    // Search for first node in the viewport using binary search\r\n    // Look for first node that starts after the beginning of the viewport (with buffer)\r\n    // Or that ends after the beginning of the viewport\r\n    const firstIndex = binarySearch(visibleNodes, (node) => {\r\n      return (node.position + Y_OFFSET > this.y) ||\r\n             (node.position + node.height > this.y);\r\n    });\r\n\r\n    // Search for last node in the viewport using binary search\r\n    // Look for first node that starts after the end of the viewport (with buffer)\r\n    const lastIndex = binarySearch(visibleNodes, (node) => {\r\n      return node.position - Y_OFFSET > this.y + this.viewportHeight;\r\n    }, firstIndex);\r\n\r\n    const viewportNodes = [];\r\n\r\n    for (let i = firstIndex; i <= lastIndex; i++) {\r\n      viewportNodes.push(visibleNodes[i]);\r\n    }\r\n\r\n    return viewportNodes;\r\n  }\r\n\r\n  fixScroll() {\r\n    const maxY = Math.max(0, this.totalHeight - this.viewportHeight);\r\n\r\n    if (this.y < 0) this._setYBlocks(0);\r\n    if (this.y > maxY) this._setYBlocks(maxY / Y_EPSILON);\r\n  }\r\n}\r\n\r\nfunction binarySearch(nodes, condition, firstIndex = 0) {\r\n  let index = firstIndex;\r\n  let toIndex = nodes.length - 1;\r\n\r\n  while (index !== toIndex) {\r\n    let midIndex = Math.floor((index + toIndex) / 2);\r\n\r\n    if (condition(nodes[midIndex])) {\r\n      toIndex = midIndex;\r\n    }\r\n    else {\r\n      if (index === midIndex) index = toIndex;\r\n      else index = midIndex;\r\n    }\r\n  }\r\n  return index;\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  TemplateRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  encapsulation: ViewEncapsulation.None,\r\n  selector: 'tree-loading-component',\r\n  template: `\r\n    <span *ngIf=\"!template\">loading...</span>\r\n    <ng-container\r\n      [ngTemplateOutlet]=\"template\"\r\n      [ngTemplateOutletContext]=\"{ $implicit: node }\"\r\n    >\r\n    </ng-container>\r\n  `\r\n})\r\nexport class LoadingComponent {\r\n  @Input() template: TemplateRef<any>;\r\n  @Input() node: TreeNode;\r\n}\r\n","import {\r\n  AfterViewInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  HostListener,\r\n  Input,\r\n  NgZone,\r\n  OnDestroy,\r\n  Output,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\n\r\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\nconst DRAG_DISABLED_CLASS = 'is-dragging-over-disabled';\r\n\r\n@Directive({\r\n  selector: '[treeDrop]'\r\n})\r\nexport class TreeDropDirective implements AfterViewInit, OnDestroy {\r\n  @Input() allowDragoverStyling = true;\r\n  @Output('treeDrop') onDropCallback = new EventEmitter();\r\n  @Output('treeDropDragOver') onDragOverCallback = new EventEmitter();\r\n  @Output('treeDropDragLeave') onDragLeaveCallback = new EventEmitter();\r\n  @Output('treeDropDragEnter') onDragEnterCallback = new EventEmitter();\r\n  private readonly dragOverEventHandler: (ev: DragEvent) => void;\r\n  private readonly dragEnterEventHandler: (ev: DragEvent) => void;\r\n  private readonly dragLeaveEventHandler: (ev: DragEvent) => void;\r\n\r\n  private _allowDrop = (element, $event) => true;\r\n\r\n  @Input() set treeAllowDrop(allowDrop) {\r\n    if (allowDrop instanceof Function) {\r\n      this._allowDrop = allowDrop;\r\n    }\r\n    else this._allowDrop = (element, $event) => allowDrop;\r\n  }\r\n\r\n  allowDrop($event) {\r\n    return this._allowDrop(this.treeDraggedElement.get(), $event);\r\n  }\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\r\n    this.dragOverEventHandler = this.onDragOver.bind(this);\r\n    this.dragEnterEventHandler = this.onDragEnter.bind(this);\r\n    this.dragLeaveEventHandler = this.onDragLeave.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('dragover', this.dragOverEventHandler);\r\n      el.addEventListener('dragenter', this.dragEnterEventHandler);\r\n      el.addEventListener('dragleave', this.dragLeaveEventHandler);\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    el.removeEventListener('dragover', this.dragOverEventHandler);\r\n    el.removeEventListener('dragenter', this.dragEnterEventHandler);\r\n    el.removeEventListener('dragleave', this.dragLeaveEventHandler);\r\n  }\r\n\r\n  onDragOver($event) {\r\n    if (!this.allowDrop($event)) {\r\n      if (this.allowDragoverStyling) {\r\n        return this.addDisabledClass();\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.onDragOverCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    $event.preventDefault();\r\n    if (this.allowDragoverStyling) {\r\n      this.addClass();\r\n    }\r\n  }\r\n\r\n  onDragEnter($event) {\r\n    if (!this.allowDrop($event)) return;\r\n\r\n    $event.preventDefault();\r\n    this.onDragEnterCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n  }\r\n\r\n  onDragLeave($event) {\r\n    if (!this.allowDrop($event)) {\r\n      if (this.allowDragoverStyling) {\r\n        return this.removeDisabledClass();\r\n      }\r\n      return;\r\n    }\r\n    this.onDragLeaveCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    if (this.allowDragoverStyling) {\r\n      this.removeClass();\r\n    }\r\n  }\r\n\r\n  @HostListener('drop', ['$event']) onDrop($event) {\r\n    if (!this.allowDrop($event)) return;\r\n\r\n    $event.preventDefault();\r\n    this.onDropCallback.emit({event: $event, element: this.treeDraggedElement.get()});\r\n\r\n    if (this.allowDragoverStyling) {\r\n      this.removeClass();\r\n    }\r\n    this.treeDraggedElement.set(null);\r\n  }\r\n\r\n  private addClass() {\r\n    this.renderer.addClass(this.el.nativeElement, DRAG_OVER_CLASS);\r\n  }\r\n\r\n  private removeClass() {\r\n    this.renderer.removeClass(this.el.nativeElement, DRAG_OVER_CLASS);\r\n  }\r\n\r\n  private addDisabledClass() {\r\n    this.renderer.addClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n  }\r\n\r\n  private removeDisabledClass() {\r\n    this.renderer.removeClass(this.el.nativeElement, DRAG_DISABLED_CLASS);\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'TreeNodeDropSlot, tree-node-drop-slot',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <div\r\n      class=\"node-drop-slot\"\r\n      (treeDrop)=\"onDrop($event)\"\r\n      [treeAllowDrop]=\"allowDrop.bind(this)\"\r\n      [allowDragoverStyling]=\"true\">\r\n    </div>\r\n  `\r\n})\r\nexport class TreeNodeDropSlot {\r\n  @Input() node: TreeNode;\r\n  @Input() dropIndex: number;\r\n\r\n  onDrop($event) {\r\n    this.node.mouseAction('drop', $event.event, {\r\n      from: $event.element,\r\n      to: { parent: this.node, index: this.dropIndex }\r\n    });\r\n  }\r\n\r\n  allowDrop(element, $event) {\r\n    return this.node.options.allowDrop(element, { parent: this.node, index: this.dropIndex }, $event);\r\n  }\r\n}\r\n","import { action as mobxAction } from 'mobx';\r\nimport { computed as mobxComputed } from 'mobx';\r\nimport { observable as mobxObservable } from 'mobx';\r\n\r\n// Re-export mobx operators to be able to use inside components with AOT:\r\nexport function actionInternal(...args) {\r\n  return (mobxAction as any)(...args);\r\n}\r\nexport const action: typeof mobxAction = Object.assign(\r\n  actionInternal,\r\n  mobxAction\r\n) as any;\r\n\r\nfunction computedInternal(...args) {\r\n  return (mobxComputed as any)(...args);\r\n}\r\nexport const computed: typeof mobxComputed = Object.assign(\r\n  computedInternal,\r\n  mobxComputed\r\n) as any;\r\n\r\nfunction observableInternal(...args) {\r\n  return (mobxObservable as any)(...args);\r\n}\r\n\r\nexport const observable: typeof mobxObservable = Object.assign(\r\n  observableInternal,\r\n  mobxObservable\r\n) as any;\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n  OnInit,\r\n  OnDestroy\r\n} from '@angular/core';\r\nimport { reaction } from 'mobx';\r\nimport { observable, computed, action } from '../mobx-angular/mobx-proxy';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nimport { TreeNode } from '../models/tree-node.model';\r\nimport { TreeModel } from '../models/tree.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-collection',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.margin-top]=\"marginTop\">\r\n        <tree-node\r\n          *ngFor=\"let node of viewportNodes; let i = index; trackBy: trackNode\"\r\n          [node]=\"node\"\r\n          [index]=\"i\"\r\n          [templates]=\"templates\"\r\n        >\r\n        </tree-node>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeCollectionComponent implements OnInit, OnDestroy {\r\n  @Input()\r\n  get nodes() {\r\n    return this._nodes;\r\n  }\r\n  set nodes(nodes) {\r\n    this.setNodes(nodes);\r\n  }\r\n\r\n  @Input() treeModel: TreeModel;\r\n\r\n  @observable _nodes;\r\n  private virtualScroll: TreeVirtualScroll; // Cannot inject this, because we might be inside treeNodeTemplateFull\r\n  @Input() templates;\r\n\r\n  @observable viewportNodes: TreeNode[];\r\n\r\n  @computed get marginTop(): string {\r\n    const firstNode =\r\n      this.viewportNodes && this.viewportNodes.length && this.viewportNodes[0];\r\n    const relativePosition =\r\n      firstNode && firstNode.parent\r\n        ? firstNode.position -\r\n          firstNode.parent.position -\r\n          firstNode.parent.getSelfHeight()\r\n        : 0;\r\n\r\n    return `${relativePosition}px`;\r\n  }\r\n\r\n  _dispose = [];\r\n\r\n  @action setNodes(nodes) {\r\n    this._nodes = nodes;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.virtualScroll = this.treeModel.virtualScroll;\r\n    this._dispose = [\r\n      // return node indexes so we can compare structurally,\r\n      reaction(\r\n        () => {\r\n          return this.virtualScroll\r\n            .getViewportNodes(this.nodes)\r\n            .map(n => n.index);\r\n        },\r\n        nodeIndexes => {\r\n          this.viewportNodes = nodeIndexes.map(i => this.nodes[i]);\r\n        },\r\n        { compareStructural: true, fireImmediately: true } as any\r\n      ),\r\n      reaction(\r\n        () => this.nodes,\r\n        nodes => {\r\n          this.viewportNodes = this.virtualScroll.getViewportNodes(nodes);\r\n        }\r\n      )\r\n    ];\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._dispose.forEach(d => d());\r\n  }\r\n\r\n  trackNode(index, node) {\r\n    return node.id;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  ElementRef,\r\n  AfterViewInit,\r\n  OnInit,\r\n  OnDestroy,\r\n} from '@angular/core';\r\nimport { TreeVirtualScroll } from '../models/tree-virtual-scroll.model';\r\nimport { TREE_EVENTS } from '../constants/events';\r\n\r\n@Component({\r\n  selector: 'tree-viewport',\r\n  styles: [],\r\n  providers: [TreeVirtualScroll],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div [style.height]=\"getTotalHeight()\">\r\n        <ng-content></ng-content>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeViewportComponent implements AfterViewInit, OnInit, OnDestroy {\r\n  setViewport = this.throttle(() => {\r\n    this.virtualScroll.setViewport(this.elementRef.nativeElement);\r\n  }, 17);\r\n\r\n  private readonly scrollEventHandler: ($event: Event) => void;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef,\r\n    public virtualScroll: TreeVirtualScroll\r\n  ) {\r\n    this.scrollEventHandler = this.setViewport.bind(this);\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.virtualScroll.init();\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    setTimeout(() => {\r\n      this.setViewport();\r\n      this.virtualScroll.fireEvent({ eventName: TREE_EVENTS.initialized });\r\n    });\r\n    let el: HTMLElement = this.elementRef.nativeElement;\r\n    el.addEventListener('scroll', this.scrollEventHandler);\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.virtualScroll.clear();\r\n    let el: HTMLElement = this.elementRef.nativeElement;\r\n    el.removeEventListener('scroll', this.scrollEventHandler);\r\n  }\r\n\r\n  getTotalHeight() {\r\n    return (\r\n      (this.virtualScroll.isEnabled() &&\r\n        this.virtualScroll.totalHeight + 'px') ||\r\n      'auto'\r\n    );\r\n  }\r\n\r\n  private throttle(func, timeFrame) {\r\n    let lastTime = 0;\r\n    return function () {\r\n      let now = Date.now();\r\n      if (now - lastTime >= timeFrame) {\r\n        func();\r\n        lastTime = now;\r\n      }\r\n    };\r\n  }\r\n}\r\n","import { Component, ContentChild, EventEmitter, HostListener, Input, OnChanges, Output, TemplateRef, ViewChild } from '@angular/core';\r\nimport { TreeModel } from '../models/tree.model';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\nimport { TreeOptions } from '../models/tree-options.model';\r\nimport { ITreeOptions } from '../defs/api';\r\nimport { TreeViewportComponent } from './tree-viewport.component';\r\n\r\n@Component({\r\n  selector: 'Tree, tree-root',\r\n  providers: [TreeModel],\r\n  styles: [],\r\n  template: `\r\n      <tree-viewport #viewport>\r\n          <div\r\n                  class=\"angular-tree-component\"\r\n                  [class.node-dragging]=\"treeDraggedElement.isDragging()\"\r\n                  [class.angular-tree-component-rtl]=\"treeModel.options.rtl\">\r\n              <tree-node-collection\r\n                      *ngIf=\"treeModel.roots\"\r\n                      [nodes]=\"treeModel.roots\"\r\n                      [treeModel]=\"treeModel\"\r\n                      [templates]=\"{\r\n            loadingTemplate: loadingTemplate,\r\n            treeNodeTemplate: treeNodeTemplate,\r\n            treeNodeWrapperTemplate: treeNodeWrapperTemplate,\r\n            treeNodeFullTemplate: treeNodeFullTemplate\r\n          }\">\r\n              </tree-node-collection>\r\n              <tree-node-drop-slot\r\n                      class=\"empty-tree-drop-slot\"\r\n                      *ngIf=\"treeModel.isEmptyTree()\"\r\n                      [dropIndex]=\"0\"\r\n                      [node]=\"treeModel.virtualRoot\">\r\n              </tree-node-drop-slot>\r\n          </div>\r\n      </tree-viewport>\r\n  `\r\n})\r\nexport class TreeComponent implements OnChanges {\r\n  _nodes: any[];\r\n  _options: TreeOptions;\r\n\r\n  @ContentChild('loadingTemplate', { static: false }) loadingTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeTemplate', { static: false }) treeNodeTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeWrapperTemplate', { static: false }) treeNodeWrapperTemplate: TemplateRef<any>;\r\n  @ContentChild('treeNodeFullTemplate', { static: false }) treeNodeFullTemplate: TemplateRef<any>;\r\n  @ViewChild('viewport', { static: false }) viewportComponent: TreeViewportComponent;\r\n\r\n  // Will be handled in ngOnChanges\r\n  @Input() set nodes(nodes: any[]) {\r\n  };\r\n\r\n  @Input() set options(options: ITreeOptions) {\r\n  };\r\n\r\n  @Input() set focused(value: boolean) {\r\n    this.treeModel.setFocus(value);\r\n  }\r\n\r\n  @Input() set state(state) {\r\n    this.treeModel.setState(state);\r\n  }\r\n\r\n  @Output() toggleExpanded;\r\n  @Output() activate;\r\n  @Output() deactivate;\r\n  @Output() nodeActivate;\r\n  @Output() nodeDeactivate;\r\n  @Output() select;\r\n  @Output() deselect;\r\n  @Output() focus;\r\n  @Output() blur;\r\n  @Output() updateData;\r\n  @Output() initialized;\r\n  @Output() moveNode;\r\n  @Output() copyNode;\r\n  @Output() loadNodeChildren;\r\n  @Output() changeFilter;\r\n  @Output() event;\r\n  @Output() stateChange;\r\n\r\n  constructor(\r\n    public treeModel: TreeModel,\r\n    public treeDraggedElement: TreeDraggedElement) {\r\n\r\n    treeModel.eventNames.forEach((name) => this[name] = new EventEmitter());\r\n    treeModel.subscribeToState((state) => this.stateChange.emit(state));\r\n  }\r\n\r\n  @HostListener('body: keydown', ['$event'])\r\n  onKeydown($event) {\r\n    if (!this.treeModel.isFocused) return;\r\n    if (['input', 'textarea'].includes(document.activeElement.tagName.toLowerCase())) return;\r\n\r\n    const focusedNode = this.treeModel.getFocusedNode();\r\n\r\n    this.treeModel.performKeyAction(focusedNode, $event);\r\n  }\r\n\r\n  @HostListener('body: mousedown', ['$event'])\r\n  onMousedown($event) {\r\n    function isOutsideClick(startElement: Element, nodeName: string) {\r\n      return !startElement ? true : startElement.localName === nodeName ? false : isOutsideClick(startElement.parentElement, nodeName);\r\n    }\r\n\r\n    if (isOutsideClick($event.target, 'tree-root')) {\r\n      this.treeModel.setFocus(false);\r\n    }\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.options || changes.nodes) {\r\n      this.treeModel.setData({\r\n        options: changes.options && changes.options.currentValue,\r\n        nodes: changes.nodes && changes.nodes.currentValue,\r\n        events: this.pick(this, this.treeModel.eventNames)\r\n      });\r\n    }\r\n  }\r\n\r\n  sizeChanged() {\r\n    this.viewportComponent.setViewport();\r\n  }\r\n\r\n  private pick(object, keys) {\r\n    return keys.reduce((obj, key) => {\r\n      if (object && object.hasOwnProperty(key)) {\r\n        obj[key] = object[key];\r\n      }\r\n      return obj;\r\n    }, {});\r\n  }\r\n}\r\n","import { Directive, Input, Renderer2, TemplateRef, ViewContainerRef } from '@angular/core';\r\n\r\nconst EASE_ACCELERATION = 1.005;\r\n\r\n@Directive({\r\n  selector: '[treeAnimateOpen]'\r\n})\r\nexport class TreeAnimateOpenDirective {\r\n  private _isOpen: boolean;\r\n\r\n  @Input('treeAnimateOpenSpeed') animateSpeed: number;\r\n  @Input('treeAnimateOpenAcceleration') animateAcceleration: number;\r\n  @Input('treeAnimateOpenEnabled') isEnabled: boolean;\r\n\r\n  @Input('treeAnimateOpen')\r\n  set isOpen(value: boolean) {\r\n    if (value) {\r\n      this._show();\r\n      if (this.isEnabled && this._isOpen === false) {\r\n        this._animateOpen();\r\n      }\r\n    } else {\r\n      this.isEnabled ? this._animateClose() : this._hide();\r\n    }\r\n    this._isOpen = !!value;\r\n  };\r\n\r\n  private innerElement: any;\r\n\r\n  constructor(\r\n    private renderer: Renderer2,\r\n    private templateRef: TemplateRef<any>,\r\n    private viewContainerRef: ViewContainerRef) {\r\n  }\r\n\r\n  private _show() {\r\n    if (this.innerElement) return;\r\n\r\n    // create child view\r\n    this.innerElement = this.viewContainerRef.createEmbeddedView(this.templateRef).rootNodes[0];\r\n  }\r\n\r\n  private _hide() {\r\n    this.viewContainerRef.clear();\r\n    this.innerElement = null;\r\n  }\r\n\r\n  private _animateOpen() {\r\n    let delta = this.animateSpeed;\r\n    let ease = this.animateAcceleration;\r\n    let maxHeight = 0;\r\n\r\n    // set height to 0\r\n    this.renderer.setStyle(this.innerElement, 'max-height', `0`);\r\n\r\n    // increase maxHeight until height doesn't change\r\n    setTimeout(() => { // Allow inner element to create its content\r\n      const i = setInterval(() => {\r\n        if (!this._isOpen || !this.innerElement) return clearInterval(i);\r\n\r\n        maxHeight += delta;\r\n        const roundedMaxHeight = Math.round(maxHeight);\r\n\r\n        this.renderer.setStyle(this.innerElement, 'max-height', `${roundedMaxHeight}px`);\r\n        const height = this.innerElement.getBoundingClientRect ? this.innerElement.getBoundingClientRect().height : 0; // TBD use renderer\r\n\r\n        delta *= ease;\r\n        ease *= EASE_ACCELERATION;\r\n        if (height < roundedMaxHeight) {\r\n          // Make maxHeight auto because animation finished and container might change height later on\r\n          this.renderer.setStyle(this.innerElement, 'max-height', null);\r\n          clearInterval(i);\r\n        }\r\n      }, 17);\r\n    });\r\n  }\r\n\r\n  private _animateClose() {\r\n    if (!this.innerElement) return;\r\n\r\n    let delta = this.animateSpeed;\r\n    let ease = this.animateAcceleration;\r\n    let height = this.innerElement.getBoundingClientRect().height; // TBD use renderer\r\n\r\n    // slowly decrease maxHeight to 0, starting from current height\r\n    const i = setInterval(() => {\r\n      if (this._isOpen || !this.innerElement) return clearInterval(i);\r\n\r\n      height -= delta;\r\n      this.renderer.setStyle(this.innerElement, 'max-height', `${height}px`);\r\n      delta *= ease;\r\n      ease *= EASE_ACCELERATION;\r\n\r\n      if (height <= 0) {\r\n        // after animation complete - remove child element\r\n        this.viewContainerRef.clear();\r\n        this.innerElement = null;\r\n        clearInterval(i);\r\n      }\r\n    }, 17);\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-children',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        [class.tree-children]=\"true\"\r\n        [class.tree-children-no-padding]=\"node.options.levelPadding\"\r\n        *treeAnimateOpen=\"\r\n          node.isExpanded;\r\n          speed: node.options.animateSpeed;\r\n          acceleration: node.options.animateAcceleration;\r\n          enabled: node.options.animateExpand\r\n        \"\r\n      >\r\n        <tree-node-collection\r\n          *ngIf=\"node.children\"\r\n          [nodes]=\"node.children\"\r\n          [templates]=\"templates\"\r\n          [treeModel]=\"node.treeModel\"\r\n        >\r\n        </tree-node-collection>\r\n        <tree-loading-component\r\n          [style.padding-left]=\"node.getNodePadding()\"\r\n          class=\"tree-node-loading\"\r\n          *ngIf=\"!node.children\"\r\n          [template]=\"templates.loadingTemplate\"\r\n          [node]=\"node\"\r\n        ></tree-loading-component>\r\n      </div>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeChildrenComponent {\r\n  @Input() node: TreeNode;\r\n  @Input() templates: any;\r\n}\r\n","import { Component, Input, ViewEncapsulation, TemplateRef } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-content',\r\n  encapsulation: ViewEncapsulation.None,\r\n  template: `\r\n  <span *ngIf=\"!template\">{{ node.displayField }}</span>\r\n  <ng-container\r\n    [ngTemplateOutlet]=\"template\"\r\n    [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index }\">\r\n  </ng-container>`,\r\n})\r\nexport class TreeNodeContent {\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() template: TemplateRef<any>;\r\n}\r\n","import { AfterViewInit, Directive, DoCheck, ElementRef, HostListener, Input, NgZone, OnDestroy, Renderer2 } from '@angular/core';\r\nimport { TreeDraggedElement } from '../models/tree-dragged-element.model';\r\n\r\nconst DRAG_OVER_CLASS = 'is-dragging-over';\r\n\r\n@Directive({\r\n  selector: '[treeDrag]'\r\n})\r\nexport class TreeDragDirective implements AfterViewInit, DoCheck, OnDestroy {\r\n  @Input('treeDrag') draggedElement;\r\n  @Input() treeDragEnabled;\r\n  private readonly dragEventHandler: (ev: DragEvent) => void;\r\n\r\n  constructor(private el: ElementRef, private renderer: Renderer2, private treeDraggedElement: TreeDraggedElement, private ngZone: NgZone) {\r\n    this.dragEventHandler = this.onDrag.bind(this);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    this.ngZone.runOutsideAngular(() => {\r\n      el.addEventListener('drag', this.dragEventHandler);\r\n    });\r\n  }\r\n\r\n  ngDoCheck() {\r\n    this.renderer.setAttribute(this.el.nativeElement, 'draggable', this.treeDragEnabled ? 'true' : 'false');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    let el: HTMLElement = this.el.nativeElement;\r\n    el.removeEventListener('drag', this.dragEventHandler);\r\n  }\r\n\r\n  @HostListener('dragstart', ['$event']) onDragStart(ev) {\r\n    // setting the data is required by firefox\r\n    ev.dataTransfer.setData('text', ev.target.id);\r\n    this.treeDraggedElement.set(this.draggedElement);\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('dragStart', ev);\r\n    }\r\n  }\r\n\r\n  onDrag(ev) {\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('drag', ev);\r\n    }\r\n  }\r\n\r\n  @HostListener('dragend') onDragEnd() {\r\n    if (this.draggedElement.mouseAction) {\r\n      this.draggedElement.mouseAction('dragEnd');\r\n    }\r\n    this.treeDraggedElement.set(null);\r\n  }\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-expander',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <span\r\n        *ngIf=\"node.hasChildren\"\r\n        [class.toggle-children-wrapper-expanded]=\"node.isExpanded\"\r\n        [class.toggle-children-wrapper-collapsed]=\"node.isCollapsed\"\r\n        class=\"toggle-children-wrapper\"\r\n        (click)=\"node.mouseAction('expanderClick', $event)\"\r\n      >\r\n        <span class=\"toggle-children\"></span>\r\n      </span>\r\n      <span *ngIf=\"!node.hasChildren\" class=\"toggle-children-placeholder\">\r\n      </span>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeExpanderComponent {\r\n  @Input() node: TreeNode;\r\n}\r\n","import { Component, Input, ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-checkbox',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <input\r\n        class=\"tree-node-checkbox\"\r\n        type=\"checkbox\"\r\n        (click)=\"node.mouseAction('checkboxClick', $event)\"\r\n        [checked]=\"node.isSelected\"\r\n        [indeterminate]=\"node.isPartiallySelected\"\r\n      />\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeCheckboxComponent {\r\n  @Input() node: TreeNode;\r\n}\r\n","import { Component , Input , ViewEncapsulation } from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'tree-node-wrapper' ,\r\n  encapsulation: ViewEncapsulation.None ,\r\n  styles: [] ,\r\n  template: `\r\n      <div *ngIf=\"!templates.treeNodeWrapperTemplate\" class=\"node-wrapper\" [style.padding-left]=\"node.getNodePadding()\">\r\n          <tree-node-checkbox *ngIf=\"node.options.useCheckbox\" [node]=\"node\"></tree-node-checkbox>\r\n          <tree-node-expander [node]=\"node\"></tree-node-expander>\r\n          <div class=\"node-content-wrapper\"\r\n               [class.node-content-wrapper-active]=\"node.isActive\"\r\n               [class.node-content-wrapper-focused]=\"node.isFocused\"\r\n               (click)=\"node.mouseAction('click', $event)\"\r\n               (dblclick)=\"node.mouseAction('dblClick', $event)\"\r\n               (mouseover)=\"node.mouseAction('mouseOver', $event)\"\r\n               (mouseout)=\"node.mouseAction('mouseOut', $event)\"\r\n               (contextmenu)=\"node.mouseAction('contextMenu', $event)\"\r\n               (treeDrop)=\"node.onDrop($event)\"\r\n               (treeDropDragOver)=\"node.mouseAction('dragOver', $event)\"\r\n               (treeDropDragLeave)=\"node.mouseAction('dragLeave', $event)\"\r\n               (treeDropDragEnter)=\"node.mouseAction('dragEnter', $event)\"\r\n               [treeAllowDrop]=\"node.allowDrop\"\r\n               [allowDragoverStyling]=\"node.allowDragoverStyling()\"\r\n               [treeDrag]=\"node\"\r\n               [treeDragEnabled]=\"node.allowDrag()\">\r\n\r\n              <tree-node-content [node]=\"node\" [index]=\"index\" [template]=\"templates.treeNodeTemplate\">\r\n              </tree-node-content>\r\n          </div>\r\n      </div>\r\n      <ng-container\r\n              [ngTemplateOutlet]=\"templates.treeNodeWrapperTemplate\"\r\n              [ngTemplateOutletContext]=\"{ $implicit: node, node: node, index: index, templates: templates }\">\r\n      </ng-container>\r\n  `\r\n})\r\n\r\nexport class TreeNodeWrapperComponent {\r\n\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() templates: any;\r\n\r\n}\r\n","import {\r\n  Component,\r\n  Input,\r\n  ViewEncapsulation,\r\n} from '@angular/core';\r\nimport { TreeNode } from '../models/tree-node.model';\r\n\r\n@Component({\r\n  selector: 'TreeNode, tree-node',\r\n  encapsulation: ViewEncapsulation.None,\r\n  styles: [],\r\n  template: `\r\n    <ng-container *treeMobxAutorun=\"{ dontDetach: true }\">\r\n      <div\r\n        *ngIf=\"!templates.treeNodeFullTemplate\"\r\n        [class]=\"node.getClass()\"\r\n        [class.tree-node]=\"true\"\r\n        [class.tree-node-expanded]=\"node.isExpanded && node.hasChildren\"\r\n        [class.tree-node-collapsed]=\"node.isCollapsed && node.hasChildren\"\r\n        [class.tree-node-leaf]=\"node.isLeaf\"\r\n        [class.tree-node-active]=\"node.isActive\"\r\n        [class.tree-node-focused]=\"node.isFocused\"\r\n      >\r\n        <tree-node-drop-slot\r\n          *ngIf=\"index === 0\"\r\n          [dropIndex]=\"node.index\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n\r\n        <tree-node-wrapper\r\n          [node]=\"node\"\r\n          [index]=\"index\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-wrapper>\r\n\r\n        <tree-node-children\r\n          [node]=\"node\"\r\n          [templates]=\"templates\"\r\n        ></tree-node-children>\r\n        <tree-node-drop-slot\r\n          [dropIndex]=\"node.index + 1\"\r\n          [node]=\"node.parent\"\r\n        ></tree-node-drop-slot>\r\n      </div>\r\n      <ng-container\r\n        [ngTemplateOutlet]=\"templates.treeNodeFullTemplate\"\r\n        [ngTemplateOutletContext]=\"{\r\n          $implicit: node,\r\n          node: node,\r\n          index: index,\r\n          templates: templates\r\n        }\"\r\n      >\r\n      </ng-container>\r\n    </ng-container>\r\n  `\r\n})\r\nexport class TreeNodeComponent {\r\n  @Input() node: TreeNode;\r\n  @Input() index: number;\r\n  @Input() templates: any;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TreeMobxAutorunDirective } from './mobx-angular/tree-mobx-autorun.directive';\r\n\r\nimport {\r\n  IActionHandler,\r\n  IActionMapping,\r\n  TREE_ACTIONS\r\n} from './models/tree-options.model';\r\nimport {\r\n  IAllowDragFn,\r\n  IAllowDropFn,\r\n  ITreeOptions,\r\n  ITreeState\r\n} from './defs/api';\r\nimport { KEYS } from './constants/keys';\r\nimport { TreeModel } from './models/tree.model';\r\nimport { TreeNode } from './models/tree-node.model';\r\nimport { TreeDraggedElement } from './models/tree-dragged-element.model';\r\nimport { TreeVirtualScroll } from './models/tree-virtual-scroll.model';\r\nimport { LoadingComponent } from './components/loading.component';\r\nimport { TreeComponent } from './components/tree.component';\r\nimport { TreeNodeComponent } from './components/tree-node.component';\r\nimport { TreeNodeContent } from './components/tree-node-content.component';\r\nimport { TreeNodeDropSlot } from './components/tree-node-drop-slot.component';\r\nimport { TreeNodeExpanderComponent } from './components/tree-node-expander.component';\r\nimport { TreeNodeChildrenComponent } from './components/tree-node-children.component';\r\nimport { TreeNodeCollectionComponent } from './components/tree-node-collection.component';\r\nimport { TreeNodeWrapperComponent } from './components/tree-node-wrapper.component';\r\nimport { TreeViewportComponent } from './components/tree-viewport.component';\r\nimport { TreeNodeCheckboxComponent } from './components/tree-node-checkbox.component';\r\nimport { TreeDropDirective } from './directives/tree-drop.directive';\r\nimport { TreeDragDirective } from './directives/tree-drag.directive';\r\nimport { TreeAnimateOpenDirective } from './directives/tree-animate-open.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    TreeComponent,\r\n    TreeNodeComponent,\r\n    TreeNodeContent,\r\n    LoadingComponent,\r\n    TreeDropDirective,\r\n    TreeDragDirective,\r\n    TreeNodeExpanderComponent,\r\n    TreeNodeChildrenComponent,\r\n    TreeNodeDropSlot,\r\n    TreeNodeCollectionComponent,\r\n    TreeViewportComponent,\r\n    TreeNodeWrapperComponent,\r\n    TreeNodeCheckboxComponent,\r\n    TreeAnimateOpenDirective,\r\n    TreeMobxAutorunDirective\r\n  ],\r\n  exports: [\r\n    TreeComponent,\r\n    TreeNodeComponent,\r\n    TreeNodeContent,\r\n    LoadingComponent,\r\n    TreeDropDirective,\r\n    TreeDragDirective,\r\n    TreeNodeExpanderComponent,\r\n    TreeNodeChildrenComponent,\r\n    TreeNodeDropSlot,\r\n    TreeNodeCollectionComponent,\r\n    TreeViewportComponent,\r\n    TreeNodeWrapperComponent,\r\n    TreeNodeCheckboxComponent,\r\n    TreeAnimateOpenDirective,\r\n    TreeMobxAutorunDirective\r\n  ],\r\n  imports: [CommonModule],\r\n  providers: []\r\n})\r\nexport class TreeModule {}\r\n\r\nexport {\r\n  TreeModel,\r\n  TreeNode,\r\n  TreeDraggedElement,\r\n  TreeVirtualScroll,\r\n  ITreeOptions,\r\n  TREE_ACTIONS,\r\n  KEYS,\r\n  IActionMapping,\r\n  IActionHandler,\r\n  IAllowDropFn,\r\n  IAllowDragFn,\r\n  LoadingComponent,\r\n  TreeAnimateOpenDirective,\r\n  TreeMobxAutorunDirective,\r\n  TreeComponent,\r\n  TreeNodeComponent,\r\n  TreeNodeWrapperComponent,\r\n  TreeNodeContent,\r\n  TreeDropDirective,\r\n  TreeDragDirective,\r\n  TreeNodeExpanderComponent,\r\n  TreeNodeChildrenComponent,\r\n  TreeNodeDropSlot,\r\n  TreeNodeCollectionComponent,\r\n  TreeViewportComponent,\r\n  TreeNodeCheckboxComponent,\r\n  ITreeState\r\n};\r\n","/*\r\n * Public API Surface of angular-tree-component\r\n */\r\n\r\nexport * from './lib/angular-tree-component.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["__decorate","computed","observable","action","i1.TreeModel","_c0","DRAG_OVER_CLASS","i1.TreeDraggedElement","mobxAction","mobxComputed","mobxObservable","i1.TreeVirtualScroll","_c1","i2.TreeDraggedElement"],"mappings":"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"}}}